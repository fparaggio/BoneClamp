
/*
  

 */

SYSTEM test23;

STATE FUNCTION iout;
EXTERNAL INPUT VIN1;

// Function Generator section - generates a square wave to stimulate
// the morris-lecar system through iout

PARAMETER time_factor = 1.0;

// Following are declarations for itrig, the triggered step function.  
PARAMETER Vthresh = 5.0;
PARAMETER trigwait = 0.1; 
PARAMETER trigdur = 0.3;
PARAMETER amptrig = 20.0;

DISCRETE STATE itrig_status = (inactive, crossed_threshold, waiting, active);

STATE trig_delay_counter = 5;
STATE trig_pulse_counter = 5;
/* Triggered step function
	
   If the measured voltage crosses vthresh in the positive direction,
   wait trigwait milliseconds and then output a pulse trigdur ms
   long.  The pulse should have amplitude amptrig.  
*/
STATE itrig = 0;



// Following are declarations for istim, the stimulus current.
PARAMETER irate = 0.0;

STATE istim = 0;

STATE onepulse = 0;


TIME t;


//
// This is an example of an inline C declaration.  This defines a 
// heaviside function.
//

heav(x) = (x >= 0) ? 1 : 0;



// Function Generation section:
// Everything below here is executed every cycle: i.e. the
// computational loop.  
//

AT TIME t:


q(itrig) = itrig;
q(trig_delay_counter) = trig_delay_counter;
q(trig_pulse_counter) = trig_pulse_counter;
s(itrig_status) = itrig_status;

q(onepulse) = onepulse;


CASE itrig_status == inactive [

     // This is the case where the input voltage has NOT crossed vthresh   

     // keep the pulse low
     q(itrig) = 0;

     s(itrig_status) = CONDITION [

          // if the input voltage does cross the threshold, then
	  // change state to crossed_threshold
	  VIN1 > Vthresh   => crossed_threshold; 

	  onepulse > 0     => crossed_threshold;

	  // otherwise, stay in the inactive state
	  DEFAULT          => itrig_status;

     ];

     q(onepulse) = onepulse > 0 ? (onepulse -1) : 0.0;

];

CASE itrig_status == crossed_threshold [

    // This is the case where the input voltage has crossed vthresh 
    // and we are preparing to wait trigwait ms.

     // load the delay counter with the trigwait value
     q(trig_delay_counter) = trigwait;

     // load the pulse counter (to be used in the actual pulse
     // output stage) with the pulse duration value
     q(trig_pulse_counter) = trigdur;

     // change the status to waiting
     s(itrig_status) = waiting;

];

CASE itrig_status == waiting [

    // This is the case where we are waiting trigwait ms

     // decrement the delay counter by one timestep
     q(trig_delay_counter) = trig_delay_counter - (1 * dt);

     s(itrig_status) = CONDITION [
	  
	  // if the delay counter is zero or negative, switch to the
	  // pulse active state
	  (trig_delay_counter <= 0) => active;

	  // otherwise, stay in the current state
	  DEFAULT                   => itrig_status;

     ];

];

CASE itrig_status == active [

     // This is the case where the trigger wait time has elapsed 
     // and we're outputting a pulse  


     // keep the pulse high
     q(itrig) = amptrig;

     // decrement the pulse lifetime counter by one timestep
     q(trig_pulse_counter) = trig_pulse_counter - (1 * dt);

     s(itrig_status) = CONDITION [
	  
	  // if the pulse lifetime has expired, switch back to
	  // inactive state
	  (trig_pulse_counter <= 0) => inactive;

	  // otherwise, stay in the current state
	  DEFAULT                   => itrig_status;

     ];

];

d(istim) = irate;

iout = itrig + istim;
