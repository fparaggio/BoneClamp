/*
   The demo Morris-Lecar model.  One of the outputs is the voltage.
   This allows it to "do something" on the benchtop.  The other output
   is a synaptic current to a cell.  The inputs are from two cells (of
   course, they could also be function generators).

   Assume 2 voltage inputs and outputs.

   VIN1 -- from a cell, 10xVm  (so 1V means 100mV in the cell)
   VIN2 -- from a cell, 10xVm  (ditto)

   so for both of the above, multiple by 100 to obtain mV

   VOUT1 -- output of internal cell model.  If internal cell model
        units are mV, output should be Vm (in mV)*0.01 Volts.  So 100 
        mV in the cell model will result in 10V being output.

   make this scaling factor settable as well (we may want to use 0.1)

   VOUT2 -- this will control a current input back to the cell
	    connected to VIN2.  The scaling should be X nA/V, X=10
	    or 1.

   I'm assuming that VIN1,VIN2 have already been scaled to mV,
   time/rates are in milliseconds.


   $Id: stimulated-morris-lecar.dynamo,v 1.1 2006/02/23 01:35:36 ivan_raikov Exp $
   
*/

SYSTEM Stimulated_Morris_Lecar;



// Function Generator section - generates a square wave to stimulate
// the morris-lecar system through iout

PARAMETER time_factor = 1.0;


// Following are declarations for itrig, the triggered step function.  
PARAMETER Vthresh = 5.0;
PARAMETER trigwait = 0.1; 
PARAMETER trigdur = 0.3;
PARAMETER amptrig = 20.0;

DISCRETE STATE itrig_status = (inactive, crossed_threshold, waiting, active);

STATE trig_delay_counter = 5;
STATE trig_pulse_counter = 5;
/* Triggered step function
	
   If the measured voltage crosses vthresh in the positive direction,
   wait trigwait milliseconds and then output a pulse trigdur ms
   long.  The pulse should have amplitude amptrig.  
*/
STATE itrig = 0;



// Following are declarations for istim, the stimulus current.
PARAMETER irate = 0.0;

STATE istim = 0;

// Inputs and outputs
EXTERNAL INPUT VIN1;
EXTERNAL OUTPUT VOUT1, OUTPUT VOUT2;

STATE FUNCTION iout;


STATE onepulse = 0;

// gains as documented above

PARAMETER vin1gain = 100.0, vin2gain = 100.0;
PARAMETER vout1gain = 0.1, vout2gain = 1.0;




// Morris-Lecar model parameters

PARAMETER vm = -27, dm = 10, vw = -21, dw = 10;
PARAMETER ek = -75, el = -50, eca = 55;
PARAMETER iapp = 0.7, gk = 2.5, gl =0.5, gca = 1.0, phi = 0.333;
PARAMETER c = 1;

// synaptic parameters: assume that all synapses have same kinetics
//
// gsynin1/2 are synaptic inputs from cells 1/2
// gsynout2 is output from Morris-Lecar model to cell 2
//
PARAMETER gsynin1 = 0, gsynin2 = 0, esynin1 = 0, esynin2 = 0;
PARAMETER gsynout2 = 0, esynout2 = 0;
PARAMETER kup = 0.1, kdn = 0.9;
PARAMETER vthresh = 0, vthresh1 = 0, vthresh2 = 0, vthreshm = 0;

// these are parameters for currents for an external cell
// we can add a leak or a negative shunt conductance for practice
// with a model cell

PARAMETER iapp2=0, gl2=0, el2=0, gnshunt=0;

//
// these are predefined for input/output voltages
//
EXTERNAL INPUT VIN2;

// the input voltages, converted to the signal they represent in mV
STATE FUNCTION vin1mv, vin2mv;

// the Morris-Lecar currents and synaptic currents
STATE FUNCTION ica;
STATE FUNCTION isynin1;
STATE FUNCTION isynin2;
STATE FUNCTION isynout2;
STATE FUNCTION ik;
STATE FUNCTION il;

// this current is the one output to cell2
STATE FUNCTION iout2;

// define the state variable for the voltage of the internal M-L model

STATE v = 0;

// these are voltage-dependent lookup tables.
// F1 and F2 are used to integrate the state variable w, as in 
// w = w * F1(v) + F2(v)

TABLE FUNCTION F1(v) = exp(-dt * (phi * cosh((v - vw) / (2 * dw)))), LOW=-100, HIGH=100, STEP=0.1, ARGUMENT=v; 
TABLE FUNCTION F2(v) = 0.5 * (1 + tanh((v - vw) / dw)) * (1 - F1(v)), LOW=-100, HIGH=100, STEP=0.1, ARGUMENT=v;
TABLE FUNCTION F3(v) = 0.5 * (1 + tanh((v - vm) / dm)), LOW=-100, HIGH=100, STEP=0.1, ARGUMENT=v;

// synaptic state variables. sml is the synaptic variable activated by the
// internal M-L model, and gates the conductance of isynout2

STATE sin1 = 0, sin2 = 0, sml = 0;

// declare the w state variable.  The "mau" method means that in lieu of
// Euler integration, solve by a user-defined "multiply-add unit"

STATE w = 0 METHOD "mau";

TIME t;


//
// This is an example of an inline C declaration.  This defines a 
// heaviside function.
//

heav(x) = (x >= 0) ? 1 : 0;



// Function Generation section:
// Everything below here is executed every cycle: i.e. the
// computational loop.  
//

AT TIME t:


q(itrig) = itrig;
q(trig_delay_counter) = trig_delay_counter;
q(trig_pulse_counter) = trig_pulse_counter;
s(itrig_status) = itrig_status;

q(onepulse) = onepulse;


CASE itrig_status == inactive [

     // This is the case where the input voltage has NOT crossed vthresh   

     // keep the pulse low
     q(itrig) = 0;

     s(itrig_status) = CONDITION [

          // if the input voltage does cross the threshold, then
	  // change state to crossed_threshold
	  VIN1 > Vthresh   => crossed_threshold; 

	  onepulse > 0     => crossed_threshold;

	  // otherwise, stay in the inactive state
	  DEFAULT          => itrig_status;

     ];

     q(onepulse) = onepulse > 0 ? (onepulse -1) : 0.0;

];

CASE itrig_status == crossed_threshold [

    // This is the case where the input voltage has crossed vthresh 
    // and we are preparing to wait trigwait ms.

     // load the delay counter with the trigwait value
     q(trig_delay_counter) = trigwait;

     // load the pulse counter (to be used in the actual pulse
     // output stage) with the pulse duration value
     q(trig_pulse_counter) = trigdur;

     // change the status to waiting
     s(itrig_status) = waiting;

];

CASE itrig_status == waiting [

    // This is the case where we are waiting trigwait ms

     // decrement the delay counter by one timestep
     q(trig_delay_counter) = trig_delay_counter - (1 * dt);

     s(itrig_status) = CONDITION [
	  
	  // if the delay counter is zero or negative, switch to the
	  // pulse active state
	  (trig_delay_counter <= 0) => active;

	  // otherwise, stay in the current state
	  DEFAULT                   => itrig_status;

     ];

];

CASE itrig_status == active [

     // This is the case where the trigger wait time has elapsed 
     // and we're outputting a pulse  


     // keep the pulse high
     q(itrig) = amptrig;

     // decrement the pulse lifetime counter by one timestep
     q(trig_pulse_counter) = trig_pulse_counter - (1 * dt);

     s(itrig_status) = CONDITION [
	  
	  // if the pulse lifetime has expired, switch back to
	  // inactive state
	  (trig_pulse_counter <= 0) => inactive;

	  // otherwise, stay in the current state
	  DEFAULT                   => itrig_status;

     ];

];

d(istim) = irate;

iout = itrig + istim;




// MORRIS-LECAR system below


//
// Convert input voltages to representative values.
//

vin1mv = VIN1 * vin1gain;
vin2mv = VIN2 * vin2gain;


//
// Calculate ionic currents, F3 is m_inf(V) for ica via a lookup
// table. 
//
ica = gca * F3 * (v - eca);
ik = gk * w * (v - ek);
il = gl * (v - el);


// Inputs from cells 1 and 2.

isynin1 = gsynin1 * sin1 * (v - esynin1);
isynin2 = gsynin2 * sin2 * (v - esynin2);

// Output to cell 2
isynout2 = gsynout2 * sml * (vin2mv - esynout2);


// This specifies the derivatives of the state variables to be
// integrated. 

d(v) = (iout + iapp - il - ik - ica - isynin1 - isynin2) / c;

// This form of dw/dt means to use the specified multiply/add
// functions.

d(w) = [ F1, F2 ];

// These are the synaptic gating variables.

d(sin1) = heav(vin1mv - vthresh1) * (1 - sin1) * kup - kdn * sin1;
d(sin2) = heav(vin2mv - vthresh2) * (1 - sin2) * kup - kdn * sin2;
d(sml) = heav(v - vthreshm) * (1 - sml) * kup - kdn * sml;

// The output current to cell2.  A synaptic current, leak current, 
// negative shunt current, and/or constant current.

iout2 = isynout2 + gl2 * (vin2mv - el2) - iapp2 - gnshunt * vin2mv;

VOUT1 = v * vout1gain;
VOUT2 = - iout2 * vout2gain;
