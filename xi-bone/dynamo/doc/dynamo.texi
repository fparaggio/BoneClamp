\input texinfo @c -*- texinfo -*-
@comment %**start of header

@setfilename dynamo.info
@settitle Dynamo Reference Manual 
@setchapternewpage on
@set version 1.0.0
@set month-year January 2005

@finalout

@comment %**end of header (This is for running Texinfo on a region.)

@iftex 


@macro texitimes {a, b}
@tex{$ \a\ \\times \b\ $}@end tex
@end macro

@macro teximathsym {sym}
@tex{$ \sym\ $}@end tex
@end macro

@end iftex

@ifinfo 

@macro teximathsym {sym}
\sym\
@end macro

@macro texitimes {a, b}
\a\x\b\
@end macro

@macro Omega 
Ohm
@end macro

@macro mu
u
@end macro

@end ifinfo


@ifinfo
@format
START-INFO-DIR-ENTRY
* Dynamo: (dynamo.info). A program for simulation of dynamical systems.
END-INFO-DIR-ENTRY
@end format
@end ifinfo


@ifinfo
This file documents Dynamo.


Copyright @copyright{} 2003-2005 Ivan Raikov and the Georgia Institute
of Technology.

This edition of the Dynamo documentation is consistent with Dynamo
@value{version}. 

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).
@end ignore

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.
@end ifinfo

@titlepage
@sp 10
@title{Dynamo}
@subtitle{Dynamical Language}
@subtitle{Reference Manual}
@subtitle{Edition @value{version}}

@author Ivan Raikov

@comment  The following two commands start the copyright page.
@page
@vskip 0pt plus 1fill
Copyright @copyright{} 2003-2005 Ivan Raikov and the Georgia
Institute of Technology.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.
@end titlepage
     
@ifinfo
@node Top, Running Dynamo, (dir), (dir)
@top Dynamo
This is the top node.
@end ifinfo

@menu
* Running Dynamo::              
* Modeling Language::           
* Emacs Editing Mode::          

@detailmenu
 --- The Detailed Node Listing ---

Modeling Language

* Concepts::                    
* Structure of a Dynamo Model::  
* Declarations::                
* Time Blocks::                 
* Case-based Equations::        
* Expressions and Operators in the Modeling Language::  
* Mathematical Functions in the Modeling Language::  

Emacs Editing Mode

* Description::                 

@end detailmenu
@end menu

@node  Running Dynamo, Modeling Language, Top, Top
@chapter Running Dynamo

The Dynamo translator is run with the command @kbd{dynamo} followed by
names of files to be translated, and options that specify the type of
output. For example:

@example
  dynamo --matlab  morris-lecar.dynamo
@end example

This command specifies that the Dynamo translator should translate file
@file{morris-lecar.dynamo} to Matlab code. Below is a summary of all
options accepted by the Dynamo translator:

@multitable @columnfractions 0.3 0.7 
@headitem @strong{Option(s)} @tab @strong{Description}

@item  @code{-h,  --help} @tab
        show a short message that briefly describes the options
@item  @code{--version, --release}                @tab
        show version information
@item  @code{-o [FILE],  --output[=FILE]}         @tab        
        set the prefix of output file(s)
@item  @code{-e [FILE],  --error-output[=FILE]}   @tab
        redirect error messages to file
@item  @code{--eqdfg[=FILE]}                     @tab
        output the equation DFG to file    
@item  @code{--exdfg[=FILE]}                      @tab
       output the expression DFG to file 
@item  @code{-r [FILE],  --mrci[=FILE]}           @tab
        output MRCI model description to file 
@item  @code{-x [FILE],  --rtxi[=FILE]}           @tab
        output RTXI model description to file
@item  @code{-m [FILE],  --matlab[=FILE]}         @tab
        output Matlab model description to file
@item  @code{--simulink[=FILE]}                   @tab
        output Simulink model description to file
@end multitable

@node Modeling Language, Emacs Editing Mode, Running Dynamo, Top
@chapter Modeling Language


A @dfn{model description} describes the dynamical system to be
studied. It consists of @dfn{declarations} and @dfn{equations}, which
have a certain mathematical meaning, and are not to be confused with
assignment statements in programming languages. These equations do not
have to be entered in any particular order; they are automatically
sorted by the translator so that functions are computed before the
state equations that use them.

@menu
* Concepts::                    
* Structure of a Dynamo Model::  
* Declarations::                
* Time Blocks::                 
* Case-based Equations::        
* Expressions and Operators in the Modeling Language::  
* Mathematical Functions in the Modeling Language::  
@end menu

@node Concepts, Structure of a Dynamo Model, Modeling Language, Modeling Language
@section Concepts

A @dfn{user-visible quantity} is something the user can access, change
(provided that it makes sense), and which may have a documentation
associated with it. Dynamo allows all user-visible quantities to be
manipulated by the user, and in that sense it does not distinguish
between quantities with different mathematical meanings (such as
constants, states, functions, etc.)

The Dynamo model description language is always case sensitive. The name
@samp{A} is different from @samp{a}. The language has a set of
reserved words, which are always written in capital letters.

The names given to user-visible quantities must obey the following
rules: an identifier consists of a sequence of alpha-numerical
characters, the first of which is a character, and the underscore
@samp{_} is counted as a character.

Once an identifier is used to declare a state, parameter etc. @emph{it
may not be used for any other purpose}.

Comments may be written anywhere. The syntax is as in the C and C++
programming languages: either enclosed between @samp{/*} and
@samp{*/}, or from @samp{//} and to end-of-line.

@node  Structure of a Dynamo Model, Declarations, Concepts, Modeling Language
@section Structure of a Dynamo Model

A Dynamo model file consists of a declaration section followed by a time
block. The declaration section consists of a number of
declarations. Every declaration is ended by a semicolon. The first
declaration has to be a declaration of the model, such as

@example
       MODEL @var{system_name};
@end example
@noindent

where @var{system_name} follows the rules for an identifier name.

After the system declaration, there follow a number of declarations of
states, parameters, and functions. There has to be exactly one time
declaration.

@node Declarations, Time Blocks, Structure of a Dynamo Model, Modeling Language
@section Declarations

The declaration section specifies the names and initial values of all
quantities in the dynamical system. Every declaration is ended by a
semicolon. The first declaration has to be a declaration of the
system, which simply states the name of the model for informative
purposes.  

After the model name, there follows a number of declarations for
@dfn{parameters}, @dfn{states}, @dfn{external states} and
@dfn{functions}.  The declaration section concludes with exactly one
@dfn{time declaration}.

@dfn{Parameters} are constants during integration. The syntax 
for declaring a parameter is
@example
        PARAMETER @var{name} = @var{default\_value} ``@var{description}''
@end example

where @var{description} is optional. The description string is there
for convenience and is not read by any program. It is always optional,
so it can be omitted. 

@dfn{Vector parameters} are constant vector values. The syntax  
for declaring a vector parameter is
@example
       VECTOR PARAMETER @var{name} = ( @var{element0}, @var{element1}, ... ) ``@var{description}'';
@end example

The parameter declared in this manner will have a vector value
initialized with the scalar elements supplied by the user. The size of
the vector is equal to the number of initialization elements given,
and remains constant throughout the simulation.

@dfn{States} are the components of the dynamical system whose values
change over time and are computed by a difference or differential
equation.  There are several different kinds of states. @dfn{Scalar
states} can only contain a scalar value and are declared with the
keyword @code{STATE}:

@example
        STATE @var{name} = @var{initial condition} ``@var{description}'';
@end example

where @var{name} is the name of the state as the user sees it and
@var{initial condition} is the default initial condition, a real
constant.

For example, in the following declaration,

@example
        STATE x = 0.1 "gating variable for inward conductance";
@end example

@code{x} is the name of the state, and 0.1 is the default initial
condition.

The above declaration will create a state variable which is integrated
using an equation in the time block, described later in this
section. The default method for integration is Euler's method. Dynamo
also supports a method we call @dfn{multiply-add-update}, in which the
state variable being integrated is multiplied and added with the values
returned by two functions dependent on @code{dt}.  The method of
integration can be specified with the @code{METHOD} attribute of the
state definition, as follows:

@example
        STATE @var{name} = @var{initial condition} METHOD @var{method\_name};
@end example

where @code{method\_name} can be either @code{euler} or @code{mau},
indicating Euler or multiply-add-update, respectively. Thus, our
example can be changed to:

@example
        STATE x = 0.1 METHOD "mau" 
                "gating variable for inward conductance";
@end example

@dfn{Integer states} are exactly the same as scalar states, only they
can only have an integer initial value, and only the integer part of
their equation is assigned to them.

@dfn{Vector states} are states that can only hold a vector value of
fixed size:

@example
        VECTOR STATE @var{name} = ( @var{initial0}, @var{initial1}, ... ) ``@var{description}'';
@end example

The state declared above will have an initial value that is a vector
initialized with the scalar elements supplied by the user. The size of
the vector is equal to the number of initialization elements given,
and remains constant throughout the simulation. Vector states cannot
be assigned equations that return a vector of size different than that
of their initial value.

@dfn{Discrete states} are state quantities whose value can only be one
of several enumerated (discrete) values:

@example
        DISCRETE STATE status = ( inactive, threshold, active ) ``@var{description}'';
@end example

The names of the possible values are supplied by the user, and are
implicitly assigned integer values starting from one and incrementing
by one. These default integer values can be overridden as follows: 

@example
        DISCRETE STATE status = ( inactive=5, threshold=10, active=20 );
@end example

@dfn{External states} are states whose value is either obtained through
the data acquisition board (@dfn{external input}), or whose value is
being output to the data acquisition board (@dfn{external output}). They
are declared as: 

@example
        EXTERNAL INPUT Vin1, Vin2;
        EXTERNAL OUTPUT Vout;
@end example

The input state can then be used in equations and expressions; the
output state may not be used in expressions, and it must be assigned a
value.  The values of these external state variables are in terms of
the units provided by the data acquisition board, usually volts. The
order in which external input and output states are declared
determines their assignment to physical channels of the data
acquisition board.  For example, in the above declaration, state
@var{Vin1} will be assigned to input channel 0, and state @var{Vin2}
will be assigned to input channel 1. Had they been declared in reverse
order, then state @var{Vin1} would have been assigned to input channel
1, and state @var{Vin2} would have been assigned to input channel 0.

@dfn{Functions} are quantities that are statically dependent on other
quantities in the system---unlike state equations, their equations are
not permitted to use the previously computed value of the
quantity. There are @dfn{scalar functions} which return a scalar
value, and @dfn{vector functions} which return a vector value.

@example
        STATE FUNCTION @var{name} "@var{description}";
@end example

and

@example
        VECTOR FUNCTION @var{name} "@var{description}";
@end example

For all systems, there is only one ``time'', to be declared with the
declaration @code{TIME}. The syntax is

@example
        TIME @var{name};
@end example

The time variable that was declared with the above statement can be
used anywhere in the model equations. Its value is a real number that
represents the number of milliseconds elapsed since the beginning of
the simulation. At each computational step it is incremented by
@code{dt}.

The declarations section may also contain @dfn{function lookup tables}.
These define a function whose value is computed by interpolating
datapoints in a table indexed by a state variable.  This feature can
greatly speed up computation.  An example lookup table definition is
shown below.

@example
        TABLE FUNCTION F1(v) = (1 + tanh(v)), 
                       LOW = -10.1, HIGH = 10.1, STEP = 0.1, 
                       DEPENDENCY = F2;
@end example

The various syntactic components of this statement have the following
meanings: 
@itemize @minus

@item @samp{TABLE FUNCTION F(v)}---declaration of a function called
@samp{F1}, which has one argument, @samp{v}. Note that the function
argument is only to be used inside the function expression; it is
@emph{NOT} (or doesn't have to be) the name of the variable used for
looking up datapoints in the function table.

@item @samp{(1 + tanh(v))}---the actual function expression. 
@xref{Time Blocks}, for details on arithmetic expressions in
Dynamo. Note the use of our function argument.

@item @samp{LOW=-10.1,HIGH=10.1,STEP=0.1}---the lower boundary of
interpolation datapoints, the upper boundary of interpolation
datapoints, and the interval for datapoints between the two
boundaries. Dynamo will compute datapoints starting at the lower
boundary and reaching to the upper boundary using the given step.

@item @samp{DEPENDENCY=F2}---the name of the dependency. This can be a
function, state, parameter, etc. At run-time, the value of this quantity
will be computed first, then it will be given as an input to the
interpolation function.

@end itemize


@node Time Blocks, Case-based Equations, Declarations, Modeling Language
@section Time Blocks

A time block describes the equations which are in effect during the
named time. There are two types of time blocks allowed in Dynamo: the
starting time block and the run-time block.  The starting time block
is used to declare and initialize quantities and tables.  This block
is executed once before the main integration and begins after the
following line:
@example
        AT TIME START:
@end example

The equations in a run-time block are evaluated once per iteration of
the system.  State equations (differential equations and difference
equations) are only allowed in the run-time blocks.  All other
equations may be used in any time block.  Assuming that the system
time is called @code{t}, the run-time block begins with:
@example
        AT TIME t:
@end example

The equations in a time block are, if possible, sorted in order so they
can be sequentially executed. If the equations contain a circular
dependence, the sorting will fail. The Dynamo translator can not solve
algebraic loops. The translator also checks that every state variable is
assigned to exactly once, and that the correct type of variable (scalar
or vector) is used with each built-in function and state equation.

There are four types of equations in Dynamo: functional expressions
(algebraic equations), difference, differential and discrete equations.

Function expressions are specified in the following manner:

@example
        f1 = sin((1 + a) / 5);
@end example

The above statement will specify that at each iteration, the quantity
@var{f1} will have the value computed with the given
expression. @var{f1} then can be used in the expressions of other
functions, differential equations, etc:

@example
        f2 = sin(f1 * 12);
@end example

On the right hand side, simple mathematical expressions are allowed.
The equation, which may run over several lines, is terminated with a
semicolon.  @xref{Expressions and Operators in the Modeling
Language}, for a complete description of the possible arithmetic
expressions.

Standard mathematical functions are available with their usual names
(log, cos, atan, etc@dots{}). @xref{Mathematical Functions in the
Modeling Language}, for a list of all Dynamo-supported mathematical
functions.

Differential equations are specified in the following form:
@example
        d(@var{state}) = @var{right-hand side};
@end example
Here @code{d( )} denotes the differential operator, and @code{d(x)}
should here be interpreted as @math{dx/dt}.  On the right-hand side,
the same rules apply as for function expressions.

In cases where the desired method of integration requires more than
one equation (such as the multiply-add-update method), the equations are
written as a comma-separated list enclosed in brackets. Thus:
@example
        d(@var{state}) = [ @var{exp1}, @var{exp2} ];
@end example

@noindent
For difference equations, the dynamic equation takes the form
@example
        q(x) = right-hand side;
@end example
@noindent
Here we think of @code{q} as the forward shift operator: @code{q(x(t)) =
x(t + 1)}. 

Discrete equations operate on discrete quantities, which are quantities
that can assume a value only from a declared set of finite size.  They
are specified in one of the following two forms:

@example
        s(@var{dstate}) = @var{set element};
@end example

The @code{s( )} denotes that @var{dstate} is a discrete quantity to be
assigned some set element.  Here, the set element is explicitly stated
on the right-hand side.  Alternatively, a sequence of conditions may
be used to determine the set element to assign to @var{dstate}.

@example
        s(@var{dstate}) = CONDITION [
                       x > 0.1 => high;
                       x <= 0  => low;
                       @dots{}
                       DEFAULT => normal;
                       ];
@end example

The value stored into @var{state} comes from the set element
corresponding to the first true condition listed.  If no conditions
are true, the set element in the default clause is used.  A default
clause must always be present. 

Conditions in discrete equations can be written in one of two ways.
First, any arithmetic expression, such as @code{a+b} can be used as a
condition; in this case, if the expression evaluates to a positive
value, its boolean meaning is taken to be @code{true}; otherwise, its
boolean meaning is taken to be @code{false}. For example:


@example
        s(@var{dstate}) = CONDITION [
                       x       => high;
                       x <= 0  => low;
                       @dots{}
                       DEFAULT => normal;
                       ];
@end example

This is the same example as before, only this time if the value of x is
greater than 0, the first condition evaluates to @code{true}, and
@var{dstate} is assigned the value @var{high}.

Second, a boolean expression can be a comparison between two quantities,
or a quantity and a constant:
@example
        s(@var{dstate}) = CONDITION [
                       x > threshold  => high;
                       x <= 0         => low;
                       @dots{}
                       DEFAULT => normal;
                       ];
@end example

Here, @var{x} and @var{threshold} can be any two scalar quantities in
the system. The comparison operators defined in Dynamo are @code{>},
@code{<}, @code{<=}, @code{>=}, @code{==} (equal), @code{!=} (not
equal). 

In addition, conditions in discrete equations may include the boolean
connectives @code{&&} (logical and), @code{||} (logical or), and
@code{!} (logical negation). These connectives can be used to combine
conditions as follows:
@example
        s(@var{dstate}) = CONDITION [
                       (x > threshold)            => high;
                       (x > 0) && (x < threshold) => resting;
                       x <= 0                     => low;
                       @dots{}
                       DEFAULT => normal;
                       ];
@end example


@node Case-based Equations, Expressions and Operators in the Modeling Language, Time Blocks, Modeling Language
@section Case-based Equations

Each of the types of equations defined above may also consist of several
case-based equations. Such equations are typically used when the value
of a certain quantity must be computed by several different equations
each dependent on certain conditions. For example, suppose that the
system model must trigger a certain reaction when one of the input
states crosses a threshold value. One way to accomplish this is to
define a discrete state that changes its value when the threshold is
reached: 

@example
        s(@var{trigger}) = CONDITION [
                       (input > threshold)            => high;
                       (input > 0) && (x < threshold) => resting;
                       (input  <= 0) <= 0             => low;
                       @dots{}
                       DEFAULT => normal;
                       ];
@end example

Next, we define a state equations which evaluates to zero when the
value of state @code{trigger} is anything but @code{high}:


@example
        d(@var{x}) = 0;

CASE trigger == high [
        
        d(@var{x}) = a*x^2 + b*x + c;

];

@end example

In this example, state @code{x} will change its value according to the
second equation specified if and only if state @code{trigger} has value
@code{high}, and will remain unchanged in all other cases. The only type
of statement allowed in the @code{CASE} clause is an equal/not equal
comparison between a discrete state and one of its values.



@node Expressions and Operators in the Modeling Language, Mathematical Functions in the Modeling Language, Case-based Equations, Modeling Language
@section Expressions and Operators in the Modeling Language

An @dfn{expression} is any sequence of operators and operands that
produces a value. The simplest expressions are parameter, function, and
state names, which yield values directly. Other expressions combine
operators and subexpressions to produce values.

An expression within parentheses has the same value as the expression
without parentheses would have. Any expression can be delimited by
parentheses to change the precedence of its operators.

All declared quantities can be used in conjunction with C operators to
create more complex expressions. The following table presents the set
of C operators.

@multitable @columnfractions 0.3  0.2  0.5
@anchor{Table 1}
   @headitem @strong{Operator} @tab @strong{Example} @tab @strong{Description/Meaning}
   @item    @code{+} [unary]    @tab  +a       @tab Value of @var{a}
   @item    @code{-} [unary]    @tab  -a       @tab Negative of @var{a}

   @item    @code{+} [binary]     @tab a + b   @tab @var{a} plus @var{b}
   @item    @code{-} [binary]     @tab a - b   @tab @var{a} minus @var{b}
   @item    @code{*} [binary]     @tab a * b   @tab @var{a} times @var{b}
   @item    @code{/}              @tab a / b   @tab @var{a} divided by @var{b}
   @item    @code{%}              @tab a % b   @tab Remainder of @var{a}/@var{b}
   @item    @code{^}              @tab a ^ b   @tab @var{a} to the power
of @var{b}.
   @item    @code{#}              @tab a # b   @tab Cross-product of @var{a}
and @var{b}.


   @item    @code{<}              @tab a < b   @tab 1 if @var{a} < @var{b}; 0
otherwise       
   @item    @code{>}              @tab a > b   @tab 1 if @var{a} > @var{b}; 0
otherwise            
   @item    @code{<=}             @tab a <= b  @tab 1 if @var{a} <= @var{b}; 0
otherwise           
   @item    @code{>=}             @tab a >= b  @tab 1 if @var{a} >= @var{b}; 0
otherwise           
   @item    @code{==}          @tab a == b  @tab 1 if @var{a} equal to
@var{b}; 0 otherwise 
   @item    @code{!=}             @tab a != b  @tab 1 if @var{a} not equal to
@var{b}; 0 otherwise 

   @item    @code{&&}             @tab a && b  @tab Logical AND of @var{a} and
@var{b} (yields 0 or 1)  
   @item    @code{||}             @tab a || b  @tab Logical OR of @var{a} and
@var{b} (yields 0 or 1)         
   @item    @code{!}              @tab !a      @tab Logical NOT of @var{a}
(yields 0 or 1)        

   @item ?: @tab a ? e1 : e2 @tab Expression @var{e1} if @var{a} is
nonzero; Expression @var{e2} if @var{a} is zero


@end multitable
@noindent
Operators fall into the following categories:

@itemize @bullet
    @item Unary operators, which take a single operand.
    @item Postfix operators, which follow a single operand.
    @item Unary prefix operators, which precede a single operand.
    @item Binary operators, which take two operands and perform a
variety of arithmetic and logical operations.
    @item The conditional operator (a ternary operator), which takes
three operands and resolves to the value of either the second or third
expression, depending on the result of the evaluation of the first
expression.
@end itemize

Operator precedence determines the grouping of terms in an
expression. This affects how an expression is evaluated. Certain
operators have higher precedence than others; for example, the
multiplication operator has higher precedence than the addition
operator:

@example
x = 8 + 4 * 2;        /* x is assigned 16, not 24 */ 
@end example

The previous statement is equivalent to the following:

@example
x = 8 + ( 4 * 2 ); 
@end example

Using parenthesis in an expression alters the default precedence. For
example:

@example
x = (8 + 4) * 2;  /*  (8 + 4) is evaluated first    */ 
@end example

In an unparenthesized expression, operators of higher precedence are
evaluated before those of lower precedence. Consider the following
expression:

@example
A + B * C 
@end example

The identifiers B and C are multiplied first because the multiplication
operator (*) has higher precedence than the addition operator (+).

A useful construction is the ternary @samp{? :} operator. A good example
of its use may be      
@example
        step = t < t0 ? 0 : 1;
@end example
This expression states that @code{step} has the value 0 if @code{t <
t0}, else the value 1.

@page

@node Mathematical Functions in the Modeling Language,  , Expressions and Operators in the Modeling Language, Modeling Language
@section Mathematical Functions in the Modeling Language

@multitable @columnfractions 0.5  0.5
@anchor{Table 2}
   @headitem @strong{Function} @tab @strong{Description/Meaning}

    @item @code{asin}      @tab Arc sine of x 
    @item @code{atan}      @tab Arc tangent of x
    @item @code{atan2}     @tab Arc tangent of two variables
    @item @code{acos}      @tab Arc cosine of x
    @item @code{abs}       @tab Absolute value of an integer x
    @item @code{ceil}      @tab Smallest integral value not less than x
    @item @code{cos}       @tab Cosine of x
    @item @code{cosh}      @tab Hyperbolic cosine of x
    @item @code{cube}      @tab x cubed
    @item @code{exp}       @tab e raised to the power of x
    @item @code{floor}     @tab Largest integral value not greater than x
    @item @code{fabs}      @tab Absolute value of a floating-point number x
    @item @code{heaviside} @tab 1 for x > 0, 0 otherwise
    @item @code{log}       @tab Natural logarithm of x
    @item @code{log10}     @tab Base-10 logarithm of x
    @item @code{pow}       @tab x to the yth power
    @item @code{sin}       @tab Sine of x
    @item @code{sinh}      @tab Hyperbolic sine of x
    @item @code{sqrt}      @tab Square root of x
    @item @code{sqr}       @tab x squared
    @item @code{tanh}      @tab Hyperbolic tangent of x
    @item @code{tan}       @tab Tangent of x

@end multitable
@noindent



@node Emacs Editing Mode,  , Modeling Language, Top
@chapter Emacs Editing Mode

@menu
* Description::                 
@end menu

@node Description,  , Emacs Editing Mode, Emacs Editing Mode
@section Description

Dynamo has an Emacs major mode for composing Dynamo system description files
and compiling them to object code using the Dynamo translator and the Dynamo
system make file.

This mode offers several features to aid composing of Dynamo system
description files, including syntax colorization using font-lock,
a syntax table appropriate to Dynamo, and key bindings.

Once the system description file is composed, there is a function for
compiling the script. The interaction with the Dynamo translator and the C
compiler is within a @dfn{comint} buffer.

The following key strokes are recognized:

@table @kbd
@item  @key{Ctrl}-c m f   
        inserts a Dynamo function declaration
@item  @key{Ctrl}-c m t   
        inserts a Dynamo table function declaration
@item  @key{Ctrl}-c m p   
        inserts a Dynamo parameter declaration
@item  @key{Ctrl}-c m s   
        inserts a Dynamo state declaration
@item  @key{Ctrl}-c m c   
        compiles the Dynamo system description in the
current buffer
@end table    

Entering Dynamo mode runs the hook @var{c-mode-common-hook}, then
@var{mrci-mode-hook}. The customizable variable
@var{mrci-compile-command} contains the command to compile Dynamo system
description files.  Each buffer in Dynamo mode has its own local copy of
@var{mrci-compile-command}.




@shortcontents
@contents

@bye



