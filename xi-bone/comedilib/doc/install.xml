<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
	"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!ENTITY % comedilib_entities SYSTEM "comedilib.ent">
%comedilib_entities;
]>

<section id="install">
	<title>
		Configuration
	</title>

	<para>
		This section assumes that you have successfully compiled and installed
		the &comedi; software, that your hardware device is in your computer,
		and that you know the relevant details about it, i.e., what kind of
		card it is, any jumper settings related to input ranges, the
		I/O base address and IRQ for old non-plug-n-play boards, etc.
	</para>

	<section id="cardconfiguration">
		<title>
			Configuration
		</title>
		<para>
			Before being able to get information from a DAQ card, you first have
			to tell the &comedi; core kernel module which device you have, which
			driver you want to attach to the card, and which run-time options
			you want to give to the driver. This configuration is done by running
			the <command>comedi_config</command> command (as root).
			Here is an example of how to use the command (perhaps you should read
			its <command>man</command> page now):
<screen>
comedi_config /dev/comedi0 labpc-1200 0x260,3
</screen>
			This command says that the <quote>file</quote>
			<filename>/dev/comedi0</filename> can be used to access the &comedi;
			device that uses the <parameter>labpc-1200</parameter> board, and that
			you give it two run-time parameters (<literal>0x260</literal> and
			<literal>3</literal>). More parameters are possible, and their
			meaning is driver dependant.
		</para>

		<para>
			This tutorial goes through the process of configuring &comedi;
			for two devices, a
			<literal>National Instruments AT-MIO-16E-10</literal>, and a
			<literal>Data Translation DT2821-F-8DI</literal>.
		</para>

		<para>
			The NI board is plug-and-play.  The current ni_atmio driver
			has kernel-level ISAPNP support, which is used by default
			if you do not specify a base address.  So you could simply
			run comedi_config as
<screen>
comedi_config /dev/comedi0 ni_atmio
</screen>
		For the preceding comedi_config command to succeed, the
		ni_atmio kernel module must
		be loaded first.    For plug-n-play boards on
		modern kernels, the appropriate comedi kernel modules should get loaded
		automatically when your computer is booted.
		The <command>modprobe</command> command can
		be used to manually load/unload kernel modules, and <command>lsmod</command>
		will list all the currently loaded modules.
		</para>
		<para>
			For the <literal>Data Translation</literal> board, you need to know
			how the board's jumpers are configured in order to specify the correct
			comedi_config parameters.  These parameters for the board are given in the
			<link endterm="lowleveldrivers">kernel drivers</link> section about the dt282x
			driver.
			The card discussed here is a <literal>DT2821-f-8di</literal>.  The
			entry for the dt282x driver tells you that the
			comedi_config parameters give the driver the I/O base,
			IRQ, DMA 1, DMA 2, and
			in addition the states of the
			differential/single-ended and unipolar/bipolar jumpers:
			<itemizedlist>
				<title>dt282x configuration options:</title>
				<listitem><para>[0] - I/O port base address</para></listitem>
				<listitem><para>[1] - IRQ</para></listitem>
				<listitem><para>[2] - DMA 1</para></listitem>
				<listitem><para>[3] - DMA 2</para></listitem>
				<listitem><para>[4] - AI jumpered for 0=single ended, 1=differential</para></listitem>
				<listitem><para>[5] - AI jumpered for 0=straight binary, 1=2's complement</para></listitem>
				<listitem><para>[6] - AO 0 jumpered for 0=straight binary, 1=2's complement</para></listitem>
				<listitem><para>[7] - AO 1 jumpered for 0=straight binary, 1=2's complement</para></listitem>
				<listitem><para>[8] - AI jumpered for 0=[-10,10]V, 1=[0,10], 2=[-5,5], 3=[0,5]</para></listitem>
				<listitem><para>[9] - AO 0 jumpered for 0=[-10,10]V, 1=[0,10], 2=[-5,5], 3=[0,5],
					4=[-2.5,2.5]</para></listitem>
				<listitem><para>[10]- A0 1 jumpered for 0=[-10,10]V, 1=[0,10], 2=[-5,5], 3=[0,5],
					4=[-2.5,2.5]</para></listitem>
			</itemizedlist>
		</para>

		<para>
			So, the appropriate options list might be:
<screen>
0x200,4,0,0,1,1,1,1,0,2,2
</screen>
			and the full configuration command is:
<screen>
comedi_config /dev/comedi1 dt2821-f-8di 0x200,4,0,0,1,1,1,1,0,2,2
</screen>
			Setting the DMA channels to 0 disables the use of DMA.
		</para>

		<para>
			So now you have your boards configured correctly.
			Since data acquisition boards are not typically well-engineered,
			&comedi; sometimes can't figure out if an old non-plug-n-play
			board is actually in the computer and at the base address you specified.
			If it can't, it assumes you are right.  Both of these boards
			are well-made, so &comedi; will give an error message if it
			can't find them.  The &comedi; kernel module, since it is a part
			of the kernel, prints messages to the kernel logs, which you
			can access through the command <command>dmesg</command> or the file
			<filename>/var/log/messages</filename>.
			Here is a configuration failure (from <command>dmesg</command>):
		</para>

<screen>
comedi0: ni_atmio: 0x0200 can't find board
</screen>

		<para>
			When it does work, you get:
		</para>

<screen>
comedi0: ni_atmio: 0x0260 at-mio-16e-10 ( irq = 3 )
</screen>

		<para>
			Note that it also correctly identified the board.
		</para>

	</section>

	<section id="gettinginformation">
		<title>
			Getting information about a card
		</title>

		<para>
			So now that you have &comedi; talking to the hardware, try to
			talk to &comedi;.  Here's some information from comedi's proc
			file, which indicates what drivers are loaded and which
			boards are configured:
		</para>

<screen>
cat /proc/comedi
</screen>

		<para>
			For example, on a computer with an NI pxi-6281 configured on
			<filename>/dev/comedi0</filename> and
			a pxi-6602 configured on <filename>/dev/comedi1</filename> you might
			see something like:
		</para>

<screen>
comedi version 0.7.74
format string: "%2d: %-20s %-20s %4d",i,driver_name,board_name,n_subdevices
 0: ni_pcimio            pxi-6281               14
 1: ni_660x              PXI-6602               10
ni_pcimio:
 ni_pcimio
8255:
 8255
ni_660x:
 ni_660x
</screen>

		<para>
			This documentation feature is not well-developed yet.  Basically, it
			currently returns the driver name, the device name, and the number of
			subdevices.  Following those lines are a list of the comedi kernel
			driver modules currently loaded, each followed by a list of the board
			names it recognizes (names that can be used with comedi_config).
		</para>

		<para>
			In the <filename role="directory">demo/</filename> subdirectory of
			Comedilib, there is a
			command called <command>board_info</command>, which provides information
			about each subdevice on the board.  Its output can be rather long,
			if the board has several subdevices.
			Here's part of the output of the <literal>National Instruments</literal>
			board (which is on <filename>/dev/comedi0</filename>), as a result of
			the command <command>demo/board_info /dev/comedi0</command> (run from the
			top-level directory of comedilib):
		</para>

<screen>
overall info:
	version code: 0x00074a
	driver name: ni_atmio
	board name: at-mio-16e-10
	number of subdevices: 7
subdevice 0:
	type: 1 (analog input)
	number of channels: 16
	max data value: 4095
...
</screen>

		<para>
			The overall info gives information about the device; basically
			the same information as <filename>/proc/comedi</filename>.
		</para>

		<para>
			This board has seven subdevices.  Devices are separated into
			subdevices that each have a distinct purpose; e.g., analog
			input, analog output, digital input/output.  This board also
			has an EEPROM and calibration DACs that are also subdevices.
		</para>

		<para>
			&comedi; has more information about the device than what is displayed
			above, but <command>demo/board_info</command> doesn't currently display
			this.
		</para>

	</section>

</section>
