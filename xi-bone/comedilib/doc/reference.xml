<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
	"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!ENTITY % comedilib_entities SYSTEM "comedilib.ent">
%comedilib_entities;
]>

<section id="comedireference" xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>
		&comedi; reference
	</title>

<section id="comedi-comedilib-h">
<title>
Headerfiles: <filename>comedi.h</filename> and <filename>comedilib.h</filename>
</title>

<para>
All <link linkend="writingprograms">application programs</link> must
include the header file <filename>comedilib.h</filename>. (This file
itself includes <filename>comedi.h</filename>.) They contain the full
interface of &comedi;: defines, function prototypes, data structures.
</para>
<para>
The following Sections give more details.
</para>

</section>

<section id="constantsmacros">
<title>
Constants and macros
</title>

<section id="ref-macro-CR-PACK">
<title>
CR_PACK
</title>

<para>
CR_PACK is used to initialize the elements of the
<parameter>chanlist</parameter> array in the
<link linkend="ref-type-comedi-cmd">comedi_cmd</link> data structure,
and the <parameter>chanspec</parameter> member of the
<link linkend="ref-type-comedi-insn">comedi_insn</link> structure.
</para>
<programlisting>
<![CDATA[
#define CR_PACK(chan,rng,aref)      ( (((aref)&0x3)<<24) | (((rng)&0xff)<<16) | (chan) )
]]>
</programlisting>
<para>
The <parameter>chan</parameter> argument is the channel you wish to
use, with the channel numbering starting at zero.
</para>

<para>
The range <parameter>rng</parameter> is an index, starting at zero,
whose meaning is device dependent.  The
<link linkend="func-ref-comedi-get-n-ranges">comedi_get_n_ranges()</link>
and
<link linkend="func-ref-comedi-get-range">comedi_get_range()</link>
functions are useful in discovering information about the available
ranges.
</para>

<para>
The <parameter>aref</parameter> argument indicates what reference you
want the device to use.  It can be any of the following:
<variablelist>
  <varlistentry>
    <term>AREF_GROUND <anchor id="aref-ground"/> </term>
    <listitem>
      <para>
        is for inputs/outputs referenced to ground.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>AREF_COMMON <anchor id="aref-common"/> </term>
    <listitem>
      <para>
	 is for a <quote>common</quote> reference (the low inputs of all the
channels are tied together, but are isolated from ground).
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>AREF_DIFF <anchor id="aref-diff"/> </term>
    <listitem>
      <para>
    is for differential inputs/outputs.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>AREF_OTHER <anchor id="aref-other"/> </term>
    <listitem>
      <para>
    is for any reference that does not fit into the above categories.
      </para>
    </listitem>
  </varlistentry>
</variablelist>
Particular drivers may or may not use the AREF flags.  If they are
not supported, they are silently ignored.
</para>
</section>

<section id="ref-macro-RANGE-LENGTH">
<title>
RANGE_LENGTH (deprecated)
</title>

<para>
Rangetype values are library-internal tokens that represent an
array of range information structures.  These numbers are primarily
used for communication between the kernel and library.
</para>

<para>
The RANGE_LENGTH() macro returns the length of the array that is
specified by the rangetype token.
</para>

<para>
The RANGE_LENGTH() macro is deprecated, and should not be used in
new applications.  It is scheduled to be removed from the header
file at version 1.0.  Binary compatibility may be broken for version
1.1.
</para>
</section>

<section id="ref-enum-comedi-conversion-direction">
<title>
enum comedi_conversion_direction
</title>

<para>
<programlisting>
enum comedi_conversion_direction
{
	COMEDI_TO_PHYSICAL,
	COMEDI_FROM_PHYSICAL
};
</programlisting>
</para>
<para>
A comedi_conversion_direction is used to choose between converting data
from Comedi's integer sample values to a physical value (COMEDI_TO_PHYSICAL),
and converting from a physical value to Comedi's integer sample values (COMEDI_FROM_PHYSICAL).
</para>

</section>

<section id="ref-enum-comedi-io-direction">
<title>
enum comedi_io_direction
</title>

<para>
<programlisting>
enum comedi_io_direction
{
	COMEDI_INPUT,
	COMEDI_OUTPUT
};
</programlisting>
</para>
<para>
A comedi_io_direction is used to select between input or output.  For example,
<link linkend="func-ref-comedi-dio-config"><function>comedi_dio_config</function></link>
uses the COMEDI_INPUT and COMEDI_OUTPUT values to specify
whether a configurable digital i/o channel should be configured as an input
or output.
</para>

</section>

<section id="ref-enum-comedi-subdevice-type">
<title>
enum comedi_subdevice_type
</title>

<para>
<programlisting>
enum comedi_subdevice_type {
	COMEDI_SUBD_UNUSED,	/* subdevice is unused by driver */
	COMEDI_SUBD_AI,	/* analog input */
	COMEDI_SUBD_AO,	/* analog output */
	COMEDI_SUBD_DI,	/* digital input */
	COMEDI_SUBD_DO,	/* digital output */
	COMEDI_SUBD_DIO,	/* digital input/output */
	COMEDI_SUBD_COUNTER,	/* counter */
	COMEDI_SUBD_TIMER,	/* timer */
	COMEDI_SUBD_MEMORY,	/* memory, EEPROM, DPRAM */
	COMEDI_SUBD_CALIB,	/* calibration DACs and pots*/
	COMEDI_SUBD_PROC,	/* processor, DSP */
	COMEDI_SUBD_SERIAL,	/* serial IO */
	COMEDI_SUBD_PWM	/* pulse width modulation */
};
</programlisting>
</para>
<para>
The comedi_subdevice_type enumeration specifies the possible values for
a subdevice type.  These values are used by the functions
<link linkend="func-ref-comedi-get-subdevice-type"><function>comedi_get_subdevice_type</function></link> and
<link linkend="func-ref-comedi-find-subdevice-by-type"><function>comedi_find_subdevice_by_type</function></link>.
</para>

</section>

</section>

<section id="datatypesstructures">
<title>
Data types and structures
</title>
<para>
This Section explains the data structures that users of the &comedi;
API are confronted with:
<programlisting>
typedef struct subdevice_struct       <link linkend="ref-type-subdevice-struct">subdevice_struct</link>:
typedef struct comedi_devinfo_struct  <link linkend="ref-type-comedi-devinfo">comedi_devinfo</link>;
typedef struct comedi_t_struct        <link linkend="ref-type-comedi-t">comedi_t</link>;
typedef struct sampl_t_struct         <link linkend="ref-type-sampl-t">sampl_t</link>;
typedef struct lsampl_t_struct        <link linkend="ref-type-lsampl-t">lsampl_t</link>;
typedef struct comedi_sv_t_struct     <link linkend="ref-type-comedi-sv-t">comedi_sv_t</link>;
typedef struct comedi_cmd_struct      <link linkend="ref-type-comedi-cmd">comedi_cmd</link>;
typedef struct comedi_insn_struct     <link linkend="ref-type-comedi-insn">comedi_insn</link>;
typedef struct comedi_range_struct    <link linkend="ref-type-comedi-range">comedi_range</link>;
typedef struct comedi_krange_struct   <link linkend="ref-type-comedi-krange">comedi_krange</link>;
typedef struct comedi_insnlist_struct <link linkend="ref-type-comedi-insnlist">comedi_insnlist</link>;
</programlisting>
The data structures used in the implementation of the &comedi; drivers
are treated <link linkend="driverdatastructures">elsewhere</link>.
</para>

<section id="ref-type-subdevice-struct">
<title>
subdevice_struct
</title>

<para>
The data type <parameter>subdevice_struct</parameter> is used to store
information about a subdevice. This structure is usually filled in
automatically when the driver is loaded (<quote>attached</quote>), so
programmers need not access this data structure directly.
<programlisting>
typedef struct subdevice_struct <anchor id="ref-type-subdevice"/>subdevice;

struct subdevice_struct{
  unsigned int type;
  unsigned int n_chan;
  unsigned int subd_flags;
  unsigned int timer_type;
  unsigned int len_chanlist;
  <link linkend="ref-type-lsampl-t">lsampl_t</link> maxdata;
  unsigned int flags;
  unsigned int range_type;

  <link linkend="ref-type-lsampl-t">lsampl_t</link> *maxdata_list;
  unsigned int *range_type_list;
  unsigned int *flags_list;

  <link linkend="ref-type-comedi-range">comedi_range</link> *rangeinfo;
  <link linkend="ref-type-comedi-range">ccomedi_range</link> **rangeinfo_list;

  unsigned int has_cmd;
  unsigned int has_insn_bits;

  int cmd_mask_errno;
  <link linkend="ref-type-comedi-cmd">comedi_cmd</link> *cmd_mask;
  int cmd_timed_errno;
  <link linkend="ref-type-comedi-cmd">comedi_cmd</link> *cmd_timed;
};
</programlisting>

</para>

</section>


<section id="ref-type-comedi-devinfo">
<title>
comedi_devinfo
</title>

<para>
The data type <parameter>comedi_devinfo</parameter> is used to store
information about a device. This structure is usually filled in
automatically when the driver is loaded (<quote>attached</quote>), so
programmers need not access this data structure directly.
<programlisting>
typedef struct comedi_devinfo_struct comedi_devinfo;

struct comedi_devinfo_struct{
  unsigned int version_code;    // version number of the Comedi code
  unsigned int n_subdevs;       // number of subdevices on this device
  char         driver_name[COMEDI_NAMELEN];
  char         board_name[COMEDI_NAMELEN];
  int          read_subdevice;  // index of subdevice whose buffer is read by read(), etc. on file descriptor from comedi_fileno() (negative means none)
  int          write_subdevice; // index of subdevice whose buffer is written by write(), etc. on file descriptor from comedi_fileno() (negatove means none).
  int          unused[30];
};

</programlisting>
</para>

</section>


<section id="ref-type-comedi-t">
<title>
comedi_t
</title>

<para>
The data type <parameter>comedi_t</parameter> is used to represent an
open &comedi; device:
<programlisting>
typedef struct comedi_t_struct comedi_t;

struct comedi_t_struct{
  int magic;        // driver-specific magic number, for identification
  int fd;           // file descriptor, for open() and close()
  int n_subdevices; // number of subdevices on this device
  <link linkend="ref-type-comedi-devinfo">comedi_devinfo</link> devinfo;
  <link linkend="ref-type-subdevice">subdevice</link> *subdevices; // pointer to subdevice list
                         // filled in automatically at load time
  unsigned int has_insnlist_ioctl; // can process <link linkend="anchor.instruction.list">instruction lists</link>
  unsigned int has_insn_ioctl;     // can process <link linkend="instructions">instructions</link>
};
</programlisting>
A valid <parameter>comedi_t</parameter> pointer is returned by a
successful call to
<link linkend="func-ref-comedi-open">comedi_open()</link>,
and should be used for subsequent access to the device.
It is a transparent type, and pointers to type
<parameter>comedi_t</parameter>
should not be dereferenced by the application.
</para>

</section>


<section id="ref-type-sampl-t">
<title>
sampl_t
</title>

<programlisting>
typedef unsigned short sampl_t;
</programlisting>

<para>
The data type <link linkend="ref-type-sampl-t">sampl_t</link> is one
of the generic
types used to represent data values in Comedilib.  It is used in a few
places where a data type
shorter than <link linkend="ref-type-lsampl-t">lsampl_t</link> is
useful.  On most architectures,
<link linkend="ref-type-sampl-t">sampl_t</link>
is defined to be <parameter>uint16</parameter>.
</para>

<para>
Most drivers represent data transferred by <function>read()</function> and
<function>write()</function> using
<link linkend="ref-type-sampl-t">sampl_t</link>.
Applications should check the subdevice flag
SDF_LSAMPL to determine if the subdevice uses
<link linkend="ref-type-sampl-t">sampl_t</link> or
<link linkend="ref-type-lsampl-t">lsampl_t</link>.
</para>

</section>

<section id="ref-type-lsampl-t">
<title>
lsampl_t
</title>

<programlisting>
typedef unsigned int lsampl_t;
</programlisting>

<para>
The data type
<link linkend="ref-type-lsampl-t">lsampl_t</link>
is the data type typically used to represent
data values in libcomedi.  On most architectures,
<link linkend="ref-type-lsampl-t">lsampl_t</link>
is defined to be uint32.
</para>
</section>


<section id="ref-type-comedi-trig">
<title>
comedi_trig (deprecated)
</title>

<programlisting>
typedef struct comedi_trig_struct comedi_trig;

struct comedi_trig_struct{
  unsigned int subdev;   /* subdevice */
  unsigned int mode;  /* mode */
  unsigned int flags;
  unsigned int n_chan;  /* number of channels */
  unsigned int *chanlist;   /* channel/range list */
  <link linkend="ref-type-sampl-t">sampl_t</link> *data;  /* data list, size depends on subd flags */
  unsigned int n;  /* number of scans */
  unsigned int trigsrc;
  unsigned int trigvar;
  unsigned int trigvar1;
  unsigned int data_len;
  unsigned int unused[3];
};
</programlisting>

<para>
The comedi_trig structure is a control structure used by the
COMEDI_TRIG ioctl, an older method of communicating
instructions to the driver and hardware.  Use of comedi_trig is
deprecated, and should not be used in new applications.
</para>
</section>

<section id="ref-type-comedi-sv-t">
<title>
comedi_sv_t (deprecated)
</title>

<programlisting>
typedef struct comedi_sv_struct comedi_sv_t;

struct comedi_sv_struct{
  comedi_t *dev;
  unsigned int subdevice;
  unsigned int chan;

  /* range policy */
  int range;
  int aref;

  /* number of measurements to average (for ai) */
  int n;

  <link linkend="ref-type-lsampl-t">lsampl_t</link> maxdata;
};
</programlisting>

<para>
The comedi_sv_t structure is used by the comedi_sv_*()
functions to provide a simple method of accurately measuring
slowly varying inputs.  See the relevant section for more
details.
</para>
</section>

<section id="ref-type-comedi-cmd">
<title>
comedi_cmd
</title>

<programlisting>
typedef struct comedi_cmd_struct comedi_cmd;

struct comedi_cmd_struct{
  unsigned int subdev;
  unsigned int flags;

  unsigned int start_src;
  unsigned int start_arg;

  unsigned int scan_begin_src;
  unsigned int scan_begin_arg;

  unsigned int convert_src;
  unsigned int convert_arg;

  unsigned int scan_end_src;
  unsigned int scan_end_arg;

  unsigned int stop_src;
  unsigned int stop_arg;

  unsigned int *chanlist;
  unsigned int chanlist_len;

  <link linkend="ref-type-sampl-t">sampl_t</link> *data;
  unsigned int data_len;
};
</programlisting>

<para>
More information on using commands can be found in the
command section.
</para>
</section>

<section id="ref-type-comedi-insn">
<title>
comedi_insn
</title>

<programlisting>
typedef struct comedi_insn_struct comedi_insn;

struct comedi_insn_struct{
  unsigned int insn;
  unsigned int n;
  <link linkend="ref-type-lsampl-t">lsampl_t</link>*data;
  unsigned int subdev;
  unsigned int chanspec;
  unsigned int unused[3];
};
</programlisting>

<para>
Comedi instructions are described by the comedi_insn structure.
Applications send instructions to the driver in order to perform
control and measurement operations that are done immediately or
synchronously, i.e., the operations complete before program control
returns to the application.  In particular, instructions cannot
describe acquisition that involves timers or external events.
</para>

<para>
The field insn determines the type of instruction that is sent
to the driver. Valid instruction types are:
</para>

<variablelist>
  <varlistentry>
    <term>
<anchor id="insn-read"/>
INSN_READ
    </term>
    <listitem>
      <para>
read values from an input channel
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
<anchor id="insn-write"/>
INSN_WRITE
    </term>
    <listitem>
      <para>
write values to an output channel
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
<anchor id="insn-bits"/>
INSN_BITS
    </term>
    <listitem>
      <para>
read/write values on multiple digital I/O channels
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
<anchor id="insn-config"/>
INSN_CONFIG
    </term>
    <listitem>
      <para>
configure a subdevice
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
<anchor id="insn-gtod"/>
INSN_GTOD
    </term>
    <listitem>
      <para>
read a timestamp, identical to gettimeofday() except the seconds
and microseconds values are of type <link linkend="ref-type-lsampl-t">lsampl_t</link>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
<anchor id="insn-wait"/>
INSN_WAIT
    </term>
    <listitem>
      <para>
wait a specified number of nanoseconds
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
The number of samples to read or write, or the size of the configuration
structure is specified by the field n, and the buffer for those
samples by data.  The field subdev is the subdevice index
that the instruction is sent to.  The field chanspec specifies
the channel, range, and analog reference (if applicable).
</para>

<para>
Instructions can be sent to drivers using comedi_do_insn().
Multiple instructions can be sent to drivers in the same system
call using comedi_do_insnlist().
</para>
</section>

<section id="ref-type-comedi-range">
<title>
comedi_range
</title>

<programlisting>
typedef struct comedi_range_struct comedi_range;

struct comedi_range_struct{
  double min;
  double max;
  unsigned int unit;
}comedi_range;
</programlisting>

<para>
The comedi_range structure conveys part of the information
necessary to translate sample values to physical units, in particular,
the endpoints of the range and the physical unit type.  The
physical unit type is specified by the field unit, which may
take the values UNIT_volt for volts, UNIT_mA for milliamps,
or UNIT_none for unitless.  The endpoints are specified by
the fields min and max.
</para>
</section>

<section id="ref-type-comedi-krange">
<title>
comedi_krange
</title>

<programlisting>
typedef struct comedi_krange_struct comedi_krange;

struct comedi_krange_struct{
  int min;
  int max;
  unsigned int flags;
};
</programlisting>

<para>
The comedi_krange structure is used to transfer range information
between the driver and Comedilib, and should not normally be used
by applications.  The structure conveys the same information as the
comedi_range structure, except the fields min and max
are integers, multiplied by a factor of 1000000 compared to the
counterparts in comedi_range.
</para>

<para>
In addition, kcomedilib uses the comedi_krange structure in place
of the comedi_range structure.
</para>

</section>

<section id="ref-type-comedi-insnlist">
<title>
comedi_insnlist
</title>

<programlisting>
typedef struct comedi_insnlist_struct comedi_insnlist;

struct comedi_insnlist_struct{
  unsigned int n_insns;
  comedi_insn *insns;
};
</programlisting>

<para>
An instruction list (insnlist) structure is used to communicate
a list of instructions.
</para>

</section>

</section>

	<section id="functionreference">
		<title>Functions</title>
		<section>
			<title>Core</title>
			<xi:include href="funcref.xml"/>
		</section>
		<section>
			<title>Asyncronous commands</title>
			<xi:include href="command_funcref.xml"/>
		</section>
		<section>
			<title>Calibration</title>
			<xi:include href="calibration_funcref.xml"/>
		</section>
		<section>
			<title>Digital I/O</title>
			<xi:include href="dio_funcref.xml"/>
		</section>
		<section>
			<title>Error reporting</title>
			<xi:include href="error_funcref.xml"/>
		</section>
		<section>
			<title>Extensions</title>
			<xi:include href="extensions_funcref.xml"/>
		</section>
		<section>
			<title>Deprecated</title>
			<xi:include href="deprecated_funcref.xml"/>
		</section>
	</section>
	<xi:include href="drivers.xml"/>
</section>
