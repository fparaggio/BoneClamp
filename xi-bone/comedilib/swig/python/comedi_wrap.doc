comedi_wrap.c

[ Python Module : comedi ]


COMEDI_MAJOR = 98
        [ Constant: int  ]
        maximum number of minor devices. This can be increased, although
        kernel structures are currently statically allocated, thus you
        don't want this to be much more than you actually use. 

COMEDI_NDEVICES = 4
        [ Constant: int  ]
        number of config options in the config structure 

COMEDI_NDEVCONFOPTS = 32
        [ Constant: int  ]
        max length of device and driver names 

COMEDI_NAMELEN = 20
        [ Constant: int  ]

CR_FLAGS_MASK = 0xfc000000
        [ Constant: int  ]

CR_ALT_FILTER = (1<<26)
        [ Constant: int  ]

CR_DITHER = ((1<<26))
        [ Constant: int  ]

CR_DEGLITCH = ((1<<26))
        [ Constant: int  ]

CR_ALT_SOURCE = (1<<27)
        [ Constant: int  ]

CR_EDGE = (1<<30)
        [ Constant: int  ]

CR_INVERT = (1<<31)
        [ Constant: int  ]
        analog ref = analog ground 

AREF_GROUND = 0x00
        [ Constant: int  ]
        analog ref = analog common 

AREF_COMMON = 0x01
        [ Constant: int  ]
        analog ref = differential 

AREF_DIFF = 0x02
        [ Constant: int  ]
        analog ref = other (undefined) 

AREF_OTHER = 0x03
        [ Constant: int  ]
        counters -- these are arbitrary values 

GPCT_RESET = 0x0001
        [ Constant: int  ]

GPCT_SET_SOURCE = 0x0002
        [ Constant: int  ]

GPCT_SET_GATE = 0x0004
        [ Constant: int  ]

GPCT_SET_DIRECTION = 0x0008
        [ Constant: int  ]

GPCT_SET_OPERATION = 0x0010
        [ Constant: int  ]

GPCT_ARM = 0x0020
        [ Constant: int  ]

GPCT_DISARM = 0x0040
        [ Constant: int  ]

GPCT_GET_INT_CLK_FRQ = 0x0080
        [ Constant: int  ]

GPCT_INT_CLOCK = 0x0001
        [ Constant: int  ]

GPCT_EXT_PIN = 0x0002
        [ Constant: int  ]

GPCT_NO_GATE = 0x0004
        [ Constant: int  ]

GPCT_UP = 0x0008
        [ Constant: int  ]

GPCT_DOWN = 0x0010
        [ Constant: int  ]

GPCT_HWUD = 0x0020
        [ Constant: int  ]

GPCT_SIMPLE_EVENT = 0x0040
        [ Constant: int  ]

GPCT_SINGLE_PERIOD = 0x0080
        [ Constant: int  ]

GPCT_SINGLE_PW = 0x0100
        [ Constant: int  ]

GPCT_CONT_PULSE_OUT = 0x0200
        [ Constant: int  ]

GPCT_SINGLE_PULSE_OUT = 0x0400
        [ Constant: int  ]

INSN_MASK_WRITE = 0x8000000
        [ Constant: int  ]

INSN_MASK_READ = 0x4000000
        [ Constant: int  ]

INSN_MASK_SPECIAL = 0x2000000
        [ Constant: int  ]

INSN_READ = (0|(0x4000000))
        [ Constant: int  ]

INSN_WRITE = (1|(0x8000000))
        [ Constant: int  ]

INSN_BITS = (2|(0x4000000)|(0x8000000))
        [ Constant: int  ]

INSN_CONFIG = (3|(0x4000000)|(0x8000000))
        [ Constant: int  ]

INSN_GTOD = (4|(0x4000000)|(0x2000000))
        [ Constant: int  ]

INSN_WAIT = (5|(0x8000000)|(0x2000000))
        [ Constant: int  ]

INSN_INTTRIG = (6|(0x8000000)|(0x2000000))
        [ Constant: int  ]
        trigger flags These flags are used in comedi_trig structures 

TRIG_BOGUS = 0x0001
        [ Constant: int  ]
        enable dithering 

TRIG_DITHER = 0x0002
        [ Constant: int  ]
        enable deglitching 

TRIG_DEGLITCH = 0x0004
        [ Constant: int  ]
        perform configuration, not triggering 

TRIG_CONFIG = 0x0010
        [ Constant: int  ]
        #define TRIG_WAKE_EOS 0x0020 /* wake up on end-of-scan events */
        #define TRIG_WRITE 0x0040 /* write to bidirectional devices */

CMDF_PRIORITY = 0x00000008
        [ Constant: int  ]
        compatibility definition 

TRIG_RT = (0x00000008)
        [ Constant: int  ]
        legacy definition for COMEDI_EV_SCAN_END 

TRIG_WAKE_EOS = 0x00000020
        [ Constant: int  ]

CMDF_WRITE = 0x00000040
        [ Constant: int  ]
        compatibility definition 

TRIG_WRITE = (0x00000040)
        [ Constant: int  ]

CMDF_RAWDATA = 0x00000080
        [ Constant: int  ]

COMEDI_EV_START = 0x00040000
        [ Constant: int  ]

COMEDI_EV_SCAN_BEGIN = 0x00080000
        [ Constant: int  ]

COMEDI_EV_CONVERT = 0x00100000
        [ Constant: int  ]

COMEDI_EV_SCAN_END = 0x00200000
        [ Constant: int  ]

COMEDI_EV_STOP = 0x00400000
        [ Constant: int  ]

TRIG_ROUND_MASK = 0x00030000
        [ Constant: int  ]

TRIG_ROUND_NEAREST = 0x00000000
        [ Constant: int  ]

TRIG_ROUND_DOWN = 0x00010000
        [ Constant: int  ]

TRIG_ROUND_UP = 0x00020000
        [ Constant: int  ]

TRIG_ROUND_UP_NEXT = 0x00030000
        [ Constant: int  ]
        trigger sources 

TRIG_ANY = 0xffffffff
        [ Constant: int  ]

TRIG_INVALID = 0x00000000
        [ Constant: int  ]
        never trigger 

TRIG_NONE = 0x00000001
        [ Constant: int  ]
        trigger now + N ns 

TRIG_NOW = 0x00000002
        [ Constant: int  ]
        trigger on next lower level trig 

TRIG_FOLLOW = 0x00000004
        [ Constant: int  ]
        trigger at time N ns 

TRIG_TIME = 0x00000008
        [ Constant: int  ]
        trigger at rate N ns 

TRIG_TIMER = 0x00000010
        [ Constant: int  ]
        trigger when count reaches N 

TRIG_COUNT = 0x00000020
        [ Constant: int  ]
        trigger on external signal N 

TRIG_EXT = 0x00000040
        [ Constant: int  ]
        trigger on comedi-internal signal N 

TRIG_INT = 0x00000080
        [ Constant: int  ]
        driver defined 

TRIG_OTHER = 0x00000100
        [ Constant: int  ]
        subdevice flags 

SDF_BUSY = 0x0001
        [ Constant: int  ]
        device is busy with your job 

SDF_BUSY_OWNER = 0x0002
        [ Constant: int  ]
        subdevice is locked 

SDF_LOCKED = 0x0004
        [ Constant: int  ]
        you own lock 

SDF_LOCK_OWNER = 0x0008
        [ Constant: int  ]
        maxdata depends on channel 

SDF_MAXDATA = 0x0010
        [ Constant: int  ]
        flags depend on channel 

SDF_FLAGS = 0x0020
        [ Constant: int  ]
        range type depends on channel 

SDF_RANGETYPE = 0x0040
        [ Constant: int  ]
        can do mode 0 

SDF_MODE0 = 0x0080
        [ Constant: int  ]
        can do mode 1 

SDF_MODE1 = 0x0100
        [ Constant: int  ]
        can do mode 2 

SDF_MODE2 = 0x0200
        [ Constant: int  ]
        can do mode 3 

SDF_MODE3 = 0x0400
        [ Constant: int  ]
        can do mode 4 

SDF_MODE4 = 0x0800
        [ Constant: int  ]
        can do commands 

SDF_CMD = 0x1000
        [ Constant: int  ]
        subdevice can be read (e.g. analog input) 

SDF_READABLE = 0x00010000
        [ Constant: int  ]
        subdevice can be written (e.g. analog output) 

SDF_WRITABLE = 0x00020000
        [ Constant: int  ]
        spelling error in API 

SDF_WRITEABLE = (0x00020000)
        [ Constant: int  ]
        subdevice does not have externally visible lines 

SDF_INTERNAL = 0x00040000
        [ Constant: int  ]
        subdevice is RT capable 

SDF_RT = 0x00080000
        [ Constant: int  ]
        can do aref=ground 

SDF_GROUND = 0x00100000
        [ Constant: int  ]
        can do aref=common 

SDF_COMMON = 0x00200000
        [ Constant: int  ]
        can do aref=diff 

SDF_DIFF = 0x00400000
        [ Constant: int  ]
        can do aref=other 

SDF_OTHER = 0x00800000
        [ Constant: int  ]
        can do dithering 

SDF_DITHER = 0x01000000
        [ Constant: int  ]
        can do deglitching 

SDF_DEGLITCH = 0x02000000
        [ Constant: int  ]
        can do mmap() 

SDF_MMAP = 0x04000000
        [ Constant: int  ]
        subdevice is acquiring data 

SDF_RUNNING = 0x08000000
        [ Constant: int  ]
        subdevice uses 32-bit samples 

SDF_LSAMPL = 0x10000000
        [ Constant: int  ]
        subdevice can do packed DIO 

SDF_PACKED = 0x20000000
        [ Constant: int  ]
        subdevice types 

COMEDI_SUBD_UNUSED = 0
        [ Constant: int  ]

COMEDI_SUBD_AI = 1
        [ Constant: int  ]

COMEDI_SUBD_AO = 2
        [ Constant: int  ]

COMEDI_SUBD_DI = 3
        [ Constant: int  ]

COMEDI_SUBD_DO = 4
        [ Constant: int  ]

COMEDI_SUBD_DIO = 5
        [ Constant: int  ]

COMEDI_SUBD_COUNTER = 6
        [ Constant: int  ]

COMEDI_SUBD_TIMER = 7
        [ Constant: int  ]

COMEDI_SUBD_MEMORY = 8
        [ Constant: int  ]

COMEDI_SUBD_CALIB = 9
        [ Constant: int  ]
        processor, DSP 

COMEDI_SUBD_PROC = 10
        [ Constant: int  ]
        configuration instructions 

COMEDI_INPUT = 0
        [ Constant: int  ]

COMEDI_OUTPUT = 1
        [ Constant: int  ]

COMEDI_OPENDRAIN = 2
        [ Constant: int  ]

INSN_CONFIG_ANALOG_TRIG = 0x10
        [ Constant: int  ]
        #define INSN_CONFIG_WAVEFORM 0x11 #define INSN_CONFIG_TRIG 0x12
        #define INSN_CONFIG_COUNTER 0x13

INSN_CONFIG_ALT_SOURCE = 0x14
        [ Constant: int  ]
        #define INSN_CONFIG_DIGITAL_TRIG 0x15 #define INSN_CONFIG_BLOCK_SIZE
        0x16

CIO = d
        [ Constant: char * ]

1.  class comedi_trig_struct
============================
[ created from struct comedi_trig_struct ]


self.subdev
        [ Member data: returns unsigned int  ]
        subdevice 

self.mode
        [ Member data: returns unsigned int  ]
        mode 

self.flags
        [ Member data: returns unsigned int  ]

self.n_chan
        [ Member data: returns unsigned int  ]
        number of channels 

self.chanlist
        [ Member data: returns unsigned int * ]
        channel/range list 

self.data
        [ Member data: returns sampl_t * ]
        data list, size depends on subd flags 

self.n
        [ Member data: returns unsigned int  ]
        number of scans 

self.trigsrc
        [ Member data: returns unsigned int  ]

self.trigvar
        [ Member data: returns unsigned int  ]

self.trigvar1
        [ Member data: returns unsigned int  ]

self.data_len
        [ Member data: returns unsigned int  ]

self.unused
        [ Member data: returns unsigned int * ]

comedi_trig_struct()
        [ Constructor: returns struct comedi_trig_struct * ]

del this
        [ Destructor: returns void  ]

2.  class comedi_insn_struct
============================
[ created from struct comedi_insn_struct ]


self.insn
        [ Member data: returns unsigned int  ]

self.n
        [ Member data: returns unsigned int  ]

self.data
        [ Member data: returns lsampl_t * ]

self.subdev
        [ Member data: returns unsigned int  ]

self.chanspec
        [ Member data: returns unsigned int  ]

self.unused
        [ Member data: returns unsigned int * ]

comedi_insn_struct()
        [ Constructor: returns struct comedi_insn_struct * ]

del this
        [ Destructor: returns void  ]

3.  class comedi_insnlist_struct
================================
[ created from struct comedi_insnlist_struct ]


self.n_insns
        [ Member data: returns unsigned int  ]

self.insns
        [ Member data: returns comedi_insn * ]

comedi_insnlist_struct()
        [ Constructor: returns struct comedi_insnlist_struct * ]

del this
        [ Destructor: returns void  ]

4.  class comedi_cmd_struct
===========================
[ created from struct comedi_cmd_struct ]


self.subdev
        [ Member data: returns unsigned int  ]

self.flags
        [ Member data: returns unsigned int  ]

self.start_src
        [ Member data: returns unsigned int  ]

self.start_arg
        [ Member data: returns unsigned int  ]

self.scan_begin_src
        [ Member data: returns unsigned int  ]

self.scan_begin_arg
        [ Member data: returns unsigned int  ]

self.convert_src
        [ Member data: returns unsigned int  ]

self.convert_arg
        [ Member data: returns unsigned int  ]

self.scan_end_src
        [ Member data: returns unsigned int  ]

self.scan_end_arg
        [ Member data: returns unsigned int  ]

self.stop_src
        [ Member data: returns unsigned int  ]

self.stop_arg
        [ Member data: returns unsigned int  ]

self.chanlist
        [ Member data: returns unsigned int * ]
        channel/range list 

self.chanlist_len
        [ Member data: returns unsigned int  ]

self.data
        [ Member data: returns sampl_t * ]
        data list, size depends on subd flags 

self.data_len
        [ Member data: returns unsigned int  ]

comedi_cmd_struct()
        [ Constructor: returns struct comedi_cmd_struct * ]

del this
        [ Destructor: returns void  ]

5.  class comedi_chaninfo_struct
================================
[ created from struct comedi_chaninfo_struct ]


self.subdev
        [ Member data: returns unsigned int  ]

self.maxdata_list
        [ Member data: returns lsampl_t * ]

self.flaglist
        [ Member data: returns unsigned int * ]

self.rangelist
        [ Member data: returns unsigned int * ]

self.unused
        [ Member data: returns unsigned int * ]

comedi_chaninfo_struct()
        [ Constructor: returns struct comedi_chaninfo_struct * ]

del this
        [ Destructor: returns void  ]

6.  class comedi_rangeinfo_struct
=================================
[ created from struct comedi_rangeinfo_struct ]


self.range_type
        [ Member data: returns unsigned int  ]

self.range_ptr
        [ Member data: returns void * ]

comedi_rangeinfo_struct()
        [ Constructor: returns struct comedi_rangeinfo_struct * ]

del this
        [ Destructor: returns void  ]

7.  class comedi_krange_struct
==============================
[ created from struct comedi_krange_struct ]


self.min
        [ Member data: returns int  ]
        fixed point, multiply by 1e-6 

self.max
        [ Member data: returns int  ]
        fixed point, multiply by 1e-6 

self.flags
        [ Member data: returns unsigned int  ]

comedi_krange_struct()
        [ Constructor: returns struct comedi_krange_struct * ]

del this
        [ Destructor: returns void  ]

8.  class comedi_subdinfo_struct
================================
[ created from struct comedi_subdinfo_struct ]


self.type
        [ Member data: returns unsigned int  ]

self.n_chan
        [ Member data: returns unsigned int  ]

self.subd_flags
        [ Member data: returns unsigned int  ]

self.timer_type
        [ Member data: returns unsigned int  ]

self.len_chanlist
        [ Member data: returns unsigned int  ]

self.maxdata
        [ Member data: returns lsampl_t  ]

self.flags
        [ Member data: returns unsigned int  ]
        channel flags 

self.range_type
        [ Member data: returns unsigned int  ]
        lookup in kernel 

self.unused
        [ Member data: returns unsigned int * ]

comedi_subdinfo_struct()
        [ Constructor: returns struct comedi_subdinfo_struct * ]

del this
        [ Destructor: returns void  ]

9.  class comedi_devinfo_struct
===============================
[ created from struct comedi_devinfo_struct ]


self.version_code
        [ Member data: returns unsigned int  ]

self.n_subdevs
        [ Member data: returns unsigned int  ]

self.driver_name
        [ Member data: returns char * ]

self.board_name
        [ Member data: returns char * ]

self.read_subdevice
        [ Member data: returns int  ]

self.write_subdevice
        [ Member data: returns int  ]

self.unused
        [ Member data: returns int * ]

comedi_devinfo_struct()
        [ Constructor: returns struct comedi_devinfo_struct * ]

del this
        [ Destructor: returns void  ]

10.  class comedi_devconfig_struct
==================================
[ created from struct comedi_devconfig_struct ]


self.board_name
        [ Member data: returns char * ]

self.options
        [ Member data: returns int * ]

comedi_devconfig_struct()
        [ Constructor: returns struct comedi_devconfig_struct * ]

del this
        [ Destructor: returns void  ]

11.  class comedi_bufconfig_struct
==================================
[ created from struct comedi_bufconfig_struct ]


self.subdevice
        [ Member data: returns unsigned int  ]

self.flags
        [ Member data: returns unsigned int  ]

self.maximum_size
        [ Member data: returns unsigned int  ]

self.size
        [ Member data: returns unsigned int  ]

self.unused
        [ Member data: returns unsigned int * ]

comedi_bufconfig_struct()
        [ Constructor: returns struct comedi_bufconfig_struct * ]

del this
        [ Destructor: returns void  ]

12.  class comedi_bufinfo_struct
================================
[ created from struct comedi_bufinfo_struct ]


self.subdevice
        [ Member data: returns unsigned int  ]

self.bytes_read
        [ Member data: returns unsigned int  ]

self.buf_int_ptr
        [ Member data: returns unsigned int  ]

self.buf_user_ptr
        [ Member data: returns unsigned int  ]

self.buf_int_count
        [ Member data: returns unsigned int  ]

self.buf_user_count
        [ Member data: returns unsigned int  ]

self.unused
        [ Member data: returns unsigned int * ]

comedi_bufinfo_struct()
        [ Constructor: returns struct comedi_bufinfo_struct * ]

del this
        [ Destructor: returns void  ]

----------

RF_EXTERNAL = (1<<8)
        [ Constant: int  ]

UNIT_volt = 0
        [ Constant: int  ]

UNIT_mA = 1
        [ Constant: int  ]

UNIT_none = 2
        [ Constant: int  ]

COMEDI_MIN_SPEED = ((unsigned int)0xffffffff)
        [ Constant: unsigned int  ]
        callback stuff only relevant to kernel modules. 

COMEDI_CB_EOS = 1
        [ Constant: int  ]

COMEDI_CB_EOA = 2
        [ Constant: int  ]
        convenient block size 

COMEDI_CB_BLOCK = 4
        [ Constant: int  ]
        end of buffer 

COMEDI_CB_EOBUF = 8
        [ Constant: int  ]
        card error during acquisition 

COMEDI_CB_ERROR = 16
        [ Constant: int  ]

13.  class comedi_range
=======================
[ created from struct comedi_range ]


self.min
        [ Member data: returns double  ]

self.max
        [ Member data: returns double  ]

self.unit
        [ Member data: returns unsigned int  ]

comedi_range()
        [ Constructor: returns comedi_range * ]

del this
        [ Destructor: returns void  ]

14.  class comedi_sv_t
======================
[ created from struct comedi_sv_t ]


self.dev
        [ Member data: returns comedi_t * ]

self.subdevice
        [ Member data: returns unsigned int  ]

self.chan
        [ Member data: returns unsigned int  ]

self.range
        [ Member data: returns int  ]

self.aref
        [ Member data: returns int  ]

self.n
        [ Member data: returns int  ]

self.maxdata
        [ Member data: returns lsampl_t  ]

comedi_sv_t()
        [ Constructor: returns comedi_sv_t * ]

del this
        [ Destructor: returns void  ]

----------

COMEDI_OOR_NUMBER = COMEDI_OOR_NUMBER
        [ Constant: int  ]

COMEDI_OOR_NAN = COMEDI_OOR_NAN
        [ Constant: int  ]

comedi_open(fn)
        [ returns comedi_t * ]

comedi_close(it)
        [ returns int  ]

comedi_loglevel(loglevel)
        [ returns int  ]

comedi_perror(s)
        [ returns void  ]

comedi_strerror(errnum)
        [ returns char * ]

comedi_errno()
        [ returns int  ]

comedi_fileno(it)
        [ returns int  ]

comedi_get_n_subdevices(it)
        [ returns int  ]

comedi_get_version_code(it)
        [ returns int  ]

comedi_get_driver_name(it)
        [ returns char * ]

comedi_get_board_name(it)
        [ returns char * ]

comedi_get_read_subdevice(dev)
        [ returns int  ]

comedi_get_write_subdevice(dev)
        [ returns int  ]

comedi_get_subdevice_type(it,subdevice)
        [ returns int  ]

comedi_find_subdevice_by_type(it,type,subd)
        [ returns int  ]

comedi_get_subdevice_flags(it,subdevice)
        [ returns int  ]

comedi_get_n_channels(it,subdevice)
        [ returns int  ]

comedi_range_is_chan_specific(it,subdevice)
        [ returns int  ]

comedi_maxdata_is_chan_specific(it,subdevice)
        [ returns int  ]

comedi_get_maxdata(it,subdevice,chan)
        [ returns lsampl_t  ]

comedi_get_n_ranges(it,subdevice,chan)
        [ returns int  ]

comedi_get_range(it,subdevice,chan,range)
        [ returns comedi_range * ]

comedi_find_range(it,subd,chan,unit,min,max)
        [ returns int  ]

comedi_get_buffer_size(it,subdevice)
        [ returns int  ]

comedi_get_max_buffer_size(it,subdevice)
        [ returns int  ]

comedi_set_buffer_size(it,subdevice,len)
        [ returns int  ]

comedi_do_insnlist(it,il)
        [ returns int  ]

comedi_do_insn(it,insn)
        [ returns int  ]

comedi_lock(it,subdevice)
        [ returns int  ]

comedi_unlock(it,subdevice)
        [ returns int  ]

comedi_to_phys(data,rng,maxdata)
        [ returns double  ]

comedi_from_phys(data,rng,maxdata)
        [ returns lsampl_t  ]

comedi_sampl_to_phys(dest,dst_stride,src,src_stride,rng,maxdata,n)
        [ returns int  ]

comedi_sampl_from_phys(dest,dst_stride,src,src_stride,rng,maxdata,n)
        [ returns int  ]

comedi_data_read(it,subd,chan,range,aref,data)
        [ returns int  ]

comedi_data_read_n(it,subd,chan,range,aref,data,n)
        [ returns int  ]

comedi_data_read_hint(it,subd,chan,range,aref)
        [ returns int  ]

comedi_data_read_delayed(it,subd,chan,range,aref,data,nano_sec)
        [ returns int  ]

comedi_data_write(it,subd,chan,range,aref,data)
        [ returns int  ]

comedi_dio_config(it,subd,chan,dir)
        [ returns int  ]

comedi_dio_read(it,subd,chan,bit)
        [ returns int  ]

comedi_dio_write(it,subd,chan,bit)
        [ returns int  ]

comedi_dio_bitfield(it,subd,write_mask,bits)
        [ returns int  ]

comedi_sv_init(it,dev,subd,chan)
        [ returns int  ]

comedi_sv_update(it)
        [ returns int  ]

comedi_sv_measure(it,data)
        [ returns int  ]

comedi_get_cmd_src_mask(dev,subdevice,cmd)
        [ returns int  ]

comedi_get_cmd_generic_timed(dev,subdevice,cmd,ns)
        [ returns int  ]

comedi_cancel(it,subdevice)
        [ returns int  ]

comedi_command(it,cmd)
        [ returns int  ]

comedi_command_test(it,cmd)
        [ returns int  ]

comedi_poll(dev,subdevice)
        [ returns int  ]

comedi_set_max_buffer_size(it,subdev,max_size)
        [ returns int  ]

comedi_get_buffer_contents(it,subdev)
        [ returns int  ]

comedi_mark_buffer_read(it,subdev,bytes)
        [ returns int  ]

comedi_get_buffer_offset(it,subdev)
        [ returns int  ]

