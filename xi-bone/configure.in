AC_INIT([RTXI],[boneclamp],[yapatel@gatech.edu],xi-bone)

AM_CONFIG_HEADER(include/rtxi_config.h)
AM_INIT_AUTOMAKE(foreign)
AM_PATH_CPPUNIT

AC_PROG_LIBTOOL
AC_PROG_CC
AC_PROG_CXX

LIBS=
AC_CHECK_LIB([m],[cos])
AC_CHECK_LIB([gslcblas],[cblas_dgemm])
AC_CHECK_LIB([gsl],[gsl_blas_dgemm])
GSL_LIBS=$LIBS
AC_SUBST(GSL_LIBS)

LIBS=
AC_CHECK_HEADER([hdf5.h])
AC_CHECK_LIB([hdf5],[H5Fopen])
AC_CHECK_LIB([hdf5_hl],[H5PTopen])
HDF_LIBS=$LIBS
AC_SUBST(HDF_LIBS)

AX_HAVE_QT

if test "$have_qt" != "yes" ; then
    AC_MSG_ERROR([Qt not found; see help on how to specify Qt location])
fi

rtos="posix"

AC_ARG_ENABLE(posix,
  [  --enable-posix          build the POSIX non-RT interface],
  [case "${enableval}" in
    "" | y | ye | yes) rtos=posix;;
    n | no);;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-posix);;
  esac],
  [])

RTOS_CPPFLAGS='-I/usr/local/include'
RTOS_LDFLAGS='-I/usr/local/include -L/usr/local/lib -lpthread'

AC_SUBST(RTOS_CPPFLAGS)
AC_SUBST(RTOS_LDFLAGS)

AC_ARG_ENABLE(debug,
  [  --enable-debug          turn on debugging],
  [case "${enableval}" in
    "" | y | ye | yes) debug=true ;;
    n | no) debug=false ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
  esac],
  [debug=false])
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

#  AM_CONDITIONAL(BUILD_COMEDI,false)
#  AM_CONDITIONAL(BUILD_COMEDILIB, false)
#  AM_CONDITIONAL(BUILD_COMEDILIB, test x$comedi = xtrue)
#  AM_CONDITIONAL(BUILD_ANALOGY, false)

#AC_ARG_ENABLE(ni,
#  [  --enable-ni             build the ni driver],
#  [case "${enableval}" in
#    "" | y | ye | yes) ni=true;;
#    n | no) ni=false#;;
#    a*) AC_MSG_ERROR(bad value ${enableval} for --enable-ni);;
#  esac],
#  [ni=false])
#AM_CONDITIONAL(BUILD_NI, false)
#AM_CONDITIONAL(BUILD_NI, test x$ni = xtrue)

#AC_ARG_ENABLE(clampprotocol,
#  [  --enable-clampprotocol     build the clamp protocol module (default=enabled)],
#  [case "${enableval}" in
#    "" | y | ye | yes) clampprotocol=true ;;
#    n | no) clampprotocol=false ;;
#    *) AC_MSG_ERROR(bad value ${enableval} for --enable-clampprotocol) ;;
#  esac],
#  [clampprotocol=true])
#AM_CONDITIONAL(BUILD_CLAMPPROTOCOL, false)
#AM_CONDITIONAL(BUILD_CLAMPPROTOCOL, test x$clampprotocol = xtrue)

dnl Clear build variables

INCLUDES=
DEFS=
CPPFLAGS=
CXXFLAGS=
CFLAGS=
LDADD=
LDFLAGS=
LIBS=

dnl Create makefiles and other configuration files
AC_CONFIG_FILES([
Makefile
hdf/Makefile
rtxi/Makefile
scripts/Makefile
scripts/init_rtxi
scripts/rtxi_plugin_config
testsuite/Makefile
plugins/Makefile
plugins/amplifier_control/am_2400_commander/Makefile
plugins/amplifier_control/axon_axopatch1d_commander/Makefile
plugins/amplifier_control/axon_axopatch200_commander/Makefile
plugins/amplifier_control/axon_multiclamp700_commander/Makefile
plugins/connector/Makefile
plugins/data_recorder/Makefile
plugins/dynamo_model_loader/Makefile
plugins/FIRwindow/Makefile
plugins/IIRfilter/Makefile
plugins/membrane_test/Makefile
plugins/mimic/Makefile
plugins/model_loader/Makefile
plugins/neuron/Makefile
plugins/noisegen/Makefile
plugins/oscilloscope/Makefile
plugins/performance_measurement/Makefile
plugins/siggen/Makefile
plugins/synch/Makefile
plugins/system_control/Makefile
plugins/userprefs/Makefile
plugins/wave_maker/Makefile
])

dnl Generate config.status and launch it
AC_OUTPUT
