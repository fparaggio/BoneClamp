// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tTIO_ipp___
#define ___tTIO_ipp___

#ifndef ___tTIO_h___
#include "tTIO.h"
#endif

#include "trace.h"
inline void tTIO::tReg16IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u16 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write16(offset, u16(value));
}

inline u16 tTIO::tReg16IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u16 value;   if (s && s->isFatal()) return ~0;
   value = (u16)addrSpace.read16(offset);
   return value;
}

inline void tTIO::tReg32IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u32 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write32(offset, value);
}

inline u32 tTIO::tReg32IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u32 value;   if (s && s->isFatal()) return ~0;
   value = addrSpace.read32(offset);
   return value;
}

inline tBusSpaceReference tTIO::getBusSpaceReference(void) const
{
   return _addrSpace;
}

inline void tTIO::setAddressOffset(u32 value, nMDBG::tStatus2* s)
{
   _addressOffset = value;
}
inline u32  tTIO::getAddressOffset(nMDBG::tStatus2* s)
{
   return _addressOffset;
}
inline void tTIO::flushBus(nMDBG::tStatus2* s)
{

}

inline tTIO::tG0_AutoIncrement::tG0_AutoIncrement()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_AutoIncrement::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG0_AutoIncrement::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG0_AutoIncrement& tTIO::tG0_AutoIncrement::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_AutoIncrement::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_AutoIncrement::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG0_AutoIncrement::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG0_AutoIncrement::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG0_AutoIncrement& tTIO::tG0_AutoIncrement::set(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff00)) | (((u16)fieldValue << 0x0) & ~0xff00);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_AutoIncrement::get(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff00) >> 0x0);
}

inline void tTIO::tG0_AutoIncrement::write(u16 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_AutoIncrement::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tTIO::tG0_AutoIncrement::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_Command::tG0_Command()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_Command::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG0_Command::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_Command::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_Command::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffff5be2);
}

inline void tTIO::tG0_Command::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG0_Command::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG0_Command& tTIO::tG0_Command::setG0_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Command::getG0_Arm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tTIO::tG0_Command::writeG0_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Arm(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Command::readG0_Arm(nMDBG::tStatus2* s)
{
   return getG0_Arm(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setG0_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Command::getG0_Save_Trace(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tTIO::tG0_Command::writeG0_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Save_Trace(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Command::readG0_Save_Trace(nMDBG::tStatus2* s)
{
   return getG0_Save_Trace(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setG0_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Command::getG0_Load(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tTIO::tG0_Command::writeG0_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Load(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Command::readG0_Load(nMDBG::tStatus2* s)
{
   return getG0_Load(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setG0_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Command::getG0_Disarm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tTIO::tG0_Command::writeG0_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Disarm(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Command::readG0_Disarm(nMDBG::tStatus2* s)
{
   return getG0_Disarm(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setG0_Up_Down(tG0_Up_Down fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff9f)) | (((u16)fieldValue << 0x5) & ~0xff9f);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Command::tG0_Up_Down tTIO::tG0_Command::getG0_Up_Down(nMDBG::tStatus2*) const
{
   return (tG0_Up_Down)((_softCopy & ~0xff9f) >> 0x5);
}

inline void tTIO::tG0_Command::writeG0_Up_Down(tG0_Up_Down fieldValue, nMDBG::tStatus2* s)
{
   setG0_Up_Down(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Command::tG0_Up_Down tTIO::tG0_Command::readG0_Up_Down(nMDBG::tStatus2* s)
{
   return getG0_Up_Down(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setG0_Write_Switch(tG0_Write_Switch fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Command::tG0_Write_Switch tTIO::tG0_Command::getG0_Write_Switch(nMDBG::tStatus2*) const
{
   return (tG0_Write_Switch)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tTIO::tG0_Command::writeG0_Write_Switch(tG0_Write_Switch fieldValue, nMDBG::tStatus2* s)
{
   setG0_Write_Switch(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Command::tG0_Write_Switch tTIO::tG0_Command::readG0_Write_Switch(nMDBG::tStatus2* s)
{
   return getG0_Write_Switch(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setG0_Synchronized_Gate(tG0_Synchronized_Gate fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Command::tG0_Synchronized_Gate tTIO::tG0_Command::getG0_Synchronized_Gate(nMDBG::tStatus2*) const
{
   return (tG0_Synchronized_Gate)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tTIO::tG0_Command::writeG0_Synchronized_Gate(tG0_Synchronized_Gate fieldValue, nMDBG::tStatus2* s)
{
   setG0_Synchronized_Gate(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Command::tG0_Synchronized_Gate tTIO::tG0_Command::readG0_Synchronized_Gate(nMDBG::tStatus2* s)
{
   return getG0_Synchronized_Gate(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setG0_Little_Big_Endian(tG0_Little_Big_Endian fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Command::tG0_Little_Big_Endian tTIO::tG0_Command::getG0_Little_Big_Endian(nMDBG::tStatus2*) const
{
   return (tG0_Little_Big_Endian)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tTIO::tG0_Command::writeG0_Little_Big_Endian(tG0_Little_Big_Endian fieldValue, nMDBG::tStatus2* s)
{
   setG0_Little_Big_Endian(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Command::tG0_Little_Big_Endian tTIO::tG0_Command::readG0_Little_Big_Endian(nMDBG::tStatus2* s)
{
   return getG0_Little_Big_Endian(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setG0_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Command::getG0_Bank_Switch_Start(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tTIO::tG0_Command::writeG0_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Bank_Switch_Start(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Command::readG0_Bank_Switch_Start(nMDBG::tStatus2* s)
{
   return getG0_Bank_Switch_Start(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setG0_Bank_Switch_Mode(tG0_Bank_Switch_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Command::tG0_Bank_Switch_Mode tTIO::tG0_Command::getG0_Bank_Switch_Mode(nMDBG::tStatus2*) const
{
   return (tG0_Bank_Switch_Mode)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tTIO::tG0_Command::writeG0_Bank_Switch_Mode(tG0_Bank_Switch_Mode fieldValue, nMDBG::tStatus2* s)
{
   setG0_Bank_Switch_Mode(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Command::tG0_Bank_Switch_Mode tTIO::tG0_Command::readG0_Bank_Switch_Mode(nMDBG::tStatus2* s)
{
   return getG0_Bank_Switch_Mode(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setG0_Bank_Switch_Enable(tG0_Bank_Switch_Enable fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Command::tG0_Bank_Switch_Enable tTIO::tG0_Command::getG0_Bank_Switch_Enable(nMDBG::tStatus2*) const
{
   return (tG0_Bank_Switch_Enable)((_softCopy & ~0xefff) >> 0xc);
}

inline void tTIO::tG0_Command::writeG0_Bank_Switch_Enable(tG0_Bank_Switch_Enable fieldValue, nMDBG::tStatus2* s)
{
   setG0_Bank_Switch_Enable(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Command::tG0_Bank_Switch_Enable tTIO::tG0_Command::readG0_Bank_Switch_Enable(nMDBG::tStatus2* s)
{
   return getG0_Bank_Switch_Enable(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setG1_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Command::getG1_Arm_Copy(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tTIO::tG0_Command::writeG1_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Arm_Copy(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Command::readG1_Arm_Copy(nMDBG::tStatus2* s)
{
   return getG1_Arm_Copy(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setG1_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Command::getG1_Save_Trace_Copy(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tG0_Command::writeG1_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Save_Trace_Copy(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Command::readG1_Save_Trace_Copy(nMDBG::tStatus2* s)
{
   return getG1_Save_Trace_Copy(s);
}

inline tTIO::tG0_Command& tTIO::tG0_Command::setG1_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Command::getG1_Disarm_Copy(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tTIO::tG0_Command::writeG1_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Disarm_Copy(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Command::readG1_Disarm_Copy(nMDBG::tStatus2* s)
{
   return getG1_Disarm_Copy(s);
}

inline void tTIO::tG0_Command::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_Counting_Mode::tG0_Counting_Mode()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_Counting_Mode::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG0_Counting_Mode::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG0_Counting_Mode& tTIO::tG0_Counting_Mode::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_Counting_Mode::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_Counting_Mode::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG0_Counting_Mode::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG0_Counting_Mode::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG0_Counting_Mode& tTIO::tG0_Counting_Mode::setG0_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff8)) | (((u16)fieldValue << 0x0) & ~0xfff8);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Counting_Mode::getG0_Encoder_Counting_Mode(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff8) >> 0x0);
}

inline void tTIO::tG0_Counting_Mode::writeG0_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Encoder_Counting_Mode(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Counting_Mode::readG0_Encoder_Counting_Mode(nMDBG::tStatus2* s)
{
   return getG0_Encoder_Counting_Mode(s);
}

inline tTIO::tG0_Counting_Mode& tTIO::tG0_Counting_Mode::setG0_Index_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Counting_Mode::getG0_Index_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tTIO::tG0_Counting_Mode::writeG0_Index_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Index_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Counting_Mode::readG0_Index_Enable(nMDBG::tStatus2* s)
{
   return getG0_Index_Enable(s);
}

inline tTIO::tG0_Counting_Mode& tTIO::tG0_Counting_Mode::setG0_Index_Phase(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff9f)) | (((u16)fieldValue << 0x5) & ~0xff9f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Counting_Mode::getG0_Index_Phase(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff9f) >> 0x5);
}

inline void tTIO::tG0_Counting_Mode::writeG0_Index_Phase(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Index_Phase(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Counting_Mode::readG0_Index_Phase(nMDBG::tStatus2* s)
{
   return getG0_Index_Phase(s);
}

inline tTIO::tG0_Counting_Mode& tTIO::tG0_Counting_Mode::setG0_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Counting_Mode::getG0_HW_Arm_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tTIO::tG0_Counting_Mode::writeG0_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_HW_Arm_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Counting_Mode::readG0_HW_Arm_Enable(nMDBG::tStatus2* s)
{
   return getG0_HW_Arm_Enable(s);
}

inline tTIO::tG0_Counting_Mode& tTIO::tG0_Counting_Mode::setG0_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf8ff)) | (((u16)fieldValue << 0x8) & ~0xf8ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Counting_Mode::getG0_HW_Arm_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf8ff) >> 0x8);
}

inline void tTIO::tG0_Counting_Mode::writeG0_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_HW_Arm_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Counting_Mode::readG0_HW_Arm_Select(nMDBG::tStatus2* s)
{
   return getG0_HW_Arm_Select(s);
}

inline tTIO::tG0_Counting_Mode& tTIO::tG0_Counting_Mode::setG0_Prescale(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Counting_Mode::getG0_Prescale(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tTIO::tG0_Counting_Mode::writeG0_Prescale(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Prescale(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Counting_Mode::readG0_Prescale(nMDBG::tStatus2* s)
{
   return getG0_Prescale(s);
}

inline tTIO::tG0_Counting_Mode& tTIO::tG0_Counting_Mode::setG0_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Counting_Mode::getG0_Alternate_Synchronization(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tTIO::tG0_Counting_Mode::writeG0_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Alternate_Synchronization(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Counting_Mode::readG0_Alternate_Synchronization(nMDBG::tStatus2* s)
{
   return getG0_Alternate_Synchronization(s);
}

inline tTIO::tG0_Counting_Mode& tTIO::tG0_Counting_Mode::setG0_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Counting_Mode::getG0_Prescale_By_2(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tG0_Counting_Mode::writeG0_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Prescale_By_2(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Counting_Mode::readG0_Prescale_By_2(nMDBG::tStatus2* s)
{
   return getG0_Prescale_By_2(s);
}

inline void tTIO::tG0_Counting_Mode::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_MSeries_Counting_Mode::tG0_MSeries_Counting_Mode()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_MSeries_Counting_Mode::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG0_MSeries_Counting_Mode::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG0_MSeries_Counting_Mode& tTIO::tG0_MSeries_Counting_Mode::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_MSeries_Counting_Mode::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_MSeries_Counting_Mode::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG0_MSeries_Counting_Mode::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG0_MSeries_Counting_Mode::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG0_MSeries_Counting_Mode& tTIO::tG0_MSeries_Counting_Mode::setG0_MSeries_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff8)) | (((u16)fieldValue << 0x0) & ~0xfff8);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_MSeries_Counting_Mode::getG0_MSeries_Encoder_Counting_Mode(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff8) >> 0x0);
}

inline void tTIO::tG0_MSeries_Counting_Mode::writeG0_MSeries_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_MSeries_Encoder_Counting_Mode(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_MSeries_Counting_Mode::readG0_MSeries_Encoder_Counting_Mode(nMDBG::tStatus2* s)
{
   return getG0_MSeries_Encoder_Counting_Mode(s);
}

inline tTIO::tG0_MSeries_Counting_Mode& tTIO::tG0_MSeries_Counting_Mode::setG0_MSeries_Index_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_MSeries_Counting_Mode::getG0_MSeries_Index_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tTIO::tG0_MSeries_Counting_Mode::writeG0_MSeries_Index_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_MSeries_Index_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_MSeries_Counting_Mode::readG0_MSeries_Index_Enable(nMDBG::tStatus2* s)
{
   return getG0_MSeries_Index_Enable(s);
}

inline tTIO::tG0_MSeries_Counting_Mode& tTIO::tG0_MSeries_Counting_Mode::setG0_MSeries_Index_Phase(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff9f)) | (((u16)fieldValue << 0x5) & ~0xff9f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_MSeries_Counting_Mode::getG0_MSeries_Index_Phase(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff9f) >> 0x5);
}

inline void tTIO::tG0_MSeries_Counting_Mode::writeG0_MSeries_Index_Phase(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_MSeries_Index_Phase(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_MSeries_Counting_Mode::readG0_MSeries_Index_Phase(nMDBG::tStatus2* s)
{
   return getG0_MSeries_Index_Phase(s);
}

inline tTIO::tG0_MSeries_Counting_Mode& tTIO::tG0_MSeries_Counting_Mode::setG0_MSeries_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_MSeries_Counting_Mode::getG0_MSeries_HW_Arm_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tTIO::tG0_MSeries_Counting_Mode::writeG0_MSeries_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_MSeries_HW_Arm_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_MSeries_Counting_Mode::readG0_MSeries_HW_Arm_Enable(nMDBG::tStatus2* s)
{
   return getG0_MSeries_HW_Arm_Enable(s);
}

inline tTIO::tG0_MSeries_Counting_Mode& tTIO::tG0_MSeries_Counting_Mode::setG0_MSeries_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xe0ff)) | (((u16)fieldValue << 0x8) & ~0xe0ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_MSeries_Counting_Mode::getG0_MSeries_HW_Arm_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xe0ff) >> 0x8);
}

inline void tTIO::tG0_MSeries_Counting_Mode::writeG0_MSeries_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_MSeries_HW_Arm_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_MSeries_Counting_Mode::readG0_MSeries_HW_Arm_Select(nMDBG::tStatus2* s)
{
   return getG0_MSeries_HW_Arm_Select(s);
}

inline tTIO::tG0_MSeries_Counting_Mode& tTIO::tG0_MSeries_Counting_Mode::setG0_MSeries_Prescale(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_MSeries_Counting_Mode::getG0_MSeries_Prescale(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tTIO::tG0_MSeries_Counting_Mode::writeG0_MSeries_Prescale(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_MSeries_Prescale(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_MSeries_Counting_Mode::readG0_MSeries_Prescale(nMDBG::tStatus2* s)
{
   return getG0_MSeries_Prescale(s);
}

inline tTIO::tG0_MSeries_Counting_Mode& tTIO::tG0_MSeries_Counting_Mode::setG0_MSeries_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_MSeries_Counting_Mode::getG0_MSeries_Alternate_Synchronization(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tG0_MSeries_Counting_Mode::writeG0_MSeries_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_MSeries_Alternate_Synchronization(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_MSeries_Counting_Mode::readG0_MSeries_Alternate_Synchronization(nMDBG::tStatus2* s)
{
   return getG0_MSeries_Alternate_Synchronization(s);
}

inline tTIO::tG0_MSeries_Counting_Mode& tTIO::tG0_MSeries_Counting_Mode::setG0_MSeries_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_MSeries_Counting_Mode::getG0_MSeries_Prescale_By_2(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tTIO::tG0_MSeries_Counting_Mode::writeG0_MSeries_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_MSeries_Prescale_By_2(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_MSeries_Counting_Mode::readG0_MSeries_Prescale_By_2(nMDBG::tStatus2* s)
{
   return getG0_MSeries_Prescale_By_2(s);
}

inline void tTIO::tG0_MSeries_Counting_Mode::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_DMA_Control::tG0_DMA_Control()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_DMA_Control::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG0_DMA_Control::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG0_DMA_Control& tTIO::tG0_DMA_Control::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_DMA_Control::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_DMA_Control::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG0_DMA_Control::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG0_DMA_Control::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG0_DMA_Control& tTIO::tG0_DMA_Control::setG0_DMA_Enable(tG0_DMA_Enable fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_DMA_Control::tG0_DMA_Enable tTIO::tG0_DMA_Control::getG0_DMA_Enable(nMDBG::tStatus2*) const
{
   return (tG0_DMA_Enable)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tTIO::tG0_DMA_Control::writeG0_DMA_Enable(tG0_DMA_Enable fieldValue, nMDBG::tStatus2* s)
{
   setG0_DMA_Enable(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_DMA_Control::tG0_DMA_Enable tTIO::tG0_DMA_Control::readG0_DMA_Enable(nMDBG::tStatus2* s)
{
   return getG0_DMA_Enable(s);
}

inline tTIO::tG0_DMA_Control& tTIO::tG0_DMA_Control::setG0_DMA_Output_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_DMA_Control::getG0_DMA_Output_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tTIO::tG0_DMA_Control::writeG0_DMA_Output_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_DMA_Output_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_DMA_Control::readG0_DMA_Output_Enable(nMDBG::tStatus2* s)
{
   return getG0_DMA_Output_Enable(s);
}

inline tTIO::tG0_DMA_Control& tTIO::tG0_DMA_Control::setG0_DMA_Int_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_DMA_Control::getG0_DMA_Int_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tTIO::tG0_DMA_Control::writeG0_DMA_Int_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_DMA_Int_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_DMA_Control::readG0_DMA_Int_Enable(nMDBG::tStatus2* s)
{
   return getG0_DMA_Int_Enable(s);
}

inline void tTIO::tG0_DMA_Control::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_Input_Select::tG0_Input_Select()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_Input_Select::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG0_Input_Select::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG0_Input_Select& tTIO::tG0_Input_Select::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_Input_Select::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_Input_Select::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG0_Input_Select::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG0_Input_Select::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG0_Input_Select& tTIO::tG0_Input_Select::setG0_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Input_Select::getG0_Read_Acknowledges_Irq(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tTIO::tG0_Input_Select::writeG0_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Read_Acknowledges_Irq(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Input_Select::readG0_Read_Acknowledges_Irq(nMDBG::tStatus2* s)
{
   return getG0_Read_Acknowledges_Irq(s);
}

inline tTIO::tG0_Input_Select& tTIO::tG0_Input_Select::setG0_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Input_Select::getG0_Write_Acknowledges_Irq(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tTIO::tG0_Input_Select::writeG0_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Write_Acknowledges_Irq(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Input_Select::readG0_Write_Acknowledges_Irq(nMDBG::tStatus2* s)
{
   return getG0_Write_Acknowledges_Irq(s);
}

inline tTIO::tG0_Input_Select& tTIO::tG0_Input_Select::setG0_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff83)) | (((u16)fieldValue << 0x2) & ~0xff83);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Input_Select::getG0_Source_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff83) >> 0x2);
}

inline void tTIO::tG0_Input_Select::writeG0_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Source_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Input_Select::readG0_Source_Select(nMDBG::tStatus2* s)
{
   return getG0_Source_Select(s);
}

inline tTIO::tG0_Input_Select& tTIO::tG0_Input_Select::setG0_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf07f)) | (((u16)fieldValue << 0x7) & ~0xf07f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Input_Select::getG0_Gate_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf07f) >> 0x7);
}

inline void tTIO::tG0_Input_Select::writeG0_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Gate_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Input_Select::readG0_Gate_Select(nMDBG::tStatus2* s)
{
   return getG0_Gate_Select(s);
}

inline tTIO::tG0_Input_Select& tTIO::tG0_Input_Select::setG0_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Input_Select::getG0_Gate_Select_Load_Source(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tTIO::tG0_Input_Select::writeG0_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Gate_Select_Load_Source(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Input_Select::readG0_Gate_Select_Load_Source(nMDBG::tStatus2* s)
{
   return getG0_Gate_Select_Load_Source(s);
}

inline tTIO::tG0_Input_Select& tTIO::tG0_Input_Select::setG0_OR_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Input_Select::getG0_OR_Gate(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tTIO::tG0_Input_Select::writeG0_OR_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_OR_Gate(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Input_Select::readG0_OR_Gate(nMDBG::tStatus2* s)
{
   return getG0_OR_Gate(s);
}

inline tTIO::tG0_Input_Select& tTIO::tG0_Input_Select::setG0_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Input_Select::getG0_Output_Polarity(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tG0_Input_Select::writeG0_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Output_Polarity(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Input_Select::readG0_Output_Polarity(nMDBG::tStatus2* s)
{
   return getG0_Output_Polarity(s);
}

inline tTIO::tG0_Input_Select& tTIO::tG0_Input_Select::setG0_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Input_Select::getG0_Source_Polarity(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tTIO::tG0_Input_Select::writeG0_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Source_Polarity(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Input_Select::readG0_Source_Polarity(nMDBG::tStatus2* s)
{
   return getG0_Source_Polarity(s);
}

inline void tTIO::tG0_Input_Select::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_Load_A::tG0_Load_A()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_Load_A::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG0_Load_A::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG0_Load_A& tTIO::tG0_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tTIO::tG0_Load_A::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_Load_A::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tTIO::tG0_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tTIO::tG0_Load_A::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG0_Load_A& tTIO::tG0_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tTIO::tG0_Load_A::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tTIO::tG0_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tTIO::tG0_Load_A::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tTIO::tG0_Load_A::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_Load_B::tG0_Load_B()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_Load_B::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG0_Load_B::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG0_Load_B& tTIO::tG0_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tTIO::tG0_Load_B::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_Load_B::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tTIO::tG0_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tTIO::tG0_Load_B::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG0_Load_B& tTIO::tG0_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tTIO::tG0_Load_B::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tTIO::tG0_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tTIO::tG0_Load_B::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tTIO::tG0_Load_B::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_Mode::tG0_Mode()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_Mode::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG0_Mode::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG0_Mode& tTIO::tG0_Mode::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_Mode::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_Mode::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG0_Mode::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG0_Mode::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG0_Mode& tTIO::tG0_Mode::setG0_Gating_Mode(tG0_Gating_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffc)) | (((u16)fieldValue << 0x0) & ~0xfffc);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Mode::tG0_Gating_Mode tTIO::tG0_Mode::getG0_Gating_Mode(nMDBG::tStatus2*) const
{
   return (tG0_Gating_Mode)((_softCopy & ~0xfffc) >> 0x0);
}

inline void tTIO::tG0_Mode::writeG0_Gating_Mode(tG0_Gating_Mode fieldValue, nMDBG::tStatus2* s)
{
   setG0_Gating_Mode(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Mode::tG0_Gating_Mode tTIO::tG0_Mode::readG0_Gating_Mode(nMDBG::tStatus2* s)
{
   return getG0_Gating_Mode(s);
}

inline tTIO::tG0_Mode& tTIO::tG0_Mode::setG0_Gate_On_Both_Edges(tG0_Gate_On_Both_Edges fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Mode::tG0_Gate_On_Both_Edges tTIO::tG0_Mode::getG0_Gate_On_Both_Edges(nMDBG::tStatus2*) const
{
   return (tG0_Gate_On_Both_Edges)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tTIO::tG0_Mode::writeG0_Gate_On_Both_Edges(tG0_Gate_On_Both_Edges fieldValue, nMDBG::tStatus2* s)
{
   setG0_Gate_On_Both_Edges(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Mode::tG0_Gate_On_Both_Edges tTIO::tG0_Mode::readG0_Gate_On_Both_Edges(nMDBG::tStatus2* s)
{
   return getG0_Gate_On_Both_Edges(s);
}

inline tTIO::tG0_Mode& tTIO::tG0_Mode::setG0_Trigger_Mode_For_Edge_Gate(tG0_Trigger_Mode_For_Edge_Gate fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe7)) | (((u16)fieldValue << 0x3) & ~0xffe7);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Mode::tG0_Trigger_Mode_For_Edge_Gate tTIO::tG0_Mode::getG0_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2*) const
{
   return (tG0_Trigger_Mode_For_Edge_Gate)((_softCopy & ~0xffe7) >> 0x3);
}

inline void tTIO::tG0_Mode::writeG0_Trigger_Mode_For_Edge_Gate(tG0_Trigger_Mode_For_Edge_Gate fieldValue, nMDBG::tStatus2* s)
{
   setG0_Trigger_Mode_For_Edge_Gate(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Mode::tG0_Trigger_Mode_For_Edge_Gate tTIO::tG0_Mode::readG0_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2* s)
{
   return getG0_Trigger_Mode_For_Edge_Gate(s);
}

inline tTIO::tG0_Mode& tTIO::tG0_Mode::setG0_Stop_Mode(tG0_Stop_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff9f)) | (((u16)fieldValue << 0x5) & ~0xff9f);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Mode::tG0_Stop_Mode tTIO::tG0_Mode::getG0_Stop_Mode(nMDBG::tStatus2*) const
{
   return (tG0_Stop_Mode)((_softCopy & ~0xff9f) >> 0x5);
}

inline void tTIO::tG0_Mode::writeG0_Stop_Mode(tG0_Stop_Mode fieldValue, nMDBG::tStatus2* s)
{
   setG0_Stop_Mode(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Mode::tG0_Stop_Mode tTIO::tG0_Mode::readG0_Stop_Mode(nMDBG::tStatus2* s)
{
   return getG0_Stop_Mode(s);
}

inline tTIO::tG0_Mode& tTIO::tG0_Mode::setG0_Load_Source_Select(tG0_Load_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Mode::tG0_Load_Source_Select tTIO::tG0_Mode::getG0_Load_Source_Select(nMDBG::tStatus2*) const
{
   return (tG0_Load_Source_Select)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tTIO::tG0_Mode::writeG0_Load_Source_Select(tG0_Load_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   setG0_Load_Source_Select(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Mode::tG0_Load_Source_Select tTIO::tG0_Mode::readG0_Load_Source_Select(nMDBG::tStatus2* s)
{
   return getG0_Load_Source_Select(s);
}

inline tTIO::tG0_Mode& tTIO::tG0_Mode::setG0_Output_Mode(tG0_Output_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfcff)) | (((u16)fieldValue << 0x8) & ~0xfcff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Mode::tG0_Output_Mode tTIO::tG0_Mode::getG0_Output_Mode(nMDBG::tStatus2*) const
{
   return (tG0_Output_Mode)((_softCopy & ~0xfcff) >> 0x8);
}

inline void tTIO::tG0_Mode::writeG0_Output_Mode(tG0_Output_Mode fieldValue, nMDBG::tStatus2* s)
{
   setG0_Output_Mode(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Mode::tG0_Output_Mode tTIO::tG0_Mode::readG0_Output_Mode(nMDBG::tStatus2* s)
{
   return getG0_Output_Mode(s);
}

inline tTIO::tG0_Mode& tTIO::tG0_Mode::setG0_Counting_Once(tG0_Counting_Once fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf3ff)) | (((u16)fieldValue << 0xa) & ~0xf3ff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Mode::tG0_Counting_Once tTIO::tG0_Mode::getG0_Counting_Once(nMDBG::tStatus2*) const
{
   return (tG0_Counting_Once)((_softCopy & ~0xf3ff) >> 0xa);
}

inline void tTIO::tG0_Mode::writeG0_Counting_Once(tG0_Counting_Once fieldValue, nMDBG::tStatus2* s)
{
   setG0_Counting_Once(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Mode::tG0_Counting_Once tTIO::tG0_Mode::readG0_Counting_Once(nMDBG::tStatus2* s)
{
   return getG0_Counting_Once(s);
}

inline tTIO::tG0_Mode& tTIO::tG0_Mode::setG0_Loading_On_TC(tG0_Loading_On_TC fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Mode::tG0_Loading_On_TC tTIO::tG0_Mode::getG0_Loading_On_TC(nMDBG::tStatus2*) const
{
   return (tG0_Loading_On_TC)((_softCopy & ~0xefff) >> 0xc);
}

inline void tTIO::tG0_Mode::writeG0_Loading_On_TC(tG0_Loading_On_TC fieldValue, nMDBG::tStatus2* s)
{
   setG0_Loading_On_TC(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Mode::tG0_Loading_On_TC tTIO::tG0_Mode::readG0_Loading_On_TC(nMDBG::tStatus2* s)
{
   return getG0_Loading_On_TC(s);
}

inline tTIO::tG0_Mode& tTIO::tG0_Mode::setG0_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Mode::getG0_Gate_Polarity(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tTIO::tG0_Mode::writeG0_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Gate_Polarity(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Mode::readG0_Gate_Polarity(nMDBG::tStatus2* s)
{
   return getG0_Gate_Polarity(s);
}

inline tTIO::tG0_Mode& tTIO::tG0_Mode::setG0_Loading_On_Gate(tG0_Loading_On_Gate fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Mode::tG0_Loading_On_Gate tTIO::tG0_Mode::getG0_Loading_On_Gate(nMDBG::tStatus2*) const
{
   return (tG0_Loading_On_Gate)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tG0_Mode::writeG0_Loading_On_Gate(tG0_Loading_On_Gate fieldValue, nMDBG::tStatus2* s)
{
   setG0_Loading_On_Gate(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Mode::tG0_Loading_On_Gate tTIO::tG0_Mode::readG0_Loading_On_Gate(nMDBG::tStatus2* s)
{
   return getG0_Loading_On_Gate(s);
}

inline tTIO::tG0_Mode& tTIO::tG0_Mode::setG0_Reload_Source_Switching(tG0_Reload_Source_Switching fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG0_Mode::tG0_Reload_Source_Switching tTIO::tG0_Mode::getG0_Reload_Source_Switching(nMDBG::tStatus2*) const
{
   return (tG0_Reload_Source_Switching)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tTIO::tG0_Mode::writeG0_Reload_Source_Switching(tG0_Reload_Source_Switching fieldValue, nMDBG::tStatus2* s)
{
   setG0_Reload_Source_Switching(fieldValue, s);
   flush(s);
}
inline tTIO::tG0_Mode::tG0_Reload_Source_Switching tTIO::tG0_Mode::readG0_Reload_Source_Switching(nMDBG::tStatus2* s)
{
   return getG0_Reload_Source_Switching(s);
}

inline void tTIO::tG0_Mode::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_Second_Gate::tG0_Second_Gate()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_Second_Gate::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG0_Second_Gate::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG0_Second_Gate& tTIO::tG0_Second_Gate::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_Second_Gate::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_Second_Gate::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG0_Second_Gate::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG0_Second_Gate::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG0_Second_Gate& tTIO::tG0_Second_Gate::setG0_Second_Gate_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Second_Gate::getG0_Second_Gate_Gating_Mode(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tTIO::tG0_Second_Gate::writeG0_Second_Gate_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Second_Gate_Gating_Mode(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Second_Gate::readG0_Second_Gate_Gating_Mode(nMDBG::tStatus2* s)
{
   return getG0_Second_Gate_Gating_Mode(s);
}

inline tTIO::tG0_Second_Gate& tTIO::tG0_Second_Gate::setG0_Second_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf07f)) | (((u16)fieldValue << 0x7) & ~0xf07f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Second_Gate::getG0_Second_Gate_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf07f) >> 0x7);
}

inline void tTIO::tG0_Second_Gate::writeG0_Second_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Second_Gate_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Second_Gate::readG0_Second_Gate_Select(nMDBG::tStatus2* s)
{
   return getG0_Second_Gate_Select(s);
}

inline tTIO::tG0_Second_Gate& tTIO::tG0_Second_Gate::setG0_Second_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Second_Gate::getG0_Second_Gate_Polarity(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tTIO::tG0_Second_Gate::writeG0_Second_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Second_Gate_Polarity(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Second_Gate::readG0_Second_Gate_Polarity(nMDBG::tStatus2* s)
{
   return getG0_Second_Gate_Polarity(s);
}

inline tTIO::tG0_Second_Gate& tTIO::tG0_Second_Gate::setG0_MSeries_Second_Gate_SubSelect(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Second_Gate::getG0_MSeries_Second_Gate_SubSelect(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tG0_Second_Gate::writeG0_MSeries_Second_Gate_SubSelect(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_MSeries_Second_Gate_SubSelect(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Second_Gate::readG0_MSeries_Second_Gate_SubSelect(nMDBG::tStatus2* s)
{
   return getG0_MSeries_Second_Gate_SubSelect(s);
}

inline tTIO::tG0_Second_Gate& tTIO::tG0_Second_Gate::setG0_MSeries_Source_SubSelect(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Second_Gate::getG0_MSeries_Source_SubSelect(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tTIO::tG0_Second_Gate::writeG0_MSeries_Source_SubSelect(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_MSeries_Source_SubSelect(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_Second_Gate::readG0_MSeries_Source_SubSelect(nMDBG::tStatus2* s)
{
   return getG0_MSeries_Source_SubSelect(s);
}

inline void tTIO::tG0_Second_Gate::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_MSeries_ABZ::tG0_MSeries_ABZ()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_MSeries_ABZ::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG0_MSeries_ABZ::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG0_MSeries_ABZ& tTIO::tG0_MSeries_ABZ::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_MSeries_ABZ::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_MSeries_ABZ::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG0_MSeries_ABZ::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG0_MSeries_ABZ::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG0_MSeries_ABZ& tTIO::tG0_MSeries_ABZ::setG0_Z_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_MSeries_ABZ::getG0_Z_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tTIO::tG0_MSeries_ABZ::writeG0_Z_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Z_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_MSeries_ABZ::readG0_Z_Select(nMDBG::tStatus2* s)
{
   return getG0_Z_Select(s);
}

inline tTIO::tG0_MSeries_ABZ& tTIO::tG0_MSeries_ABZ::setG0_B_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfc1f)) | (((u16)fieldValue << 0x5) & ~0xfc1f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_MSeries_ABZ::getG0_B_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfc1f) >> 0x5);
}

inline void tTIO::tG0_MSeries_ABZ::writeG0_B_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_B_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_MSeries_ABZ::readG0_B_Select(nMDBG::tStatus2* s)
{
   return getG0_B_Select(s);
}

inline tTIO::tG0_MSeries_ABZ& tTIO::tG0_MSeries_ABZ::setG0_A_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x83ff)) | (((u16)fieldValue << 0xa) & ~0x83ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_MSeries_ABZ::getG0_A_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x83ff) >> 0xa);
}

inline void tTIO::tG0_MSeries_ABZ::writeG0_A_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_A_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG0_MSeries_ABZ::readG0_A_Select(nMDBG::tStatus2* s)
{
   return getG0_A_Select(s);
}

inline void tTIO::tG0_MSeries_ABZ::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG01_Joint_Reset::tG01_Joint_Reset()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG01_Joint_Reset::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG01_Joint_Reset::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG01_Joint_Reset& tTIO::tG01_Joint_Reset::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG01_Joint_Reset::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG01_Joint_Reset::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xfffffff3);
}

inline void tTIO::tG01_Joint_Reset::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG01_Joint_Reset::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG01_Joint_Reset& tTIO::tG01_Joint_Reset::setG0_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Joint_Reset::getG0_Reset(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tTIO::tG01_Joint_Reset::writeG0_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Reset(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG01_Joint_Reset::readG0_Reset(nMDBG::tStatus2* s)
{
   return getG0_Reset(s);
}

inline tTIO::tG01_Joint_Reset& tTIO::tG01_Joint_Reset::setG1_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Joint_Reset::getG1_Reset(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tTIO::tG01_Joint_Reset::writeG1_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Reset(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG01_Joint_Reset::readG1_Reset(nMDBG::tStatus2* s)
{
   return getG1_Reset(s);
}

inline void tTIO::tG01_Joint_Reset::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_AutoIncrement::tG1_AutoIncrement()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_AutoIncrement::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG1_AutoIncrement::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG1_AutoIncrement& tTIO::tG1_AutoIncrement::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_AutoIncrement::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_AutoIncrement::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG1_AutoIncrement::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG1_AutoIncrement::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG1_AutoIncrement& tTIO::tG1_AutoIncrement::set(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff00)) | (((u16)fieldValue << 0x0) & ~0xff00);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_AutoIncrement::get(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff00) >> 0x0);
}

inline void tTIO::tG1_AutoIncrement::write(u16 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_AutoIncrement::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tTIO::tG1_AutoIncrement::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_Command::tG1_Command()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_Command::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG1_Command::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_Command::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_Command::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffff5bea);
}

inline void tTIO::tG1_Command::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG1_Command::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG1_Command& tTIO::tG1_Command::setG1_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Command::getG1_Arm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tTIO::tG1_Command::writeG1_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Arm(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Command::readG1_Arm(nMDBG::tStatus2* s)
{
   return getG1_Arm(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setG1_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Command::getG1_Save_Trace(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tTIO::tG1_Command::writeG1_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Save_Trace(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Command::readG1_Save_Trace(nMDBG::tStatus2* s)
{
   return getG1_Save_Trace(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setG1_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Command::getG1_Load(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tTIO::tG1_Command::writeG1_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Load(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Command::readG1_Load(nMDBG::tStatus2* s)
{
   return getG1_Load(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setG1_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Command::getG1_Disarm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tTIO::tG1_Command::writeG1_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Disarm(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Command::readG1_Disarm(nMDBG::tStatus2* s)
{
   return getG1_Disarm(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setG1_Up_Down(tG1_Up_Down fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff9f)) | (((u16)fieldValue << 0x5) & ~0xff9f);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Command::tG1_Up_Down tTIO::tG1_Command::getG1_Up_Down(nMDBG::tStatus2*) const
{
   return (tG1_Up_Down)((_softCopy & ~0xff9f) >> 0x5);
}

inline void tTIO::tG1_Command::writeG1_Up_Down(tG1_Up_Down fieldValue, nMDBG::tStatus2* s)
{
   setG1_Up_Down(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Command::tG1_Up_Down tTIO::tG1_Command::readG1_Up_Down(nMDBG::tStatus2* s)
{
   return getG1_Up_Down(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setG1_Write_Switch(tG1_Write_Switch fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Command::tG1_Write_Switch tTIO::tG1_Command::getG1_Write_Switch(nMDBG::tStatus2*) const
{
   return (tG1_Write_Switch)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tTIO::tG1_Command::writeG1_Write_Switch(tG1_Write_Switch fieldValue, nMDBG::tStatus2* s)
{
   setG1_Write_Switch(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Command::tG1_Write_Switch tTIO::tG1_Command::readG1_Write_Switch(nMDBG::tStatus2* s)
{
   return getG1_Write_Switch(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setG1_Synchronized_Gate(tG1_Synchronized_Gate fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Command::tG1_Synchronized_Gate tTIO::tG1_Command::getG1_Synchronized_Gate(nMDBG::tStatus2*) const
{
   return (tG1_Synchronized_Gate)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tTIO::tG1_Command::writeG1_Synchronized_Gate(tG1_Synchronized_Gate fieldValue, nMDBG::tStatus2* s)
{
   setG1_Synchronized_Gate(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Command::tG1_Synchronized_Gate tTIO::tG1_Command::readG1_Synchronized_Gate(nMDBG::tStatus2* s)
{
   return getG1_Synchronized_Gate(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setG1_Little_Big_Endian(tG1_Little_Big_Endian fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Command::tG1_Little_Big_Endian tTIO::tG1_Command::getG1_Little_Big_Endian(nMDBG::tStatus2*) const
{
   return (tG1_Little_Big_Endian)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tTIO::tG1_Command::writeG1_Little_Big_Endian(tG1_Little_Big_Endian fieldValue, nMDBG::tStatus2* s)
{
   setG1_Little_Big_Endian(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Command::tG1_Little_Big_Endian tTIO::tG1_Command::readG1_Little_Big_Endian(nMDBG::tStatus2* s)
{
   return getG1_Little_Big_Endian(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setG1_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Command::getG1_Bank_Switch_Start(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tTIO::tG1_Command::writeG1_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Bank_Switch_Start(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Command::readG1_Bank_Switch_Start(nMDBG::tStatus2* s)
{
   return getG1_Bank_Switch_Start(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setG1_Bank_Switch_Mode(tG1_Bank_Switch_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Command::tG1_Bank_Switch_Mode tTIO::tG1_Command::getG1_Bank_Switch_Mode(nMDBG::tStatus2*) const
{
   return (tG1_Bank_Switch_Mode)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tTIO::tG1_Command::writeG1_Bank_Switch_Mode(tG1_Bank_Switch_Mode fieldValue, nMDBG::tStatus2* s)
{
   setG1_Bank_Switch_Mode(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Command::tG1_Bank_Switch_Mode tTIO::tG1_Command::readG1_Bank_Switch_Mode(nMDBG::tStatus2* s)
{
   return getG1_Bank_Switch_Mode(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setG1_Bank_Switch_Enable(tG1_Bank_Switch_Enable fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Command::tG1_Bank_Switch_Enable tTIO::tG1_Command::getG1_Bank_Switch_Enable(nMDBG::tStatus2*) const
{
   return (tG1_Bank_Switch_Enable)((_softCopy & ~0xefff) >> 0xc);
}

inline void tTIO::tG1_Command::writeG1_Bank_Switch_Enable(tG1_Bank_Switch_Enable fieldValue, nMDBG::tStatus2* s)
{
   setG1_Bank_Switch_Enable(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Command::tG1_Bank_Switch_Enable tTIO::tG1_Command::readG1_Bank_Switch_Enable(nMDBG::tStatus2* s)
{
   return getG1_Bank_Switch_Enable(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setG0_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Command::getG0_Arm_Copy(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tTIO::tG1_Command::writeG0_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Arm_Copy(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Command::readG0_Arm_Copy(nMDBG::tStatus2* s)
{
   return getG0_Arm_Copy(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setG0_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Command::getG0_Save_Trace_Copy(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tG1_Command::writeG0_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Save_Trace_Copy(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Command::readG0_Save_Trace_Copy(nMDBG::tStatus2* s)
{
   return getG0_Save_Trace_Copy(s);
}

inline tTIO::tG1_Command& tTIO::tG1_Command::setG0_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Command::getG0_Disarm_Copy(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tTIO::tG1_Command::writeG0_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Disarm_Copy(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Command::readG0_Disarm_Copy(nMDBG::tStatus2* s)
{
   return getG0_Disarm_Copy(s);
}

inline void tTIO::tG1_Command::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_Counting_Mode::tG1_Counting_Mode()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_Counting_Mode::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG1_Counting_Mode::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG1_Counting_Mode& tTIO::tG1_Counting_Mode::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_Counting_Mode::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_Counting_Mode::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG1_Counting_Mode::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG1_Counting_Mode::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG1_Counting_Mode& tTIO::tG1_Counting_Mode::setG1_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff8)) | (((u16)fieldValue << 0x0) & ~0xfff8);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Counting_Mode::getG1_Encoder_Counting_Mode(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff8) >> 0x0);
}

inline void tTIO::tG1_Counting_Mode::writeG1_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Encoder_Counting_Mode(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Counting_Mode::readG1_Encoder_Counting_Mode(nMDBG::tStatus2* s)
{
   return getG1_Encoder_Counting_Mode(s);
}

inline tTIO::tG1_Counting_Mode& tTIO::tG1_Counting_Mode::setG1_Index_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Counting_Mode::getG1_Index_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tTIO::tG1_Counting_Mode::writeG1_Index_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Index_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Counting_Mode::readG1_Index_Enable(nMDBG::tStatus2* s)
{
   return getG1_Index_Enable(s);
}

inline tTIO::tG1_Counting_Mode& tTIO::tG1_Counting_Mode::setG1_Index_Phase(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff9f)) | (((u16)fieldValue << 0x5) & ~0xff9f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Counting_Mode::getG1_Index_Phase(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff9f) >> 0x5);
}

inline void tTIO::tG1_Counting_Mode::writeG1_Index_Phase(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Index_Phase(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Counting_Mode::readG1_Index_Phase(nMDBG::tStatus2* s)
{
   return getG1_Index_Phase(s);
}

inline tTIO::tG1_Counting_Mode& tTIO::tG1_Counting_Mode::setG1_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Counting_Mode::getG1_HW_Arm_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tTIO::tG1_Counting_Mode::writeG1_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_HW_Arm_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Counting_Mode::readG1_HW_Arm_Enable(nMDBG::tStatus2* s)
{
   return getG1_HW_Arm_Enable(s);
}

inline tTIO::tG1_Counting_Mode& tTIO::tG1_Counting_Mode::setG1_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf8ff)) | (((u16)fieldValue << 0x8) & ~0xf8ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Counting_Mode::getG1_HW_Arm_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf8ff) >> 0x8);
}

inline void tTIO::tG1_Counting_Mode::writeG1_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_HW_Arm_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Counting_Mode::readG1_HW_Arm_Select(nMDBG::tStatus2* s)
{
   return getG1_HW_Arm_Select(s);
}

inline tTIO::tG1_Counting_Mode& tTIO::tG1_Counting_Mode::setG1_Prescale(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Counting_Mode::getG1_Prescale(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tTIO::tG1_Counting_Mode::writeG1_Prescale(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Prescale(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Counting_Mode::readG1_Prescale(nMDBG::tStatus2* s)
{
   return getG1_Prescale(s);
}

inline tTIO::tG1_Counting_Mode& tTIO::tG1_Counting_Mode::setG1_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Counting_Mode::getG1_Alternate_Synchronization(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tTIO::tG1_Counting_Mode::writeG1_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Alternate_Synchronization(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Counting_Mode::readG1_Alternate_Synchronization(nMDBG::tStatus2* s)
{
   return getG1_Alternate_Synchronization(s);
}

inline tTIO::tG1_Counting_Mode& tTIO::tG1_Counting_Mode::setG1_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Counting_Mode::getG1_Prescale_By_2(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tG1_Counting_Mode::writeG1_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Prescale_By_2(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Counting_Mode::readG1_Prescale_By_2(nMDBG::tStatus2* s)
{
   return getG1_Prescale_By_2(s);
}

inline void tTIO::tG1_Counting_Mode::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_MSeries_Counting_Mode::tG1_MSeries_Counting_Mode()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_MSeries_Counting_Mode::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG1_MSeries_Counting_Mode::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG1_MSeries_Counting_Mode& tTIO::tG1_MSeries_Counting_Mode::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_MSeries_Counting_Mode::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_MSeries_Counting_Mode::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG1_MSeries_Counting_Mode::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG1_MSeries_Counting_Mode::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG1_MSeries_Counting_Mode& tTIO::tG1_MSeries_Counting_Mode::setG1_MSeries_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff8)) | (((u16)fieldValue << 0x0) & ~0xfff8);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_MSeries_Counting_Mode::getG1_MSeries_Encoder_Counting_Mode(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff8) >> 0x0);
}

inline void tTIO::tG1_MSeries_Counting_Mode::writeG1_MSeries_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_MSeries_Encoder_Counting_Mode(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_MSeries_Counting_Mode::readG1_MSeries_Encoder_Counting_Mode(nMDBG::tStatus2* s)
{
   return getG1_MSeries_Encoder_Counting_Mode(s);
}

inline tTIO::tG1_MSeries_Counting_Mode& tTIO::tG1_MSeries_Counting_Mode::setG1_MSeries_Index_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_MSeries_Counting_Mode::getG1_MSeries_Index_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tTIO::tG1_MSeries_Counting_Mode::writeG1_MSeries_Index_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_MSeries_Index_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_MSeries_Counting_Mode::readG1_MSeries_Index_Enable(nMDBG::tStatus2* s)
{
   return getG1_MSeries_Index_Enable(s);
}

inline tTIO::tG1_MSeries_Counting_Mode& tTIO::tG1_MSeries_Counting_Mode::setG1_MSeries_Index_Phase(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff9f)) | (((u16)fieldValue << 0x5) & ~0xff9f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_MSeries_Counting_Mode::getG1_MSeries_Index_Phase(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff9f) >> 0x5);
}

inline void tTIO::tG1_MSeries_Counting_Mode::writeG1_MSeries_Index_Phase(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_MSeries_Index_Phase(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_MSeries_Counting_Mode::readG1_MSeries_Index_Phase(nMDBG::tStatus2* s)
{
   return getG1_MSeries_Index_Phase(s);
}

inline tTIO::tG1_MSeries_Counting_Mode& tTIO::tG1_MSeries_Counting_Mode::setG1_MSeries_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_MSeries_Counting_Mode::getG1_MSeries_HW_Arm_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tTIO::tG1_MSeries_Counting_Mode::writeG1_MSeries_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_MSeries_HW_Arm_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_MSeries_Counting_Mode::readG1_MSeries_HW_Arm_Enable(nMDBG::tStatus2* s)
{
   return getG1_MSeries_HW_Arm_Enable(s);
}

inline tTIO::tG1_MSeries_Counting_Mode& tTIO::tG1_MSeries_Counting_Mode::setG1_MSeries_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xe0ff)) | (((u16)fieldValue << 0x8) & ~0xe0ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_MSeries_Counting_Mode::getG1_MSeries_HW_Arm_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xe0ff) >> 0x8);
}

inline void tTIO::tG1_MSeries_Counting_Mode::writeG1_MSeries_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_MSeries_HW_Arm_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_MSeries_Counting_Mode::readG1_MSeries_HW_Arm_Select(nMDBG::tStatus2* s)
{
   return getG1_MSeries_HW_Arm_Select(s);
}

inline tTIO::tG1_MSeries_Counting_Mode& tTIO::tG1_MSeries_Counting_Mode::setG1_MSeries_Prescale(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_MSeries_Counting_Mode::getG1_MSeries_Prescale(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tTIO::tG1_MSeries_Counting_Mode::writeG1_MSeries_Prescale(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_MSeries_Prescale(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_MSeries_Counting_Mode::readG1_MSeries_Prescale(nMDBG::tStatus2* s)
{
   return getG1_MSeries_Prescale(s);
}

inline tTIO::tG1_MSeries_Counting_Mode& tTIO::tG1_MSeries_Counting_Mode::setG1_MSeries_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_MSeries_Counting_Mode::getG1_MSeries_Alternate_Synchronization(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tG1_MSeries_Counting_Mode::writeG1_MSeries_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_MSeries_Alternate_Synchronization(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_MSeries_Counting_Mode::readG1_MSeries_Alternate_Synchronization(nMDBG::tStatus2* s)
{
   return getG1_MSeries_Alternate_Synchronization(s);
}

inline tTIO::tG1_MSeries_Counting_Mode& tTIO::tG1_MSeries_Counting_Mode::setG1_MSeries_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_MSeries_Counting_Mode::getG1_MSeries_Prescale_By_2(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tTIO::tG1_MSeries_Counting_Mode::writeG1_MSeries_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_MSeries_Prescale_By_2(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_MSeries_Counting_Mode::readG1_MSeries_Prescale_By_2(nMDBG::tStatus2* s)
{
   return getG1_MSeries_Prescale_By_2(s);
}

inline void tTIO::tG1_MSeries_Counting_Mode::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_DMA_Control::tG1_DMA_Control()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_DMA_Control::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG1_DMA_Control::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG1_DMA_Control& tTIO::tG1_DMA_Control::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_DMA_Control::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_DMA_Control::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG1_DMA_Control::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG1_DMA_Control::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG1_DMA_Control& tTIO::tG1_DMA_Control::setG1_DMA_Enable(tG1_DMA_Enable fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_DMA_Control::tG1_DMA_Enable tTIO::tG1_DMA_Control::getG1_DMA_Enable(nMDBG::tStatus2*) const
{
   return (tG1_DMA_Enable)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tTIO::tG1_DMA_Control::writeG1_DMA_Enable(tG1_DMA_Enable fieldValue, nMDBG::tStatus2* s)
{
   setG1_DMA_Enable(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_DMA_Control::tG1_DMA_Enable tTIO::tG1_DMA_Control::readG1_DMA_Enable(nMDBG::tStatus2* s)
{
   return getG1_DMA_Enable(s);
}

inline tTIO::tG1_DMA_Control& tTIO::tG1_DMA_Control::setG1_DMA_Output_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_DMA_Control::getG1_DMA_Output_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tTIO::tG1_DMA_Control::writeG1_DMA_Output_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_DMA_Output_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_DMA_Control::readG1_DMA_Output_Enable(nMDBG::tStatus2* s)
{
   return getG1_DMA_Output_Enable(s);
}

inline tTIO::tG1_DMA_Control& tTIO::tG1_DMA_Control::setG1_DMA_Int_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_DMA_Control::getG1_DMA_Int_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tTIO::tG1_DMA_Control::writeG1_DMA_Int_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_DMA_Int_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_DMA_Control::readG1_DMA_Int_Enable(nMDBG::tStatus2* s)
{
   return getG1_DMA_Int_Enable(s);
}

inline void tTIO::tG1_DMA_Control::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_Input_Select::tG1_Input_Select()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_Input_Select::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG1_Input_Select::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG1_Input_Select& tTIO::tG1_Input_Select::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_Input_Select::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_Input_Select::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG1_Input_Select::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG1_Input_Select::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG1_Input_Select& tTIO::tG1_Input_Select::setG1_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Input_Select::getG1_Read_Acknowledges_Irq(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tTIO::tG1_Input_Select::writeG1_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Read_Acknowledges_Irq(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Input_Select::readG1_Read_Acknowledges_Irq(nMDBG::tStatus2* s)
{
   return getG1_Read_Acknowledges_Irq(s);
}

inline tTIO::tG1_Input_Select& tTIO::tG1_Input_Select::setG1_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Input_Select::getG1_Write_Acknowledges_Irq(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tTIO::tG1_Input_Select::writeG1_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Write_Acknowledges_Irq(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Input_Select::readG1_Write_Acknowledges_Irq(nMDBG::tStatus2* s)
{
   return getG1_Write_Acknowledges_Irq(s);
}

inline tTIO::tG1_Input_Select& tTIO::tG1_Input_Select::setG1_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff83)) | (((u16)fieldValue << 0x2) & ~0xff83);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Input_Select::getG1_Source_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff83) >> 0x2);
}

inline void tTIO::tG1_Input_Select::writeG1_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Source_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Input_Select::readG1_Source_Select(nMDBG::tStatus2* s)
{
   return getG1_Source_Select(s);
}

inline tTIO::tG1_Input_Select& tTIO::tG1_Input_Select::setG1_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf07f)) | (((u16)fieldValue << 0x7) & ~0xf07f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Input_Select::getG1_Gate_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf07f) >> 0x7);
}

inline void tTIO::tG1_Input_Select::writeG1_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Gate_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Input_Select::readG1_Gate_Select(nMDBG::tStatus2* s)
{
   return getG1_Gate_Select(s);
}

inline tTIO::tG1_Input_Select& tTIO::tG1_Input_Select::setG1_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Input_Select::getG1_Gate_Select_Load_Source(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tTIO::tG1_Input_Select::writeG1_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Gate_Select_Load_Source(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Input_Select::readG1_Gate_Select_Load_Source(nMDBG::tStatus2* s)
{
   return getG1_Gate_Select_Load_Source(s);
}

inline tTIO::tG1_Input_Select& tTIO::tG1_Input_Select::setG1_OR_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Input_Select::getG1_OR_Gate(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tTIO::tG1_Input_Select::writeG1_OR_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_OR_Gate(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Input_Select::readG1_OR_Gate(nMDBG::tStatus2* s)
{
   return getG1_OR_Gate(s);
}

inline tTIO::tG1_Input_Select& tTIO::tG1_Input_Select::setG1_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Input_Select::getG1_Output_Polarity(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tG1_Input_Select::writeG1_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Output_Polarity(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Input_Select::readG1_Output_Polarity(nMDBG::tStatus2* s)
{
   return getG1_Output_Polarity(s);
}

inline tTIO::tG1_Input_Select& tTIO::tG1_Input_Select::setG1_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Input_Select::getG1_Source_Polarity(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tTIO::tG1_Input_Select::writeG1_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Source_Polarity(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Input_Select::readG1_Source_Polarity(nMDBG::tStatus2* s)
{
   return getG1_Source_Polarity(s);
}

inline void tTIO::tG1_Input_Select::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_Load_A::tG1_Load_A()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_Load_A::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG1_Load_A::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG1_Load_A& tTIO::tG1_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tTIO::tG1_Load_A::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_Load_A::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tTIO::tG1_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tTIO::tG1_Load_A::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG1_Load_A& tTIO::tG1_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tTIO::tG1_Load_A::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tTIO::tG1_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tTIO::tG1_Load_A::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tTIO::tG1_Load_A::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_Load_B::tG1_Load_B()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_Load_B::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG1_Load_B::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG1_Load_B& tTIO::tG1_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tTIO::tG1_Load_B::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_Load_B::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tTIO::tG1_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tTIO::tG1_Load_B::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG1_Load_B& tTIO::tG1_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tTIO::tG1_Load_B::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tTIO::tG1_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tTIO::tG1_Load_B::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tTIO::tG1_Load_B::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_Mode::tG1_Mode()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_Mode::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG1_Mode::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG1_Mode& tTIO::tG1_Mode::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_Mode::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_Mode::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG1_Mode::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG1_Mode::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG1_Mode& tTIO::tG1_Mode::setG1_Gating_Mode(tG1_Gating_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffc)) | (((u16)fieldValue << 0x0) & ~0xfffc);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Mode::tG1_Gating_Mode tTIO::tG1_Mode::getG1_Gating_Mode(nMDBG::tStatus2*) const
{
   return (tG1_Gating_Mode)((_softCopy & ~0xfffc) >> 0x0);
}

inline void tTIO::tG1_Mode::writeG1_Gating_Mode(tG1_Gating_Mode fieldValue, nMDBG::tStatus2* s)
{
   setG1_Gating_Mode(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Mode::tG1_Gating_Mode tTIO::tG1_Mode::readG1_Gating_Mode(nMDBG::tStatus2* s)
{
   return getG1_Gating_Mode(s);
}

inline tTIO::tG1_Mode& tTIO::tG1_Mode::setG1_Gate_On_Both_Edges(tG1_Gate_On_Both_Edges fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Mode::tG1_Gate_On_Both_Edges tTIO::tG1_Mode::getG1_Gate_On_Both_Edges(nMDBG::tStatus2*) const
{
   return (tG1_Gate_On_Both_Edges)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tTIO::tG1_Mode::writeG1_Gate_On_Both_Edges(tG1_Gate_On_Both_Edges fieldValue, nMDBG::tStatus2* s)
{
   setG1_Gate_On_Both_Edges(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Mode::tG1_Gate_On_Both_Edges tTIO::tG1_Mode::readG1_Gate_On_Both_Edges(nMDBG::tStatus2* s)
{
   return getG1_Gate_On_Both_Edges(s);
}

inline tTIO::tG1_Mode& tTIO::tG1_Mode::setG1_Trigger_Mode_For_Edge_Gate(tG1_Trigger_Mode_For_Edge_Gate fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe7)) | (((u16)fieldValue << 0x3) & ~0xffe7);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Mode::tG1_Trigger_Mode_For_Edge_Gate tTIO::tG1_Mode::getG1_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2*) const
{
   return (tG1_Trigger_Mode_For_Edge_Gate)((_softCopy & ~0xffe7) >> 0x3);
}

inline void tTIO::tG1_Mode::writeG1_Trigger_Mode_For_Edge_Gate(tG1_Trigger_Mode_For_Edge_Gate fieldValue, nMDBG::tStatus2* s)
{
   setG1_Trigger_Mode_For_Edge_Gate(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Mode::tG1_Trigger_Mode_For_Edge_Gate tTIO::tG1_Mode::readG1_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2* s)
{
   return getG1_Trigger_Mode_For_Edge_Gate(s);
}

inline tTIO::tG1_Mode& tTIO::tG1_Mode::setG1_Stop_Mode(tG1_Stop_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff9f)) | (((u16)fieldValue << 0x5) & ~0xff9f);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Mode::tG1_Stop_Mode tTIO::tG1_Mode::getG1_Stop_Mode(nMDBG::tStatus2*) const
{
   return (tG1_Stop_Mode)((_softCopy & ~0xff9f) >> 0x5);
}

inline void tTIO::tG1_Mode::writeG1_Stop_Mode(tG1_Stop_Mode fieldValue, nMDBG::tStatus2* s)
{
   setG1_Stop_Mode(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Mode::tG1_Stop_Mode tTIO::tG1_Mode::readG1_Stop_Mode(nMDBG::tStatus2* s)
{
   return getG1_Stop_Mode(s);
}

inline tTIO::tG1_Mode& tTIO::tG1_Mode::setG1_Load_Source_Select(tG1_Load_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Mode::tG1_Load_Source_Select tTIO::tG1_Mode::getG1_Load_Source_Select(nMDBG::tStatus2*) const
{
   return (tG1_Load_Source_Select)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tTIO::tG1_Mode::writeG1_Load_Source_Select(tG1_Load_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   setG1_Load_Source_Select(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Mode::tG1_Load_Source_Select tTIO::tG1_Mode::readG1_Load_Source_Select(nMDBG::tStatus2* s)
{
   return getG1_Load_Source_Select(s);
}

inline tTIO::tG1_Mode& tTIO::tG1_Mode::setG1_Output_Mode(tG1_Output_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfcff)) | (((u16)fieldValue << 0x8) & ~0xfcff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Mode::tG1_Output_Mode tTIO::tG1_Mode::getG1_Output_Mode(nMDBG::tStatus2*) const
{
   return (tG1_Output_Mode)((_softCopy & ~0xfcff) >> 0x8);
}

inline void tTIO::tG1_Mode::writeG1_Output_Mode(tG1_Output_Mode fieldValue, nMDBG::tStatus2* s)
{
   setG1_Output_Mode(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Mode::tG1_Output_Mode tTIO::tG1_Mode::readG1_Output_Mode(nMDBG::tStatus2* s)
{
   return getG1_Output_Mode(s);
}

inline tTIO::tG1_Mode& tTIO::tG1_Mode::setG1_Counting_Once(tG1_Counting_Once fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf3ff)) | (((u16)fieldValue << 0xa) & ~0xf3ff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Mode::tG1_Counting_Once tTIO::tG1_Mode::getG1_Counting_Once(nMDBG::tStatus2*) const
{
   return (tG1_Counting_Once)((_softCopy & ~0xf3ff) >> 0xa);
}

inline void tTIO::tG1_Mode::writeG1_Counting_Once(tG1_Counting_Once fieldValue, nMDBG::tStatus2* s)
{
   setG1_Counting_Once(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Mode::tG1_Counting_Once tTIO::tG1_Mode::readG1_Counting_Once(nMDBG::tStatus2* s)
{
   return getG1_Counting_Once(s);
}

inline tTIO::tG1_Mode& tTIO::tG1_Mode::setG1_Loading_On_TC(tG1_Loading_On_TC fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Mode::tG1_Loading_On_TC tTIO::tG1_Mode::getG1_Loading_On_TC(nMDBG::tStatus2*) const
{
   return (tG1_Loading_On_TC)((_softCopy & ~0xefff) >> 0xc);
}

inline void tTIO::tG1_Mode::writeG1_Loading_On_TC(tG1_Loading_On_TC fieldValue, nMDBG::tStatus2* s)
{
   setG1_Loading_On_TC(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Mode::tG1_Loading_On_TC tTIO::tG1_Mode::readG1_Loading_On_TC(nMDBG::tStatus2* s)
{
   return getG1_Loading_On_TC(s);
}

inline tTIO::tG1_Mode& tTIO::tG1_Mode::setG1_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Mode::getG1_Gate_Polarity(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tTIO::tG1_Mode::writeG1_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Gate_Polarity(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Mode::readG1_Gate_Polarity(nMDBG::tStatus2* s)
{
   return getG1_Gate_Polarity(s);
}

inline tTIO::tG1_Mode& tTIO::tG1_Mode::setG1_Loading_On_Gate(tG1_Loading_On_Gate fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Mode::tG1_Loading_On_Gate tTIO::tG1_Mode::getG1_Loading_On_Gate(nMDBG::tStatus2*) const
{
   return (tG1_Loading_On_Gate)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tG1_Mode::writeG1_Loading_On_Gate(tG1_Loading_On_Gate fieldValue, nMDBG::tStatus2* s)
{
   setG1_Loading_On_Gate(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Mode::tG1_Loading_On_Gate tTIO::tG1_Mode::readG1_Loading_On_Gate(nMDBG::tStatus2* s)
{
   return getG1_Loading_On_Gate(s);
}

inline tTIO::tG1_Mode& tTIO::tG1_Mode::setG1_Reload_Source_Switching(tG1_Reload_Source_Switching fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline tTIO::tG1_Mode::tG1_Reload_Source_Switching tTIO::tG1_Mode::getG1_Reload_Source_Switching(nMDBG::tStatus2*) const
{
   return (tG1_Reload_Source_Switching)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tTIO::tG1_Mode::writeG1_Reload_Source_Switching(tG1_Reload_Source_Switching fieldValue, nMDBG::tStatus2* s)
{
   setG1_Reload_Source_Switching(fieldValue, s);
   flush(s);
}
inline tTIO::tG1_Mode::tG1_Reload_Source_Switching tTIO::tG1_Mode::readG1_Reload_Source_Switching(nMDBG::tStatus2* s)
{
   return getG1_Reload_Source_Switching(s);
}

inline void tTIO::tG1_Mode::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_Second_Gate::tG1_Second_Gate()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_Second_Gate::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG1_Second_Gate::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG1_Second_Gate& tTIO::tG1_Second_Gate::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_Second_Gate::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_Second_Gate::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG1_Second_Gate::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG1_Second_Gate::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG1_Second_Gate& tTIO::tG1_Second_Gate::setG1_Second_Gate_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Second_Gate::getG1_Second_Gate_Gating_Mode(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tTIO::tG1_Second_Gate::writeG1_Second_Gate_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Second_Gate_Gating_Mode(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Second_Gate::readG1_Second_Gate_Gating_Mode(nMDBG::tStatus2* s)
{
   return getG1_Second_Gate_Gating_Mode(s);
}

inline tTIO::tG1_Second_Gate& tTIO::tG1_Second_Gate::setG1_Second_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf07f)) | (((u16)fieldValue << 0x7) & ~0xf07f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Second_Gate::getG1_Second_Gate_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf07f) >> 0x7);
}

inline void tTIO::tG1_Second_Gate::writeG1_Second_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Second_Gate_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Second_Gate::readG1_Second_Gate_Select(nMDBG::tStatus2* s)
{
   return getG1_Second_Gate_Select(s);
}

inline tTIO::tG1_Second_Gate& tTIO::tG1_Second_Gate::setG1_Second_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Second_Gate::getG1_Second_Gate_Polarity(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tTIO::tG1_Second_Gate::writeG1_Second_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Second_Gate_Polarity(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Second_Gate::readG1_Second_Gate_Polarity(nMDBG::tStatus2* s)
{
   return getG1_Second_Gate_Polarity(s);
}

inline tTIO::tG1_Second_Gate& tTIO::tG1_Second_Gate::setG1_MSeries_Second_Gate_SubSelect(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Second_Gate::getG1_MSeries_Second_Gate_SubSelect(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tG1_Second_Gate::writeG1_MSeries_Second_Gate_SubSelect(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_MSeries_Second_Gate_SubSelect(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Second_Gate::readG1_MSeries_Second_Gate_SubSelect(nMDBG::tStatus2* s)
{
   return getG1_MSeries_Second_Gate_SubSelect(s);
}

inline tTIO::tG1_Second_Gate& tTIO::tG1_Second_Gate::setG1_MSeries_Source_SubSelect(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Second_Gate::getG1_MSeries_Source_SubSelect(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tTIO::tG1_Second_Gate::writeG1_MSeries_Source_SubSelect(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_MSeries_Source_SubSelect(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_Second_Gate::readG1_MSeries_Source_SubSelect(nMDBG::tStatus2* s)
{
   return getG1_MSeries_Source_SubSelect(s);
}

inline void tTIO::tG1_Second_Gate::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_MSeries_ABZ::tG1_MSeries_ABZ()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_MSeries_ABZ::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tG1_MSeries_ABZ::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tG1_MSeries_ABZ& tTIO::tG1_MSeries_ABZ::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_MSeries_ABZ::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_MSeries_ABZ::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tG1_MSeries_ABZ::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tG1_MSeries_ABZ::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tG1_MSeries_ABZ& tTIO::tG1_MSeries_ABZ::setG1_Z_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_MSeries_ABZ::getG1_Z_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tTIO::tG1_MSeries_ABZ::writeG1_Z_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Z_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_MSeries_ABZ::readG1_Z_Select(nMDBG::tStatus2* s)
{
   return getG1_Z_Select(s);
}

inline tTIO::tG1_MSeries_ABZ& tTIO::tG1_MSeries_ABZ::setG1_B_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfc1f)) | (((u16)fieldValue << 0x5) & ~0xfc1f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_MSeries_ABZ::getG1_B_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfc1f) >> 0x5);
}

inline void tTIO::tG1_MSeries_ABZ::writeG1_B_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_B_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_MSeries_ABZ::readG1_B_Select(nMDBG::tStatus2* s)
{
   return getG1_B_Select(s);
}

inline tTIO::tG1_MSeries_ABZ& tTIO::tG1_MSeries_ABZ::setG1_A_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x83ff)) | (((u16)fieldValue << 0xa) & ~0x83ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_MSeries_ABZ::getG1_A_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x83ff) >> 0xa);
}

inline void tTIO::tG1_MSeries_ABZ::writeG1_A_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_A_Select(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tG1_MSeries_ABZ::readG1_A_Select(nMDBG::tStatus2* s)
{
   return getG1_A_Select(s);
}

inline void tTIO::tG1_MSeries_ABZ::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tInterrupt_G0_Ack::tInterrupt_G0_Ack()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tInterrupt_G0_Ack::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tInterrupt_G0_Ack::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tInterrupt_G0_Ack& tTIO::tInterrupt_G0_Ack::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tInterrupt_G0_Ack::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tInterrupt_G0_Ack::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffff3f9f);
}

inline void tTIO::tInterrupt_G0_Ack::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tInterrupt_G0_Ack::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tInterrupt_G0_Ack& tTIO::tInterrupt_G0_Ack::setG0_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tInterrupt_G0_Ack::getG0_Gate_Error_Confirm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tTIO::tInterrupt_G0_Ack::writeG0_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Gate_Error_Confirm(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tInterrupt_G0_Ack::readG0_Gate_Error_Confirm(nMDBG::tStatus2* s)
{
   return getG0_Gate_Error_Confirm(s);
}

inline tTIO::tInterrupt_G0_Ack& tTIO::tInterrupt_G0_Ack::setG0_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tInterrupt_G0_Ack::getG0_TC_Error_Confirm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tTIO::tInterrupt_G0_Ack::writeG0_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_TC_Error_Confirm(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tInterrupt_G0_Ack::readG0_TC_Error_Confirm(nMDBG::tStatus2* s)
{
   return getG0_TC_Error_Confirm(s);
}

inline tTIO::tInterrupt_G0_Ack& tTIO::tInterrupt_G0_Ack::setG0_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tInterrupt_G0_Ack::getG0_TC_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tInterrupt_G0_Ack::writeG0_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_TC_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tInterrupt_G0_Ack::readG0_TC_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getG0_TC_Interrupt_Ack(s);
}

inline tTIO::tInterrupt_G0_Ack& tTIO::tInterrupt_G0_Ack::setG0_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tInterrupt_G0_Ack::getG0_Gate_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tTIO::tInterrupt_G0_Ack::writeG0_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Gate_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tInterrupt_G0_Ack::readG0_Gate_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getG0_Gate_Interrupt_Ack(s);
}

inline void tTIO::tInterrupt_G0_Ack::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tInterrupt_G0_Enable::tInterrupt_G0_Enable()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tInterrupt_G0_Enable::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tInterrupt_G0_Enable::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tInterrupt_G0_Enable& tTIO::tInterrupt_G0_Enable::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tInterrupt_G0_Enable::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tInterrupt_G0_Enable::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tInterrupt_G0_Enable::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tInterrupt_G0_Enable::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tInterrupt_G0_Enable& tTIO::tInterrupt_G0_Enable::setG0_TC_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tInterrupt_G0_Enable::getG0_TC_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tTIO::tInterrupt_G0_Enable::writeG0_TC_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_TC_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tInterrupt_G0_Enable::readG0_TC_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getG0_TC_Interrupt_Enable(s);
}

inline tTIO::tInterrupt_G0_Enable& tTIO::tInterrupt_G0_Enable::setG0_Gate_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tInterrupt_G0_Enable::getG0_Gate_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tTIO::tInterrupt_G0_Enable::writeG0_Gate_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Gate_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tInterrupt_G0_Enable::readG0_Gate_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getG0_Gate_Interrupt_Enable(s);
}

inline void tTIO::tInterrupt_G0_Enable::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tInterrupt_G1_Ack::tInterrupt_G1_Ack()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tInterrupt_G1_Ack::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tInterrupt_G1_Ack::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tInterrupt_G1_Ack& tTIO::tInterrupt_G1_Ack::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tInterrupt_G1_Ack::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tInterrupt_G1_Ack::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffff3ff9);
}

inline void tTIO::tInterrupt_G1_Ack::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tInterrupt_G1_Ack::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tInterrupt_G1_Ack& tTIO::tInterrupt_G1_Ack::setG1_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tInterrupt_G1_Ack::getG1_Gate_Error_Confirm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tTIO::tInterrupt_G1_Ack::writeG1_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Gate_Error_Confirm(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tInterrupt_G1_Ack::readG1_Gate_Error_Confirm(nMDBG::tStatus2* s)
{
   return getG1_Gate_Error_Confirm(s);
}

inline tTIO::tInterrupt_G1_Ack& tTIO::tInterrupt_G1_Ack::setG1_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tInterrupt_G1_Ack::getG1_TC_Error_Confirm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tTIO::tInterrupt_G1_Ack::writeG1_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_TC_Error_Confirm(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tInterrupt_G1_Ack::readG1_TC_Error_Confirm(nMDBG::tStatus2* s)
{
   return getG1_TC_Error_Confirm(s);
}

inline tTIO::tInterrupt_G1_Ack& tTIO::tInterrupt_G1_Ack::setG1_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tInterrupt_G1_Ack::getG1_TC_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tTIO::tInterrupt_G1_Ack::writeG1_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_TC_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tInterrupt_G1_Ack::readG1_TC_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getG1_TC_Interrupt_Ack(s);
}

inline tTIO::tInterrupt_G1_Ack& tTIO::tInterrupt_G1_Ack::setG1_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tInterrupt_G1_Ack::getG1_Gate_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tTIO::tInterrupt_G1_Ack::writeG1_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Gate_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tInterrupt_G1_Ack::readG1_Gate_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getG1_Gate_Interrupt_Ack(s);
}

inline void tTIO::tInterrupt_G1_Ack::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tInterrupt_G1_Enable::tInterrupt_G1_Enable()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tInterrupt_G1_Enable::registerMap(void)
{
   return _TIO;
}

inline void tTIO::tInterrupt_G1_Enable::flushBus(nMDBG::tStatus2* s)
{
   _TIO->flushBus(s);
}

inline tTIO::tInterrupt_G1_Enable& tTIO::tInterrupt_G1_Enable::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tInterrupt_G1_Enable::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tInterrupt_G1_Enable::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tTIO::tInterrupt_G1_Enable::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tTIO::tInterrupt_G1_Enable::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tTIO::tInterrupt_G1_Enable& tTIO::tInterrupt_G1_Enable::setG1_TC_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tInterrupt_G1_Enable::getG1_TC_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tTIO::tInterrupt_G1_Enable::writeG1_TC_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_TC_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tInterrupt_G1_Enable::readG1_TC_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getG1_TC_Interrupt_Enable(s);
}

inline tTIO::tInterrupt_G1_Enable& tTIO::tInterrupt_G1_Enable::setG1_Gate_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tInterrupt_G1_Enable::getG1_Gate_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tTIO::tInterrupt_G1_Enable::writeG1_Gate_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Gate_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline u16 tTIO::tInterrupt_G1_Enable::readG1_Gate_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getG1_Gate_Interrupt_Enable(s);
}

inline void tTIO::tInterrupt_G1_Enable::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_DMA_Status::tG0_DMA_Status()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_DMA_Status::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG0_DMA_Status& tTIO::tG0_DMA_Status::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_DMA_Status::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_DMA_Status::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG0_DMA_Status::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG0_DMA_Status& tTIO::tG0_DMA_Status::setG0_DMA_Read_Value(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_DMA_Status::getG0_DMA_Read_Value(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline u16 tTIO::tG0_DMA_Status::readG0_DMA_Read_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_DMA_Read_Value(s);
}

inline tTIO::tG0_DMA_Status& tTIO::tG0_DMA_Status::setG0_DMA_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_DMA_Status::getG0_DMA_Error_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tTIO::tG0_DMA_Status::readG0_DMA_Error_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_DMA_Error_St(s);
}

inline tTIO::tG0_DMA_Status& tTIO::tG0_DMA_Status::setG0_DRQ_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_DMA_Status::getG0_DRQ_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tTIO::tG0_DMA_Status::readG0_DRQ_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_DRQ_St(s);
}

inline void tTIO::tG0_DMA_Status::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_HW_Save::tG0_HW_Save()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_HW_Save::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG0_HW_Save& tTIO::tG0_HW_Save::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tTIO::tG0_HW_Save::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_HW_Save::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u32 tTIO::tG0_HW_Save::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG0_HW_Save& tTIO::tG0_HW_Save::setG0_HW_Save_Value(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tTIO::tG0_HW_Save::getG0_HW_Save_Value(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tTIO::tG0_HW_Save::readG0_HW_Save_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_HW_Save_Value(s);
}

inline void tTIO::tG0_HW_Save::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_HW_Save_High::tG0_HW_Save_High()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_HW_Save_High::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG0_HW_Save_High& tTIO::tG0_HW_Save_High::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_HW_Save_High::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_HW_Save_High::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG0_HW_Save_High::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG0_HW_Save_High& tTIO::tG0_HW_Save_High::setG0_HW_Save_High_Value(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x0)) | (((u16)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_HW_Save_High::getG0_HW_Save_High_Value(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 tTIO::tG0_HW_Save_High::readG0_HW_Save_High_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_HW_Save_High_Value(s);
}

inline void tTIO::tG0_HW_Save_High::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_HW_Save_Low::tG0_HW_Save_Low()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_HW_Save_Low::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG0_HW_Save_Low& tTIO::tG0_HW_Save_Low::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_HW_Save_Low::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_HW_Save_Low::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG0_HW_Save_Low::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG0_HW_Save_Low& tTIO::tG0_HW_Save_Low::setG0_HW_Save_Low_Value(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x0)) | (((u16)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_HW_Save_Low::getG0_HW_Save_Low_Value(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 tTIO::tG0_HW_Save_Low::readG0_HW_Save_Low_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_HW_Save_Low_Value(s);
}

inline void tTIO::tG0_HW_Save_Low::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_Save::tG0_Save()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_Save::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG0_Save& tTIO::tG0_Save::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tTIO::tG0_Save::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_Save::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u32 tTIO::tG0_Save::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG0_Save& tTIO::tG0_Save::setG0_Save_Value(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tTIO::tG0_Save::getG0_Save_Value(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tTIO::tG0_Save::readG0_Save_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Save_Value(s);
}

inline void tTIO::tG0_Save::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_Save_High::tG0_Save_High()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_Save_High::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG0_Save_High& tTIO::tG0_Save_High::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_Save_High::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_Save_High::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG0_Save_High::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG0_Save_High& tTIO::tG0_Save_High::setG0_Save_High_Value(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x0)) | (((u16)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Save_High::getG0_Save_High_Value(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 tTIO::tG0_Save_High::readG0_Save_High_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Save_High_Value(s);
}

inline void tTIO::tG0_Save_High::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_Save_Low::tG0_Save_Low()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_Save_Low::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG0_Save_Low& tTIO::tG0_Save_Low::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_Save_Low::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_Save_Low::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG0_Save_Low::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG0_Save_Low& tTIO::tG0_Save_Low::setG0_Save_Low_Value(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x0)) | (((u16)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Save_Low::getG0_Save_Low_Value(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 tTIO::tG0_Save_Low::readG0_Save_Low_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Save_Low_Value(s);
}

inline void tTIO::tG0_Save_Low::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG0_Status_1::tG0_Status_1()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG0_Status_1::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG0_Status_1& tTIO::tG0_Status_1::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG0_Status_1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG0_Status_1::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG0_Status_1::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG0_Status_1& tTIO::tG0_Status_1::setG0_Gate_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Status_1::getG0_Gate_Interrupt_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline u16 tTIO::tG0_Status_1::readG0_Gate_Interrupt_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Gate_Interrupt_St(s);
}

inline tTIO::tG0_Status_1& tTIO::tG0_Status_1::setG0_TC_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Status_1::getG0_TC_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline u16 tTIO::tG0_Status_1::readG0_TC_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_TC_St(s);
}

inline tTIO::tG0_Status_1& tTIO::tG0_Status_1::setG0_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG0_Status_1::getG0_Interrupt_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tTIO::tG0_Status_1::readG0_Interrupt_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Interrupt_St(s);
}

inline void tTIO::tG0_Status_1::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG01_Joint_Status_1::tG01_Joint_Status_1()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG01_Joint_Status_1::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG01_Joint_Status_1& tTIO::tG01_Joint_Status_1::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG01_Joint_Status_1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG01_Joint_Status_1::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG01_Joint_Status_1::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG01_Joint_Status_1& tTIO::tG01_Joint_Status_1::setG0_Bank_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Joint_Status_1::getG0_Bank_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline u16 tTIO::tG01_Joint_Status_1::readG0_Bank_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Bank_St(s);
}

inline tTIO::tG01_Joint_Status_1& tTIO::tG01_Joint_Status_1::setG1_Bank_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Joint_Status_1::getG1_Bank_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline u16 tTIO::tG01_Joint_Status_1::readG1_Bank_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Bank_St(s);
}

inline tTIO::tG01_Joint_Status_1& tTIO::tG01_Joint_Status_1::setG0_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Joint_Status_1::getG0_Gate_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline u16 tTIO::tG01_Joint_Status_1::readG0_Gate_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Gate_St(s);
}

inline tTIO::tG01_Joint_Status_1& tTIO::tG01_Joint_Status_1::setG1_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Joint_Status_1::getG1_Gate_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline u16 tTIO::tG01_Joint_Status_1::readG1_Gate_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Gate_St(s);
}

inline tTIO::tG01_Joint_Status_1& tTIO::tG01_Joint_Status_1::setG01_DIO_Serial_IO_In_Progress_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Joint_Status_1::getG01_DIO_Serial_IO_In_Progress_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline u16 tTIO::tG01_Joint_Status_1::readG01_DIO_Serial_IO_In_Progress_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG01_DIO_Serial_IO_In_Progress_St(s);
}

inline void tTIO::tG01_Joint_Status_1::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG01_Joint_Status_2::tG01_Joint_Status_2()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG01_Joint_Status_2::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG01_Joint_Status_2& tTIO::tG01_Joint_Status_2::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG01_Joint_Status_2::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG01_Joint_Status_2::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG01_Joint_Status_2::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG01_Joint_Status_2& tTIO::tG01_Joint_Status_2::setG0_Output_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Joint_Status_2::getG0_Output_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline u16 tTIO::tG01_Joint_Status_2::readG0_Output_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Output_St(s);
}

inline tTIO::tG01_Joint_Status_2& tTIO::tG01_Joint_Status_2::setG1_Output_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Joint_Status_2::getG1_Output_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline u16 tTIO::tG01_Joint_Status_2::readG1_Output_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Output_St(s);
}

inline tTIO::tG01_Joint_Status_2& tTIO::tG01_Joint_Status_2::setG0_HW_Save_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Joint_Status_2::getG0_HW_Save_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline u16 tTIO::tG01_Joint_Status_2::readG0_HW_Save_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_HW_Save_St(s);
}

inline tTIO::tG01_Joint_Status_2& tTIO::tG01_Joint_Status_2::setG1_HW_Save_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Joint_Status_2::getG1_HW_Save_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline u16 tTIO::tG01_Joint_Status_2::readG1_HW_Save_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_HW_Save_St(s);
}

inline tTIO::tG01_Joint_Status_2& tTIO::tG01_Joint_Status_2::setG0_Permanent_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Joint_Status_2::getG0_Permanent_Stale_Data_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tTIO::tG01_Joint_Status_2::readG0_Permanent_Stale_Data_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Permanent_Stale_Data_St(s);
}

inline tTIO::tG01_Joint_Status_2& tTIO::tG01_Joint_Status_2::setG1_Permanent_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Joint_Status_2::getG1_Permanent_Stale_Data_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tTIO::tG01_Joint_Status_2::readG1_Permanent_Stale_Data_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Permanent_Stale_Data_St(s);
}

inline void tTIO::tG01_Joint_Status_2::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG01_Status::tG01_Status()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG01_Status::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG01_Status::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG01_Status::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG01_Status::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG0_Save_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG0_Save_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline u16 tTIO::tG01_Status::readG0_Save_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Save_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG1_Save_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG1_Save_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline u16 tTIO::tG01_Status::readG1_Save_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Save_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG0_Counting_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG0_Counting_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline u16 tTIO::tG01_Status::readG0_Counting_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Counting_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG1_Counting_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG1_Counting_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline u16 tTIO::tG01_Status::readG1_Counting_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Counting_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG0_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG0_Next_Load_Source_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline u16 tTIO::tG01_Status::readG0_Next_Load_Source_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Next_Load_Source_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG1_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG1_Next_Load_Source_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline u16 tTIO::tG01_Status::readG1_Next_Load_Source_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Next_Load_Source_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG0_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG0_Stale_Data_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline u16 tTIO::tG01_Status::readG0_Stale_Data_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Stale_Data_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG1_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG1_Stale_Data_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline u16 tTIO::tG01_Status::readG1_Stale_Data_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Stale_Data_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG0_Armed_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG0_Armed_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline u16 tTIO::tG01_Status::readG0_Armed_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Armed_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG1_Armed_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG1_Armed_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline u16 tTIO::tG01_Status::readG1_Armed_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Armed_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG0_No_Load_Between_Gates_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG0_No_Load_Between_Gates_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline u16 tTIO::tG01_Status::readG0_No_Load_Between_Gates_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_No_Load_Between_Gates_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG1_No_Load_Between_Gates_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG1_No_Load_Between_Gates_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline u16 tTIO::tG01_Status::readG1_No_Load_Between_Gates_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_No_Load_Between_Gates_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG0_TC_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG0_TC_Error_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline u16 tTIO::tG01_Status::readG0_TC_Error_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_TC_Error_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG1_TC_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG1_TC_Error_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline u16 tTIO::tG01_Status::readG1_TC_Error_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_TC_Error_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG0_Gate_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG0_Gate_Error_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tTIO::tG01_Status::readG0_Gate_Error_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Gate_Error_St(s);
}

inline tTIO::tG01_Status& tTIO::tG01_Status::setG1_Gate_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG01_Status::getG1_Gate_Error_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tTIO::tG01_Status::readG1_Gate_Error_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Gate_Error_St(s);
}

inline void tTIO::tG01_Status::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_DMA_Status::tG1_DMA_Status()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_DMA_Status::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG1_DMA_Status& tTIO::tG1_DMA_Status::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_DMA_Status::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_DMA_Status::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG1_DMA_Status::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG1_DMA_Status& tTIO::tG1_DMA_Status::setG1_DMA_Read_Value(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_DMA_Status::getG1_DMA_Read_Value(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline u16 tTIO::tG1_DMA_Status::readG1_DMA_Read_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_DMA_Read_Value(s);
}

inline tTIO::tG1_DMA_Status& tTIO::tG1_DMA_Status::setG1_DMA_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_DMA_Status::getG1_DMA_Error_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tTIO::tG1_DMA_Status::readG1_DMA_Error_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_DMA_Error_St(s);
}

inline tTIO::tG1_DMA_Status& tTIO::tG1_DMA_Status::setG1_DRQ_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_DMA_Status::getG1_DRQ_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tTIO::tG1_DMA_Status::readG1_DRQ_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_DRQ_St(s);
}

inline void tTIO::tG1_DMA_Status::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_HW_Save::tG1_HW_Save()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_HW_Save::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG1_HW_Save& tTIO::tG1_HW_Save::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tTIO::tG1_HW_Save::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_HW_Save::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u32 tTIO::tG1_HW_Save::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG1_HW_Save& tTIO::tG1_HW_Save::setG1_HW_Save_Value(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tTIO::tG1_HW_Save::getG1_HW_Save_Value(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tTIO::tG1_HW_Save::readG1_HW_Save_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_HW_Save_Value(s);
}

inline void tTIO::tG1_HW_Save::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_HW_Save_High::tG1_HW_Save_High()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_HW_Save_High::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG1_HW_Save_High& tTIO::tG1_HW_Save_High::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_HW_Save_High::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_HW_Save_High::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG1_HW_Save_High::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG1_HW_Save_High& tTIO::tG1_HW_Save_High::setG1_HW_Save_High_Value(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x0)) | (((u16)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_HW_Save_High::getG1_HW_Save_High_Value(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 tTIO::tG1_HW_Save_High::readG1_HW_Save_High_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_HW_Save_High_Value(s);
}

inline void tTIO::tG1_HW_Save_High::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_HW_Save_Low::tG1_HW_Save_Low()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_HW_Save_Low::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG1_HW_Save_Low& tTIO::tG1_HW_Save_Low::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_HW_Save_Low::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_HW_Save_Low::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG1_HW_Save_Low::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG1_HW_Save_Low& tTIO::tG1_HW_Save_Low::setG1_HW_Save_Low_Value(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x0)) | (((u16)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_HW_Save_Low::getG1_HW_Save_Low_Value(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 tTIO::tG1_HW_Save_Low::readG1_HW_Save_Low_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_HW_Save_Low_Value(s);
}

inline void tTIO::tG1_HW_Save_Low::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_Save::tG1_Save()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_Save::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG1_Save& tTIO::tG1_Save::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tTIO::tG1_Save::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_Save::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u32 tTIO::tG1_Save::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG1_Save& tTIO::tG1_Save::setG1_Save_Value(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tTIO::tG1_Save::getG1_Save_Value(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tTIO::tG1_Save::readG1_Save_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Save_Value(s);
}

inline void tTIO::tG1_Save::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_Save_High::tG1_Save_High()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_Save_High::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG1_Save_High& tTIO::tG1_Save_High::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_Save_High::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_Save_High::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG1_Save_High::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG1_Save_High& tTIO::tG1_Save_High::setG1_Save_High_Value(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x0)) | (((u16)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Save_High::getG1_Save_High_Value(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 tTIO::tG1_Save_High::readG1_Save_High_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Save_High_Value(s);
}

inline void tTIO::tG1_Save_High::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_Save_Low::tG1_Save_Low()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_Save_Low::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG1_Save_Low& tTIO::tG1_Save_Low::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_Save_Low::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_Save_Low::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG1_Save_Low::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG1_Save_Low& tTIO::tG1_Save_Low::setG1_Save_Low_Value(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x0)) | (((u16)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Save_Low::getG1_Save_Low_Value(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 tTIO::tG1_Save_Low::readG1_Save_Low_Value(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Save_Low_Value(s);
}

inline void tTIO::tG1_Save_Low::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

inline tTIO::tG1_Status_1::tG1_Status_1()
{
   _softCopy = 0;
}

inline tTIO* tTIO::tG1_Status_1::registerMap(void)
{
   return _TIO;
}

inline tTIO::tG1_Status_1& tTIO::tG1_Status_1::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tTIO::tG1_Status_1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tTIO::tG1_Status_1::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_TIO->getBusSpaceReference(), kOffset + _TIO->getAddressOffset(s), s);
}

inline u16 tTIO::tG1_Status_1::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tTIO::tG1_Status_1& tTIO::tG1_Status_1::setG1_Gate_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Status_1::getG1_Gate_Interrupt_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline u16 tTIO::tG1_Status_1::readG1_Gate_Interrupt_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Gate_Interrupt_St(s);
}

inline tTIO::tG1_Status_1& tTIO::tG1_Status_1::setG1_TC_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Status_1::getG1_TC_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline u16 tTIO::tG1_Status_1::readG1_TC_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_TC_St(s);
}

inline tTIO::tG1_Status_1& tTIO::tG1_Status_1::setG1_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tTIO::tG1_Status_1::getG1_Interrupt_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tTIO::tG1_Status_1::readG1_Interrupt_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Interrupt_St(s);
}

inline void tTIO::tG1_Status_1::setRegisterMap(tTIO* pTIO)
{
   _TIO = pTIO;
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

