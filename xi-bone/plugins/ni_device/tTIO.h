// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tTIO_h___
#define ___tTIO_h___

// includes
#ifndef ___nimdbg_tStatus2_h___
#include "tStatus2.h"
#endif

#include "osiBus.h"

class tTIO
{
public:
   //---------------------------------------------------------------------------
   // IO Strategies
   //---------------------------------------------------------------------------
   class tReg16IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u16 value,
         nMDBG::tStatus2* statusChain = NULL);
      
      inline u16 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };
   
   class tReg32IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u32 value,
         nMDBG::tStatus2* statusChain = NULL);
      
      inline u32 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };
   
   //---------------------------------------------------------------------------
   // G0_AutoIncrement
   //---------------------------------------------------------------------------
   class tG0_AutoIncrement : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x88,
         kId     = 0
      };
      tG0_AutoIncrement();


      typedef enum {
         kRegisterId                          = 0,
         kDefaultId                           = 1
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG0_AutoIncrement& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_AutoIncrement& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

      inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 read(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_Command
   //---------------------------------------------------------------------------
   class tG0_Command : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xc,
         kId     = 1
      };
      tG0_Command();


      typedef enum {
         kRegisterId                          = 0,
         kG0_ArmId                            = 1,
         kG0_Save_TraceId                     = 2,
         kG0_LoadId                           = 3,
         kG0_DisarmId                         = 5,
         kG0_Up_DownId                        = 6,
         kG0_Write_SwitchId                   = 7,
         kG0_Synchronized_GateId              = 8,
         kG0_Little_Big_EndianId              = 9,
         kG0_Bank_Switch_StartId              = 10,
         kG0_Bank_Switch_ModeId               = 11,
         kG0_Bank_Switch_EnableId             = 12,
         kG1_Arm_CopyId                       = 13,
         kG1_Save_Trace_CopyId                = 14,
         kG1_Disarm_CopyId                    = 15
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG0_Command& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_Command& setG0_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Arm(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Arm(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Command& setG0_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Save_Trace(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Save_Trace(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Command& setG0_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Load(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Load(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Command& setG0_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Disarm(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Disarm(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Up_DownSoftware_Down     = 0,
         kG0_Up_DownSoftware_Up       = 1,
         kG0_Up_DownHardware          = 2,
         kG0_Up_DownHardware_Gate     = 3,
      } tG0_Up_Down;
      inline tG0_Command& setG0_Up_Down(tG0_Up_Down fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Up_Down getG0_Up_Down(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Up_Down(tG0_Up_Down fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Up_Down readG0_Up_Down(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Write_SwitchAlways_Load_A     = 0,
         kG0_Write_SwitchInactive_Load     = 1,
      } tG0_Write_Switch;
      inline tG0_Command& setG0_Write_Switch(tG0_Write_Switch fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Write_Switch getG0_Write_Switch(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Write_Switch(tG0_Write_Switch fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Write_Switch readG0_Write_Switch(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Synchronized_GateDisabled          = 0,
         kG0_Synchronized_GateEnabled           = 1,
      } tG0_Synchronized_Gate;
      inline tG0_Command& setG0_Synchronized_Gate(tG0_Synchronized_Gate fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Synchronized_Gate getG0_Synchronized_Gate(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Synchronized_Gate(tG0_Synchronized_Gate fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Synchronized_Gate readG0_Synchronized_Gate(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Little_Big_EndianLow_Register      = 0,
         kG0_Little_Big_EndianHigh_Register     = 1,
      } tG0_Little_Big_Endian;
      inline tG0_Command& setG0_Little_Big_Endian(tG0_Little_Big_Endian fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Little_Big_Endian getG0_Little_Big_Endian(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Little_Big_Endian(tG0_Little_Big_Endian fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Little_Big_Endian readG0_Little_Big_Endian(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Command& setG0_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Bank_Switch_Start(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Bank_Switch_Start(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Bank_Switch_ModeGate              = 0,
         kG0_Bank_Switch_ModeSoftware          = 1,
      } tG0_Bank_Switch_Mode;
      inline tG0_Command& setG0_Bank_Switch_Mode(tG0_Bank_Switch_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Bank_Switch_Mode getG0_Bank_Switch_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Bank_Switch_Mode(tG0_Bank_Switch_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Bank_Switch_Mode readG0_Bank_Switch_Mode(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Bank_Switch_EnableBank_X            = 0,
         kG0_Bank_Switch_EnableBank_Y            = 1,
      } tG0_Bank_Switch_Enable;
      inline tG0_Command& setG0_Bank_Switch_Enable(tG0_Bank_Switch_Enable fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Bank_Switch_Enable getG0_Bank_Switch_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Bank_Switch_Enable(tG0_Bank_Switch_Enable fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Bank_Switch_Enable readG0_Bank_Switch_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Command& setG1_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Arm_Copy(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Arm_Copy(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Command& setG1_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Save_Trace_Copy(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Save_Trace_Copy(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Command& setG1_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Disarm_Copy(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Disarm_Copy(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_Counting_Mode
   //---------------------------------------------------------------------------
   class tG0_Counting_Mode : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xb0,
         kId     = 2
      };
      tG0_Counting_Mode();


      typedef enum {
         kRegisterId                          = 0,
         kG0_Encoder_Counting_ModeId          = 1,
         kG0_Index_EnableId                   = 3,
         kG0_Index_PhaseId                    = 4,
         kG0_HW_Arm_EnableId                  = 5,
         kG0_HW_Arm_SelectId                  = 6,
         kG0_PrescaleId                       = 8,
         kG0_Alternate_SynchronizationId      = 9,
         kG0_Prescale_By_2Id                  = 10
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG0_Counting_Mode& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_Counting_Mode& setG0_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Encoder_Counting_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Encoder_Counting_Mode(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Counting_Mode& setG0_Index_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Index_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Index_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Index_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Counting_Mode& setG0_Index_Phase(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Index_Phase(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Index_Phase(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Index_Phase(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Counting_Mode& setG0_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_HW_Arm_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_HW_Arm_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Counting_Mode& setG0_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_HW_Arm_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_HW_Arm_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Counting_Mode& setG0_Prescale(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Prescale(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Prescale(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Prescale(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Counting_Mode& setG0_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Alternate_Synchronization(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Alternate_Synchronization(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Counting_Mode& setG0_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Prescale_By_2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Prescale_By_2(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_MSeries_Counting_Mode
   //---------------------------------------------------------------------------
   class tG0_MSeries_Counting_Mode : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xb0,
         kId     = 3
      };
      tG0_MSeries_Counting_Mode();


      typedef enum {
         kRegisterId                          = 0,
         kG0_MSeries_Encoder_Counting_ModeId  = 1,
         kG0_MSeries_Index_EnableId           = 3,
         kG0_MSeries_Index_PhaseId            = 4,
         kG0_MSeries_HW_Arm_EnableId          = 5,
         kG0_MSeries_HW_Arm_SelectId          = 6,
         kG0_MSeries_PrescaleId               = 7,
         kG0_MSeries_Alternate_SynchronizationId      = 8,
         kG0_MSeries_Prescale_By_2Id          = 9
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG0_MSeries_Counting_Mode& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_MSeries_Counting_Mode& setG0_MSeries_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_MSeries_Encoder_Counting_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_MSeries_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_MSeries_Encoder_Counting_Mode(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_MSeries_Counting_Mode& setG0_MSeries_Index_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_MSeries_Index_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_MSeries_Index_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_MSeries_Index_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_MSeries_Counting_Mode& setG0_MSeries_Index_Phase(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_MSeries_Index_Phase(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_MSeries_Index_Phase(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_MSeries_Index_Phase(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_MSeries_Counting_Mode& setG0_MSeries_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_MSeries_HW_Arm_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_MSeries_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_MSeries_HW_Arm_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_MSeries_Counting_Mode& setG0_MSeries_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_MSeries_HW_Arm_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_MSeries_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_MSeries_HW_Arm_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_MSeries_Counting_Mode& setG0_MSeries_Prescale(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_MSeries_Prescale(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_MSeries_Prescale(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_MSeries_Prescale(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_MSeries_Counting_Mode& setG0_MSeries_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_MSeries_Alternate_Synchronization(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_MSeries_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_MSeries_Alternate_Synchronization(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_MSeries_Counting_Mode& setG0_MSeries_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_MSeries_Prescale_By_2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_MSeries_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_MSeries_Prescale_By_2(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_DMA_Control
   //---------------------------------------------------------------------------
   class tG0_DMA_Control : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xb8,
         kId     = 4
      };
      tG0_DMA_Control();


      typedef enum {
         kRegisterId                          = 0,
         kG0_DMA_EnableId                     = 1,
         kG0_DMA_Output_EnableId              = 2,
         kG0_DMA_Int_EnableId                 = 3
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG0_DMA_Control& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      typedef enum {
         kG0_DMA_EnableRead              = 0,
         kG0_DMA_EnableWrite             = 1,
      } tG0_DMA_Enable;
      inline tG0_DMA_Control& setG0_DMA_Enable(tG0_DMA_Enable fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_DMA_Enable getG0_DMA_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_DMA_Enable(tG0_DMA_Enable fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_DMA_Enable readG0_DMA_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_DMA_Control& setG0_DMA_Output_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_DMA_Output_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_DMA_Output_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_DMA_Output_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_DMA_Control& setG0_DMA_Int_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_DMA_Int_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_DMA_Int_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_DMA_Int_Enable(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_Input_Select
   //---------------------------------------------------------------------------
   class tG0_Input_Select : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x48,
         kId     = 5
      };
      tG0_Input_Select();


      typedef enum {
         kRegisterId                          = 0,
         kG0_Read_Acknowledges_IrqId          = 1,
         kG0_Write_Acknowledges_IrqId         = 2,
         kG0_Source_SelectId                  = 3,
         kG0_Gate_SelectId                    = 4,
         kG0_Gate_Select_Load_SourceId        = 5,
         kG0_OR_GateId                        = 6,
         kG0_Output_PolarityId                = 7,
         kG0_Source_PolarityId                = 8
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG0_Input_Select& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_Input_Select& setG0_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Read_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Read_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Input_Select& setG0_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Write_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Write_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Input_Select& setG0_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Source_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Input_Select& setG0_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Gate_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Gate_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Input_Select& setG0_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Gate_Select_Load_Source(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Gate_Select_Load_Source(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Input_Select& setG0_OR_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_OR_Gate(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_OR_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_OR_Gate(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Input_Select& setG0_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Output_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Output_Polarity(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Input_Select& setG0_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Source_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Source_Polarity(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_Load_A
   //---------------------------------------------------------------------------
   class tG0_Load_A : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x38,
         kId     = 6
      };
      tG0_Load_A();


      typedef enum {
         kRegisterId                          = 0,
         kDefaultId                           = 1
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG0_Load_A& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_Load_A& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

      inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 read(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_Load_B
   //---------------------------------------------------------------------------
   class tG0_Load_B : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x3c,
         kId     = 7
      };
      tG0_Load_B();


      typedef enum {
         kRegisterId                          = 0,
         kDefaultId                           = 1
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG0_Load_B& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_Load_B& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

      inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 read(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_Mode
   //---------------------------------------------------------------------------
   class tG0_Mode : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x34,
         kId     = 8
      };
      tG0_Mode();


      typedef enum {
         kRegisterId                          = 0,
         kG0_Gating_ModeId                    = 1,
         kG0_Gate_On_Both_EdgesId             = 2,
         kG0_Trigger_Mode_For_Edge_GateId     = 3,
         kG0_Stop_ModeId                      = 4,
         kG0_Load_Source_SelectId             = 5,
         kG0_Output_ModeId                    = 6,
         kG0_Counting_OnceId                  = 7,
         kG0_Loading_On_TCId                  = 8,
         kG0_Gate_PolarityId                  = 9,
         kG0_Loading_On_GateId                = 10,
         kG0_Reload_Source_SwitchingId        = 11
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG0_Mode& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      typedef enum {
         kG0_Gating_ModeGating_Disabled   = 0,
         kG0_Gating_ModeLevel_Gating      = 1,
         kG0_Gating_ModeEdge_Gating_Active_High         = 2,
         kG0_Gating_ModeEdge_Gating_Active_Low        = 3,
      } tG0_Gating_Mode;
      inline tG0_Mode& setG0_Gating_Mode(tG0_Gating_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Gating_Mode getG0_Gating_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Gating_Mode(tG0_Gating_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Gating_Mode readG0_Gating_Mode(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Gate_On_Both_EdgesBoth_Edges_Disabled     = 0,
         kG0_Gate_On_Both_EdgesBoth_Edges_Enabled    = 1,
      } tG0_Gate_On_Both_Edges;
      inline tG0_Mode& setG0_Gate_On_Both_Edges(tG0_Gate_On_Both_Edges fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Gate_On_Both_Edges getG0_Gate_On_Both_Edges(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Gate_On_Both_Edges(tG0_Gate_On_Both_Edges fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Gate_On_Both_Edges readG0_Gate_On_Both_Edges(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Trigger_Mode_For_Edge_GateFirst_Starts_Next_Stops         = 0,
         kG0_Trigger_Mode_For_Edge_GateFirst_Starts_Next_Starts          = 1,
         kG0_Trigger_Mode_For_Edge_GateGate_Starts_TC_Stops      = 2,
         kG0_Trigger_Mode_For_Edge_GateGate_Does_Not_Stop    = 3,
      } tG0_Trigger_Mode_For_Edge_Gate;
      inline tG0_Mode& setG0_Trigger_Mode_For_Edge_Gate(tG0_Trigger_Mode_For_Edge_Gate fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Trigger_Mode_For_Edge_Gate getG0_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Trigger_Mode_For_Edge_Gate(tG0_Trigger_Mode_For_Edge_Gate fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Trigger_Mode_For_Edge_Gate readG0_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Stop_ModeStop_On_Gate      = 0,
         kG0_Stop_ModeStop_On_Gate_Or_First_TC          = 1,
         kG0_Stop_ModeStop_On_Gate_Or_Second_TC           = 2,
         kG0_Stop_ModeStop_Mode_Reserved    = 3,
      } tG0_Stop_Mode;
      inline tG0_Mode& setG0_Stop_Mode(tG0_Stop_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Stop_Mode getG0_Stop_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Stop_Mode(tG0_Stop_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Stop_Mode readG0_Stop_Mode(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Load_Source_SelectLoad_A            = 0,
         kG0_Load_Source_SelectLoad_B            = 1,
      } tG0_Load_Source_Select;
      inline tG0_Mode& setG0_Load_Source_Select(tG0_Load_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Load_Source_Select getG0_Load_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Load_Source_Select(tG0_Load_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Load_Source_Select readG0_Load_Source_Select(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Output_ModeReserved          = 0,
         kG0_Output_ModePulse             = 1,
         kG0_Output_ModeToggle            = 2,
         kG0_Output_ModeToggle_On_TC_Or_Gate      = 3,
      } tG0_Output_Mode;
      inline tG0_Mode& setG0_Output_Mode(tG0_Output_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Output_Mode getG0_Output_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Output_Mode(tG0_Output_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Output_Mode readG0_Output_Mode(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Counting_OnceNo_HW_Disarm      = 0,
         kG0_Counting_OnceDisarm_On_TC      = 1,
         kG0_Counting_OnceDisarm_On_Gate    = 2,
         kG0_Counting_OnceDisarm_On_Gate_Or_TC      = 3,
      } tG0_Counting_Once;
      inline tG0_Mode& setG0_Counting_Once(tG0_Counting_Once fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Counting_Once getG0_Counting_Once(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Counting_Once(tG0_Counting_Once fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Counting_Once readG0_Counting_Once(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Loading_On_TCRollover_On_TC    = 0,
         kG0_Loading_On_TCReload_On_TC      = 1,
      } tG0_Loading_On_TC;
      inline tG0_Mode& setG0_Loading_On_TC(tG0_Loading_On_TC fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Loading_On_TC getG0_Loading_On_TC(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Loading_On_TC(tG0_Loading_On_TC fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Loading_On_TC readG0_Loading_On_TC(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Mode& setG0_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Loading_On_GateNo_Reload         = 0,
         kG0_Loading_On_GateReload_On_Stop_Gate     = 1,
      } tG0_Loading_On_Gate;
      inline tG0_Mode& setG0_Loading_On_Gate(tG0_Loading_On_Gate fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Loading_On_Gate getG0_Loading_On_Gate(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Loading_On_Gate(tG0_Loading_On_Gate fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Loading_On_Gate readG0_Loading_On_Gate(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG0_Reload_Source_SwitchingUse_Same          = 0,
         kG0_Reload_Source_SwitchingAlternate         = 1,
      } tG0_Reload_Source_Switching;
      inline tG0_Mode& setG0_Reload_Source_Switching(tG0_Reload_Source_Switching fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG0_Reload_Source_Switching getG0_Reload_Source_Switching(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Reload_Source_Switching(tG0_Reload_Source_Switching fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Reload_Source_Switching readG0_Reload_Source_Switching(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_Second_Gate
   //---------------------------------------------------------------------------
   class tG0_Second_Gate : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xb4,
         kId     = 9
      };
      tG0_Second_Gate();


      typedef enum {
         kRegisterId                          = 0,
         kG0_Second_Gate_Gating_ModeId        = 1,
         kG0_Second_Gate_SelectId             = 3,
         kG0_Second_Gate_PolarityId           = 5,
         kG0_MSeries_Second_Gate_SubSelectId  = 6,
         kG0_MSeries_Source_SubSelectId       = 7
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG0_Second_Gate& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_Second_Gate& setG0_Second_Gate_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Second_Gate_Gating_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Second_Gate_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Second_Gate_Gating_Mode(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Second_Gate& setG0_Second_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Second_Gate_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Second_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Second_Gate_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Second_Gate& setG0_Second_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Second_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Second_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Second_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Second_Gate& setG0_MSeries_Second_Gate_SubSelect(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_MSeries_Second_Gate_SubSelect(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_MSeries_Second_Gate_SubSelect(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_MSeries_Second_Gate_SubSelect(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Second_Gate& setG0_MSeries_Source_SubSelect(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_MSeries_Source_SubSelect(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_MSeries_Source_SubSelect(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_MSeries_Source_SubSelect(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_MSeries_ABZ
   //---------------------------------------------------------------------------
   class tG0_MSeries_ABZ : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xc0,
         kId     = 10
      };
      tG0_MSeries_ABZ();


      typedef enum {
         kRegisterId                          = 0,
         kG0_Z_SelectId                       = 1,
         kG0_B_SelectId                       = 2,
         kG0_A_SelectId                       = 3
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG0_MSeries_ABZ& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_MSeries_ABZ& setG0_Z_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Z_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Z_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Z_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_MSeries_ABZ& setG0_B_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_B_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_B_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_B_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_MSeries_ABZ& setG0_A_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_A_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_A_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_A_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G01_Joint_Reset
   //---------------------------------------------------------------------------
   class tG01_Joint_Reset : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x90,
         kId     = 11
      };
      tG01_Joint_Reset();


      typedef enum {
         kRegisterId                          = 0,
         kG0_ResetId                          = 2,
         kG1_ResetId                          = 3
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG01_Joint_Reset& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG01_Joint_Reset& setG0_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Reset(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Reset(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Joint_Reset& setG1_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Reset(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Reset(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_AutoIncrement
   //---------------------------------------------------------------------------
   class tG1_AutoIncrement : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x8a,
         kId     = 12
      };
      tG1_AutoIncrement();


      typedef enum {
         kRegisterId                          = 0,
         kDefaultId                           = 1
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG1_AutoIncrement& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_AutoIncrement& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

      inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 read(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_Command
   //---------------------------------------------------------------------------
   class tG1_Command : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xe,
         kId     = 13
      };
      tG1_Command();


      typedef enum {
         kRegisterId                          = 0,
         kG1_ArmId                            = 1,
         kG1_Save_TraceId                     = 2,
         kG1_LoadId                           = 3,
         kG1_DisarmId                         = 5,
         kG1_Up_DownId                        = 6,
         kG1_Write_SwitchId                   = 7,
         kG1_Synchronized_GateId              = 8,
         kG1_Little_Big_EndianId              = 9,
         kG1_Bank_Switch_StartId              = 10,
         kG1_Bank_Switch_ModeId               = 11,
         kG1_Bank_Switch_EnableId             = 12,
         kG0_Arm_CopyId                       = 13,
         kG0_Save_Trace_CopyId                = 14,
         kG0_Disarm_CopyId                    = 15
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG1_Command& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_Command& setG1_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Arm(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Arm(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Command& setG1_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Save_Trace(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Save_Trace(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Command& setG1_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Load(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Load(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Command& setG1_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Disarm(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Disarm(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Up_DownSoftware_Down     = 0,
         kG1_Up_DownSoftware_Up       = 1,
         kG1_Up_DownHardware          = 2,
         kG1_Up_DownHardware_Gate     = 3,
      } tG1_Up_Down;
      inline tG1_Command& setG1_Up_Down(tG1_Up_Down fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Up_Down getG1_Up_Down(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Up_Down(tG1_Up_Down fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Up_Down readG1_Up_Down(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Write_SwitchAlways_Load_A     = 0,
         kG1_Write_SwitchInactive_Load     = 1,
      } tG1_Write_Switch;
      inline tG1_Command& setG1_Write_Switch(tG1_Write_Switch fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Write_Switch getG1_Write_Switch(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Write_Switch(tG1_Write_Switch fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Write_Switch readG1_Write_Switch(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Synchronized_GateDisabled          = 0,
         kG1_Synchronized_GateEnabled           = 1,
      } tG1_Synchronized_Gate;
      inline tG1_Command& setG1_Synchronized_Gate(tG1_Synchronized_Gate fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Synchronized_Gate getG1_Synchronized_Gate(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Synchronized_Gate(tG1_Synchronized_Gate fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Synchronized_Gate readG1_Synchronized_Gate(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Little_Big_EndianLow_Register      = 0,
         kG1_Little_Big_EndianHigh_Register     = 1,
      } tG1_Little_Big_Endian;
      inline tG1_Command& setG1_Little_Big_Endian(tG1_Little_Big_Endian fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Little_Big_Endian getG1_Little_Big_Endian(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Little_Big_Endian(tG1_Little_Big_Endian fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Little_Big_Endian readG1_Little_Big_Endian(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Command& setG1_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Bank_Switch_Start(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Bank_Switch_Start(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Bank_Switch_ModeGate              = 0,
         kG1_Bank_Switch_ModeSoftware          = 1,
      } tG1_Bank_Switch_Mode;
      inline tG1_Command& setG1_Bank_Switch_Mode(tG1_Bank_Switch_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Bank_Switch_Mode getG1_Bank_Switch_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Bank_Switch_Mode(tG1_Bank_Switch_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Bank_Switch_Mode readG1_Bank_Switch_Mode(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Bank_Switch_EnableBank_X            = 0,
         kG1_Bank_Switch_EnableBank_Y            = 1,
      } tG1_Bank_Switch_Enable;
      inline tG1_Command& setG1_Bank_Switch_Enable(tG1_Bank_Switch_Enable fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Bank_Switch_Enable getG1_Bank_Switch_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Bank_Switch_Enable(tG1_Bank_Switch_Enable fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Bank_Switch_Enable readG1_Bank_Switch_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Command& setG0_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Arm_Copy(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Arm_Copy(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Command& setG0_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Save_Trace_Copy(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Save_Trace_Copy(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Command& setG0_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Disarm_Copy(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Disarm_Copy(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_Counting_Mode
   //---------------------------------------------------------------------------
   class tG1_Counting_Mode : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xb2,
         kId     = 14
      };
      tG1_Counting_Mode();


      typedef enum {
         kRegisterId                          = 0,
         kG1_Encoder_Counting_ModeId          = 1,
         kG1_Index_EnableId                   = 3,
         kG1_Index_PhaseId                    = 4,
         kG1_HW_Arm_EnableId                  = 5,
         kG1_HW_Arm_SelectId                  = 6,
         kG1_PrescaleId                       = 8,
         kG1_Alternate_SynchronizationId      = 9,
         kG1_Prescale_By_2Id                  = 10
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG1_Counting_Mode& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_Counting_Mode& setG1_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Encoder_Counting_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Encoder_Counting_Mode(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Counting_Mode& setG1_Index_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Index_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Index_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Index_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Counting_Mode& setG1_Index_Phase(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Index_Phase(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Index_Phase(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Index_Phase(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Counting_Mode& setG1_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_HW_Arm_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_HW_Arm_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Counting_Mode& setG1_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_HW_Arm_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_HW_Arm_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Counting_Mode& setG1_Prescale(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Prescale(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Prescale(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Prescale(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Counting_Mode& setG1_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Alternate_Synchronization(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Alternate_Synchronization(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Counting_Mode& setG1_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Prescale_By_2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Prescale_By_2(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_MSeries_Counting_Mode
   //---------------------------------------------------------------------------
   class tG1_MSeries_Counting_Mode : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xb2,
         kId     = 15
      };
      tG1_MSeries_Counting_Mode();


      typedef enum {
         kRegisterId                          = 0,
         kG1_MSeries_Encoder_Counting_ModeId  = 1,
         kG1_MSeries_Index_EnableId           = 3,
         kG1_MSeries_Index_PhaseId            = 4,
         kG1_MSeries_HW_Arm_EnableId          = 5,
         kG1_MSeries_HW_Arm_SelectId          = 6,
         kG1_MSeries_PrescaleId               = 7,
         kG1_MSeries_Alternate_SynchronizationId      = 8,
         kG1_MSeries_Prescale_By_2Id          = 9
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG1_MSeries_Counting_Mode& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_MSeries_Counting_Mode& setG1_MSeries_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_MSeries_Encoder_Counting_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_MSeries_Encoder_Counting_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_MSeries_Encoder_Counting_Mode(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_MSeries_Counting_Mode& setG1_MSeries_Index_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_MSeries_Index_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_MSeries_Index_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_MSeries_Index_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_MSeries_Counting_Mode& setG1_MSeries_Index_Phase(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_MSeries_Index_Phase(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_MSeries_Index_Phase(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_MSeries_Index_Phase(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_MSeries_Counting_Mode& setG1_MSeries_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_MSeries_HW_Arm_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_MSeries_HW_Arm_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_MSeries_HW_Arm_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_MSeries_Counting_Mode& setG1_MSeries_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_MSeries_HW_Arm_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_MSeries_HW_Arm_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_MSeries_HW_Arm_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_MSeries_Counting_Mode& setG1_MSeries_Prescale(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_MSeries_Prescale(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_MSeries_Prescale(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_MSeries_Prescale(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_MSeries_Counting_Mode& setG1_MSeries_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_MSeries_Alternate_Synchronization(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_MSeries_Alternate_Synchronization(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_MSeries_Alternate_Synchronization(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_MSeries_Counting_Mode& setG1_MSeries_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_MSeries_Prescale_By_2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_MSeries_Prescale_By_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_MSeries_Prescale_By_2(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_DMA_Control
   //---------------------------------------------------------------------------
   class tG1_DMA_Control : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xba,
         kId     = 16
      };
      tG1_DMA_Control();


      typedef enum {
         kRegisterId                          = 0,
         kG1_DMA_EnableId                     = 1,
         kG1_DMA_Output_EnableId              = 2,
         kG1_DMA_Int_EnableId                 = 3
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG1_DMA_Control& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      typedef enum {
         kG1_DMA_EnableRead              = 0,
         kG1_DMA_EnableWrite             = 1,
      } tG1_DMA_Enable;
      inline tG1_DMA_Control& setG1_DMA_Enable(tG1_DMA_Enable fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_DMA_Enable getG1_DMA_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_DMA_Enable(tG1_DMA_Enable fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_DMA_Enable readG1_DMA_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_DMA_Control& setG1_DMA_Output_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_DMA_Output_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_DMA_Output_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_DMA_Output_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_DMA_Control& setG1_DMA_Int_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_DMA_Int_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_DMA_Int_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_DMA_Int_Enable(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_Input_Select
   //---------------------------------------------------------------------------
   class tG1_Input_Select : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x4a,
         kId     = 17
      };
      tG1_Input_Select();


      typedef enum {
         kRegisterId                          = 0,
         kG1_Read_Acknowledges_IrqId          = 1,
         kG1_Write_Acknowledges_IrqId         = 2,
         kG1_Source_SelectId                  = 3,
         kG1_Gate_SelectId                    = 4,
         kG1_Gate_Select_Load_SourceId        = 5,
         kG1_OR_GateId                        = 6,
         kG1_Output_PolarityId                = 7,
         kG1_Source_PolarityId                = 8
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG1_Input_Select& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_Input_Select& setG1_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Read_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Read_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Input_Select& setG1_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Write_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Write_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Input_Select& setG1_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Source_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Input_Select& setG1_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Gate_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Gate_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Input_Select& setG1_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Gate_Select_Load_Source(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Gate_Select_Load_Source(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Input_Select& setG1_OR_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_OR_Gate(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_OR_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_OR_Gate(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Input_Select& setG1_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Output_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Output_Polarity(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Input_Select& setG1_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Source_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Source_Polarity(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_Load_A
   //---------------------------------------------------------------------------
   class tG1_Load_A : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x40,
         kId     = 18
      };
      tG1_Load_A();


      typedef enum {
         kRegisterId                          = 0,
         kDefaultId                           = 1
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG1_Load_A& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_Load_A& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

      inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 read(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_Load_B
   //---------------------------------------------------------------------------
   class tG1_Load_B : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x44,
         kId     = 19
      };
      tG1_Load_B();


      typedef enum {
         kRegisterId                          = 0,
         kDefaultId                           = 1
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG1_Load_B& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_Load_B& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

      inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u32 read(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_Mode
   //---------------------------------------------------------------------------
   class tG1_Mode : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x36,
         kId     = 20
      };
      tG1_Mode();


      typedef enum {
         kRegisterId                          = 0,
         kG1_Gating_ModeId                    = 1,
         kG1_Gate_On_Both_EdgesId             = 2,
         kG1_Trigger_Mode_For_Edge_GateId     = 3,
         kG1_Stop_ModeId                      = 4,
         kG1_Load_Source_SelectId             = 5,
         kG1_Output_ModeId                    = 6,
         kG1_Counting_OnceId                  = 7,
         kG1_Loading_On_TCId                  = 8,
         kG1_Gate_PolarityId                  = 9,
         kG1_Loading_On_GateId                = 10,
         kG1_Reload_Source_SwitchingId        = 11
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG1_Mode& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      typedef enum {
         kG1_Gating_ModeGating_Disabled   = 0,
         kG1_Gating_ModeLevel_Gating      = 1,
         kG1_Gating_ModeEdge_Gating_Active_High         = 2,
         kG1_Gating_ModeEdge_Gating_Active_Low        = 3,
      } tG1_Gating_Mode;
      inline tG1_Mode& setG1_Gating_Mode(tG1_Gating_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Gating_Mode getG1_Gating_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Gating_Mode(tG1_Gating_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Gating_Mode readG1_Gating_Mode(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Gate_On_Both_EdgesBoth_Edges_Disabled     = 0,
         kG1_Gate_On_Both_EdgesBoth_Edges_Enabled    = 1,
      } tG1_Gate_On_Both_Edges;
      inline tG1_Mode& setG1_Gate_On_Both_Edges(tG1_Gate_On_Both_Edges fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Gate_On_Both_Edges getG1_Gate_On_Both_Edges(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Gate_On_Both_Edges(tG1_Gate_On_Both_Edges fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Gate_On_Both_Edges readG1_Gate_On_Both_Edges(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Trigger_Mode_For_Edge_GateFirst_Starts_Next_Stops         = 0,
         kG1_Trigger_Mode_For_Edge_GateFirst_Starts_Next_Starts          = 1,
         kG1_Trigger_Mode_For_Edge_GateGate_Starts_TC_Stops      = 2,
         kG1_Trigger_Mode_For_Edge_GateGate_Does_Not_Stop    = 3,
      } tG1_Trigger_Mode_For_Edge_Gate;
      inline tG1_Mode& setG1_Trigger_Mode_For_Edge_Gate(tG1_Trigger_Mode_For_Edge_Gate fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Trigger_Mode_For_Edge_Gate getG1_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Trigger_Mode_For_Edge_Gate(tG1_Trigger_Mode_For_Edge_Gate fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Trigger_Mode_For_Edge_Gate readG1_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Stop_ModeStop_On_Gate      = 0,
         kG1_Stop_ModeStop_On_Gate_Or_First_TC          = 1,
         kG1_Stop_ModeStop_On_Gate_Or_Second_TC           = 2,
         kG1_Stop_ModeStop_Mode_Reserved    = 3,
      } tG1_Stop_Mode;
      inline tG1_Mode& setG1_Stop_Mode(tG1_Stop_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Stop_Mode getG1_Stop_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Stop_Mode(tG1_Stop_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Stop_Mode readG1_Stop_Mode(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Load_Source_SelectLoad_A            = 0,
         kG1_Load_Source_SelectLoad_B            = 1,
      } tG1_Load_Source_Select;
      inline tG1_Mode& setG1_Load_Source_Select(tG1_Load_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Load_Source_Select getG1_Load_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Load_Source_Select(tG1_Load_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Load_Source_Select readG1_Load_Source_Select(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Output_ModeReserved          = 0,
         kG1_Output_ModePulse             = 1,
         kG1_Output_ModeToggle            = 2,
         kG1_Output_ModeToggle_On_TC_Or_Gate      = 3,
      } tG1_Output_Mode;
      inline tG1_Mode& setG1_Output_Mode(tG1_Output_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Output_Mode getG1_Output_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Output_Mode(tG1_Output_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Output_Mode readG1_Output_Mode(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Counting_OnceNo_HW_Disarm      = 0,
         kG1_Counting_OnceDisarm_On_TC      = 1,
         kG1_Counting_OnceDisarm_On_Gate    = 2,
         kG1_Counting_OnceDisarm_On_Gate_Or_TC      = 3,
      } tG1_Counting_Once;
      inline tG1_Mode& setG1_Counting_Once(tG1_Counting_Once fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Counting_Once getG1_Counting_Once(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Counting_Once(tG1_Counting_Once fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Counting_Once readG1_Counting_Once(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Loading_On_TCRollover_On_TC    = 0,
         kG1_Loading_On_TCReload_On_TC      = 1,
      } tG1_Loading_On_TC;
      inline tG1_Mode& setG1_Loading_On_TC(tG1_Loading_On_TC fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Loading_On_TC getG1_Loading_On_TC(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Loading_On_TC(tG1_Loading_On_TC fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Loading_On_TC readG1_Loading_On_TC(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Mode& setG1_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Loading_On_GateNo_Reload         = 0,
         kG1_Loading_On_GateReload_On_Stop_Gate     = 1,
      } tG1_Loading_On_Gate;
      inline tG1_Mode& setG1_Loading_On_Gate(tG1_Loading_On_Gate fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Loading_On_Gate getG1_Loading_On_Gate(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Loading_On_Gate(tG1_Loading_On_Gate fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Loading_On_Gate readG1_Loading_On_Gate(nMDBG::tStatus2* statusChain = NULL);

      typedef enum {
         kG1_Reload_Source_SwitchingUse_Same          = 0,
         kG1_Reload_Source_SwitchingAlternate         = 1,
      } tG1_Reload_Source_Switching;
      inline tG1_Mode& setG1_Reload_Source_Switching(tG1_Reload_Source_Switching fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline tG1_Reload_Source_Switching getG1_Reload_Source_Switching(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Reload_Source_Switching(tG1_Reload_Source_Switching fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Reload_Source_Switching readG1_Reload_Source_Switching(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_Second_Gate
   //---------------------------------------------------------------------------
   class tG1_Second_Gate : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xb6,
         kId     = 21
      };
      tG1_Second_Gate();


      typedef enum {
         kRegisterId                          = 0,
         kG1_Second_Gate_Gating_ModeId        = 1,
         kG1_Second_Gate_SelectId             = 3,
         kG1_Second_Gate_PolarityId           = 5,
         kG1_MSeries_Second_Gate_SubSelectId  = 6,
         kG1_MSeries_Source_SubSelectId       = 7
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG1_Second_Gate& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_Second_Gate& setG1_Second_Gate_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Second_Gate_Gating_Mode(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Second_Gate_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Second_Gate_Gating_Mode(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Second_Gate& setG1_Second_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Second_Gate_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Second_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Second_Gate_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Second_Gate& setG1_Second_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Second_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Second_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Second_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Second_Gate& setG1_MSeries_Second_Gate_SubSelect(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_MSeries_Second_Gate_SubSelect(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_MSeries_Second_Gate_SubSelect(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_MSeries_Second_Gate_SubSelect(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Second_Gate& setG1_MSeries_Source_SubSelect(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_MSeries_Source_SubSelect(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_MSeries_Source_SubSelect(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_MSeries_Source_SubSelect(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_MSeries_ABZ
   //---------------------------------------------------------------------------
   class tG1_MSeries_ABZ : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xc2,
         kId     = 22
      };
      tG1_MSeries_ABZ();


      typedef enum {
         kRegisterId                          = 0,
         kG1_Z_SelectId                       = 1,
         kG1_B_SelectId                       = 2,
         kG1_A_SelectId                       = 3
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tG1_MSeries_ABZ& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_MSeries_ABZ& setG1_Z_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Z_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Z_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Z_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_MSeries_ABZ& setG1_B_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_B_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_B_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_B_Select(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_MSeries_ABZ& setG1_A_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_A_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_A_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_A_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // Interrupt_G0_Ack
   //---------------------------------------------------------------------------
   class tInterrupt_G0_Ack : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x4,
         kId     = 23
      };
      tInterrupt_G0_Ack();


      typedef enum {
         kRegisterId                          = 0,
         kG0_Gate_Error_ConfirmId             = 2,
         kG0_TC_Error_ConfirmId               = 3,
         kG0_TC_Interrupt_AckId               = 5,
         kG0_Gate_Interrupt_AckId             = 6
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tInterrupt_G0_Ack& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tInterrupt_G0_Ack& setG0_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Gate_Error_Confirm(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Gate_Error_Confirm(nMDBG::tStatus2* statusChain = NULL);

      inline tInterrupt_G0_Ack& setG0_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL);

      inline tInterrupt_G0_Ack& setG0_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

      inline tInterrupt_G0_Ack& setG0_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Gate_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Gate_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // Interrupt_G0_Enable
   //---------------------------------------------------------------------------
   class tInterrupt_G0_Enable : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x92,
         kId     = 24
      };
      tInterrupt_G0_Enable();


      typedef enum {
         kRegisterId                          = 0,
         kG0_TC_Interrupt_EnableId            = 2,
         kG0_Gate_Interrupt_EnableId          = 4
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tInterrupt_G0_Enable& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tInterrupt_G0_Enable& setG0_TC_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_TC_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tInterrupt_G0_Enable& setG0_Gate_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Gate_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG0_Gate_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG0_Gate_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // Interrupt_G1_Ack
   //---------------------------------------------------------------------------
   class tInterrupt_G1_Ack : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x6,
         kId     = 25
      };
      tInterrupt_G1_Ack();


      typedef enum {
         kRegisterId                          = 0,
         kG1_Gate_Error_ConfirmId             = 2,
         kG1_TC_Error_ConfirmId               = 3,
         kG1_TC_Interrupt_AckId               = 5,
         kG1_Gate_Interrupt_AckId             = 6
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tInterrupt_G1_Ack& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tInterrupt_G1_Ack& setG1_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Gate_Error_Confirm(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Gate_Error_Confirm(nMDBG::tStatus2* statusChain = NULL);

      inline tInterrupt_G1_Ack& setG1_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL);

      inline tInterrupt_G1_Ack& setG1_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

      inline tInterrupt_G1_Ack& setG1_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Gate_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Gate_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // Interrupt_G1_Enable
   //---------------------------------------------------------------------------
   class tInterrupt_G1_Enable : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x96,
         kId     = 26
      };
      tInterrupt_G1_Enable();


      typedef enum {
         kRegisterId                          = 0,
         kG1_TC_Interrupt_EnableId            = 2,
         kG1_Gate_Interrupt_EnableId          = 3
      } tId;

      inline tTIO* registerMap(void);

      inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tInterrupt_G1_Enable& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tInterrupt_G1_Enable& setG1_TC_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_TC_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tInterrupt_G1_Enable& setG1_Gate_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Gate_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeG1_Gate_Interrupt_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline u16 readG1_Gate_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_DMA_Status
   //---------------------------------------------------------------------------
   class tG0_DMA_Status : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xb8,
         kId     = 27
      };
      tG0_DMA_Status();


      typedef enum {
         kRegisterId                          = 0,
         kG0_DMA_Read_ValueId                 = 2,
         kG0_DMA_Error_StId                   = 3,
         kG0_DRQ_StId                         = 4
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG0_DMA_Status& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_DMA_Status& setG0_DMA_Read_Value(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_DMA_Read_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_DMA_Read_Value(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_DMA_Status& setG0_DMA_Error_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_DMA_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_DMA_Error_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_DMA_Status& setG0_DRQ_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_DRQ_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_DRQ_St(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_HW_Save
   //---------------------------------------------------------------------------
   class tG0_HW_Save : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x10,
         kId     = 28
      };
      tG0_HW_Save();


      typedef enum {
         kRegisterId                          = 0,
         kG0_HW_Save_ValueId                  = 1
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG0_HW_Save& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_HW_Save& setG0_HW_Save_Value(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getG0_HW_Save_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readG0_HW_Save_Value(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_HW_Save_High
   //---------------------------------------------------------------------------
   class tG0_HW_Save_High : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x10,
         kId     = 29
      };
      tG0_HW_Save_High();


      typedef enum {
         kRegisterId                          = 0,
         kG0_HW_Save_High_ValueId             = 1
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG0_HW_Save_High& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_HW_Save_High& setG0_HW_Save_High_Value(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_HW_Save_High_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_HW_Save_High_Value(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_HW_Save_Low
   //---------------------------------------------------------------------------
   class tG0_HW_Save_Low : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x12,
         kId     = 30
      };
      tG0_HW_Save_Low();


      typedef enum {
         kRegisterId                          = 0,
         kG0_HW_Save_Low_ValueId              = 1
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG0_HW_Save_Low& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_HW_Save_Low& setG0_HW_Save_Low_Value(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_HW_Save_Low_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_HW_Save_Low_Value(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_Save
   //---------------------------------------------------------------------------
   class tG0_Save : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x18,
         kId     = 31
      };
      tG0_Save();


      typedef enum {
         kRegisterId                          = 0,
         kG0_Save_ValueId                     = 1
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG0_Save& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_Save& setG0_Save_Value(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getG0_Save_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readG0_Save_Value(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_Save_High
   //---------------------------------------------------------------------------
   class tG0_Save_High : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x18,
         kId     = 32
      };
      tG0_Save_High();


      typedef enum {
         kRegisterId                          = 0,
         kG0_Save_High_ValueId                = 1
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG0_Save_High& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_Save_High& setG0_Save_High_Value(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Save_High_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Save_High_Value(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_Save_Low
   //---------------------------------------------------------------------------
   class tG0_Save_Low : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x1a,
         kId     = 33
      };
      tG0_Save_Low();


      typedef enum {
         kRegisterId                          = 0,
         kG0_Save_Low_ValueId                 = 1
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG0_Save_Low& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_Save_Low& setG0_Save_Low_Value(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Save_Low_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Save_Low_Value(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_Status_1
   //---------------------------------------------------------------------------
   class tG0_Status_1 : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x4,
         kId     = 34
      };
      tG0_Status_1();


      typedef enum {
         kRegisterId                          = 0,
         kG0_Gate_Interrupt_StId              = 2,
         kG0_TC_StId                          = 3,
         kG0_Interrupt_StId                   = 5
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG0_Status_1& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG0_Status_1& setG0_Gate_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Gate_Interrupt_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Gate_Interrupt_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Status_1& setG0_TC_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_TC_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_TC_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG0_Status_1& setG0_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Interrupt_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Interrupt_St(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G01_Joint_Status_1
   //---------------------------------------------------------------------------
   class tG01_Joint_Status_1 : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x36,
         kId     = 35
      };
      tG01_Joint_Status_1();


      typedef enum {
         kRegisterId                          = 0,
         kG0_Bank_StId                        = 1,
         kG1_Bank_StId                        = 2,
         kG0_Gate_StId                        = 3,
         kG1_Gate_StId                        = 4,
         kG01_DIO_Serial_IO_In_Progress_StId  = 6
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG01_Joint_Status_1& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG01_Joint_Status_1& setG0_Bank_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Bank_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Bank_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Joint_Status_1& setG1_Bank_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Bank_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Bank_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Joint_Status_1& setG0_Gate_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Gate_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Gate_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Joint_Status_1& setG1_Gate_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Gate_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Gate_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Joint_Status_1& setG01_DIO_Serial_IO_In_Progress_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG01_DIO_Serial_IO_In_Progress_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG01_DIO_Serial_IO_In_Progress_St(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G01_Joint_Status_2
   //---------------------------------------------------------------------------
   class tG01_Joint_Status_2 : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x3a,
         kId     = 36
      };
      tG01_Joint_Status_2();


      typedef enum {
         kRegisterId                          = 0,
         kG0_Output_StId                      = 1,
         kG1_Output_StId                      = 2,
         kG0_HW_Save_StId                     = 4,
         kG1_HW_Save_StId                     = 5,
         kG0_Permanent_Stale_Data_StId        = 6,
         kG1_Permanent_Stale_Data_StId        = 7
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG01_Joint_Status_2& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG01_Joint_Status_2& setG0_Output_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Output_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Output_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Joint_Status_2& setG1_Output_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Output_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Output_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Joint_Status_2& setG0_HW_Save_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_HW_Save_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_HW_Save_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Joint_Status_2& setG1_HW_Save_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_HW_Save_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_HW_Save_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Joint_Status_2& setG0_Permanent_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Permanent_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Permanent_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Joint_Status_2& setG1_Permanent_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Permanent_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Permanent_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G01_Status
   //---------------------------------------------------------------------------
   class tG01_Status : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x8,
         kId     = 37
      };
      tG01_Status();


      typedef enum {
         kRegisterId                          = 0,
         kG0_Save_StId                        = 1,
         kG1_Save_StId                        = 2,
         kG0_Counting_StId                    = 3,
         kG1_Counting_StId                    = 4,
         kG0_Next_Load_Source_StId            = 5,
         kG1_Next_Load_Source_StId            = 6,
         kG0_Stale_Data_StId                  = 7,
         kG1_Stale_Data_StId                  = 8,
         kG0_Armed_StId                       = 9,
         kG1_Armed_StId                       = 10,
         kG0_No_Load_Between_Gates_StId       = 11,
         kG1_No_Load_Between_Gates_StId       = 12,
         kG0_TC_Error_StId                    = 13,
         kG1_TC_Error_StId                    = 14,
         kG0_Gate_Error_StId                  = 15,
         kG1_Gate_Error_StId                  = 16
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG01_Status& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG01_Status& setG0_Save_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Save_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Save_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG1_Save_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Save_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Save_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG0_Counting_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Counting_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Counting_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG1_Counting_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Counting_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Counting_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG0_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG1_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG0_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG1_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG0_Armed_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Armed_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Armed_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG1_Armed_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Armed_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Armed_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG0_No_Load_Between_Gates_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_No_Load_Between_Gates_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_No_Load_Between_Gates_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG1_No_Load_Between_Gates_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_No_Load_Between_Gates_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_No_Load_Between_Gates_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG0_TC_Error_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_TC_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_TC_Error_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG1_TC_Error_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_TC_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_TC_Error_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG0_Gate_Error_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG0_Gate_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG0_Gate_Error_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG01_Status& setG1_Gate_Error_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Gate_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Gate_Error_St(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_DMA_Status
   //---------------------------------------------------------------------------
   class tG1_DMA_Status : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0xba,
         kId     = 38
      };
      tG1_DMA_Status();


      typedef enum {
         kRegisterId                          = 0,
         kG1_DMA_Read_ValueId                 = 2,
         kG1_DMA_Error_StId                   = 3,
         kG1_DRQ_StId                         = 4
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG1_DMA_Status& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_DMA_Status& setG1_DMA_Read_Value(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_DMA_Read_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_DMA_Read_Value(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_DMA_Status& setG1_DMA_Error_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_DMA_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_DMA_Error_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_DMA_Status& setG1_DRQ_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_DRQ_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_DRQ_St(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_HW_Save
   //---------------------------------------------------------------------------
   class tG1_HW_Save : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x14,
         kId     = 39
      };
      tG1_HW_Save();


      typedef enum {
         kRegisterId                          = 0,
         kG1_HW_Save_ValueId                  = 1
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG1_HW_Save& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_HW_Save& setG1_HW_Save_Value(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getG1_HW_Save_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readG1_HW_Save_Value(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_HW_Save_High
   //---------------------------------------------------------------------------
   class tG1_HW_Save_High : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x14,
         kId     = 40
      };
      tG1_HW_Save_High();


      typedef enum {
         kRegisterId                          = 0,
         kG1_HW_Save_High_ValueId             = 1
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG1_HW_Save_High& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_HW_Save_High& setG1_HW_Save_High_Value(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_HW_Save_High_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_HW_Save_High_Value(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_HW_Save_Low
   //---------------------------------------------------------------------------
   class tG1_HW_Save_Low : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x16,
         kId     = 41
      };
      tG1_HW_Save_Low();


      typedef enum {
         kRegisterId                          = 0,
         kG1_HW_Save_Low_ValueId              = 1
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG1_HW_Save_Low& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_HW_Save_Low& setG1_HW_Save_Low_Value(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_HW_Save_Low_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_HW_Save_Low_Value(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_Save
   //---------------------------------------------------------------------------
   class tG1_Save : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x1c,
         kId     = 42
      };
      tG1_Save();


      typedef enum {
         kRegisterId                          = 0,
         kG1_Save_ValueId                     = 1
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG1_Save& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_Save& setG1_Save_Value(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getG1_Save_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readG1_Save_Value(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_Save_High
   //---------------------------------------------------------------------------
   class tG1_Save_High : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x1c,
         kId     = 43
      };
      tG1_Save_High();


      typedef enum {
         kRegisterId                          = 0,
         kG1_Save_High_ValueId                = 1
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG1_Save_High& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_Save_High& setG1_Save_High_Value(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Save_High_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Save_High_Value(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_Save_Low
   //---------------------------------------------------------------------------
   class tG1_Save_Low : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x1e,
         kId     = 44
      };
      tG1_Save_Low();


      typedef enum {
         kRegisterId                          = 0,
         kG1_Save_Low_ValueId                 = 1
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG1_Save_Low& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_Save_Low& setG1_Save_Low_Value(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Save_Low_Value(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Save_Low_Value(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G1_Status_1
   //---------------------------------------------------------------------------
   class tG1_Status_1 : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tTIO tRegisterMap;

      enum {
         kOffset = 0x6,
         kId     = 45
      };
      tG1_Status_1();


      typedef enum {
         kRegisterId                          = 0,
         kG1_Gate_Interrupt_StId              = 2,
         kG1_TC_StId                          = 3,
         kG1_Interrupt_StId                   = 5
      } tId;

      inline tTIO* registerMap(void);

      // Register Accessors (Compile-time selectable)
      inline tG1_Status_1& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tG1_Status_1& setG1_Gate_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Gate_Interrupt_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Gate_Interrupt_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Status_1& setG1_TC_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_TC_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_TC_St(nMDBG::tStatus2* statusChain = NULL);

      inline tG1_Status_1& setG1_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getG1_Interrupt_St(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readG1_Interrupt_St(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      inline void setRegisterMap(tTIO* pTIO);
      tTIO* _TIO;

      friend class tTIO;

   };

   //---------------------------------------------------------------------------
   // G0_AutoIncrement
   //---------------------------------------------------------------------------
   tG0_AutoIncrement G0_AutoIncrement;

   //---------------------------------------------------------------------------
   // G0_Command
   //---------------------------------------------------------------------------
   tG0_Command G0_Command;

   //---------------------------------------------------------------------------
   // G0_Counting_Mode
   //---------------------------------------------------------------------------
   tG0_Counting_Mode G0_Counting_Mode;

   //---------------------------------------------------------------------------
   // G0_MSeries_Counting_Mode
   //---------------------------------------------------------------------------
   tG0_MSeries_Counting_Mode G0_MSeries_Counting_Mode;

   //---------------------------------------------------------------------------
   // G0_DMA_Control
   //---------------------------------------------------------------------------
   tG0_DMA_Control G0_DMA_Control;

   //---------------------------------------------------------------------------
   // G0_Input_Select
   //---------------------------------------------------------------------------
   tG0_Input_Select G0_Input_Select;

   //---------------------------------------------------------------------------
   // G0_Load_A
   //---------------------------------------------------------------------------
   tG0_Load_A G0_Load_A;

   //---------------------------------------------------------------------------
   // G0_Load_B
   //---------------------------------------------------------------------------
   tG0_Load_B G0_Load_B;

   //---------------------------------------------------------------------------
   // G0_Mode
   //---------------------------------------------------------------------------
   tG0_Mode G0_Mode;

   //---------------------------------------------------------------------------
   // G0_Second_Gate
   //---------------------------------------------------------------------------
   tG0_Second_Gate G0_Second_Gate;

   //---------------------------------------------------------------------------
   // G0_MSeries_ABZ
   //---------------------------------------------------------------------------
   tG0_MSeries_ABZ G0_MSeries_ABZ;

   //---------------------------------------------------------------------------
   // G01_Joint_Reset
   //---------------------------------------------------------------------------
   tG01_Joint_Reset G01_Joint_Reset;

   //---------------------------------------------------------------------------
   // G1_AutoIncrement
   //---------------------------------------------------------------------------
   tG1_AutoIncrement G1_AutoIncrement;

   //---------------------------------------------------------------------------
   // G1_Command
   //---------------------------------------------------------------------------
   tG1_Command G1_Command;

   //---------------------------------------------------------------------------
   // G1_Counting_Mode
   //---------------------------------------------------------------------------
   tG1_Counting_Mode G1_Counting_Mode;

   //---------------------------------------------------------------------------
   // G1_MSeries_Counting_Mode
   //---------------------------------------------------------------------------
   tG1_MSeries_Counting_Mode G1_MSeries_Counting_Mode;

   //---------------------------------------------------------------------------
   // G1_DMA_Control
   //---------------------------------------------------------------------------
   tG1_DMA_Control G1_DMA_Control;

   //---------------------------------------------------------------------------
   // G1_Input_Select
   //---------------------------------------------------------------------------
   tG1_Input_Select G1_Input_Select;

   //---------------------------------------------------------------------------
   // G1_Load_A
   //---------------------------------------------------------------------------
   tG1_Load_A G1_Load_A;

   //---------------------------------------------------------------------------
   // G1_Load_B
   //---------------------------------------------------------------------------
   tG1_Load_B G1_Load_B;

   //---------------------------------------------------------------------------
   // G1_Mode
   //---------------------------------------------------------------------------
   tG1_Mode G1_Mode;

   //---------------------------------------------------------------------------
   // G1_Second_Gate
   //---------------------------------------------------------------------------
   tG1_Second_Gate G1_Second_Gate;

   //---------------------------------------------------------------------------
   // G1_MSeries_ABZ
   //---------------------------------------------------------------------------
   tG1_MSeries_ABZ G1_MSeries_ABZ;

   //---------------------------------------------------------------------------
   // Interrupt_G0_Ack
   //---------------------------------------------------------------------------
   tInterrupt_G0_Ack Interrupt_G0_Ack;

   //---------------------------------------------------------------------------
   // Interrupt_G0_Enable
   //---------------------------------------------------------------------------
   tInterrupt_G0_Enable Interrupt_G0_Enable;

   //---------------------------------------------------------------------------
   // Interrupt_G1_Ack
   //---------------------------------------------------------------------------
   tInterrupt_G1_Ack Interrupt_G1_Ack;

   //---------------------------------------------------------------------------
   // Interrupt_G1_Enable
   //---------------------------------------------------------------------------
   tInterrupt_G1_Enable Interrupt_G1_Enable;

   //---------------------------------------------------------------------------
   // G0_DMA_Status
   //---------------------------------------------------------------------------
   tG0_DMA_Status G0_DMA_Status;

   //---------------------------------------------------------------------------
   // G0_HW_Save
   //---------------------------------------------------------------------------
   tG0_HW_Save G0_HW_Save;

   //---------------------------------------------------------------------------
   // G0_HW_Save_High
   //---------------------------------------------------------------------------
   tG0_HW_Save_High G0_HW_Save_High;

   //---------------------------------------------------------------------------
   // G0_HW_Save_Low
   //---------------------------------------------------------------------------
   tG0_HW_Save_Low G0_HW_Save_Low;

   //---------------------------------------------------------------------------
   // G0_Save
   //---------------------------------------------------------------------------
   tG0_Save G0_Save;

   //---------------------------------------------------------------------------
   // G0_Save_High
   //---------------------------------------------------------------------------
   tG0_Save_High G0_Save_High;

   //---------------------------------------------------------------------------
   // G0_Save_Low
   //---------------------------------------------------------------------------
   tG0_Save_Low G0_Save_Low;

   //---------------------------------------------------------------------------
   // G0_Status_1
   //---------------------------------------------------------------------------
   tG0_Status_1 G0_Status_1;

   //---------------------------------------------------------------------------
   // G01_Joint_Status_1
   //---------------------------------------------------------------------------
   tG01_Joint_Status_1 G01_Joint_Status_1;

   //---------------------------------------------------------------------------
   // G01_Joint_Status_2
   //---------------------------------------------------------------------------
   tG01_Joint_Status_2 G01_Joint_Status_2;

   //---------------------------------------------------------------------------
   // G01_Status
   //---------------------------------------------------------------------------
   tG01_Status G01_Status;

   //---------------------------------------------------------------------------
   // G1_DMA_Status
   //---------------------------------------------------------------------------
   tG1_DMA_Status G1_DMA_Status;

   //---------------------------------------------------------------------------
   // G1_HW_Save
   //---------------------------------------------------------------------------
   tG1_HW_Save G1_HW_Save;

   //---------------------------------------------------------------------------
   // G1_HW_Save_High
   //---------------------------------------------------------------------------
   tG1_HW_Save_High G1_HW_Save_High;

   //---------------------------------------------------------------------------
   // G1_HW_Save_Low
   //---------------------------------------------------------------------------
   tG1_HW_Save_Low G1_HW_Save_Low;

   //---------------------------------------------------------------------------
   // G1_Save
   //---------------------------------------------------------------------------
   tG1_Save G1_Save;

   //---------------------------------------------------------------------------
   // G1_Save_High
   //---------------------------------------------------------------------------
   tG1_Save_High G1_Save_High;

   //---------------------------------------------------------------------------
   // G1_Save_Low
   //---------------------------------------------------------------------------
   tG1_Save_Low G1_Save_Low;

   //---------------------------------------------------------------------------
   // G1_Status_1
   //---------------------------------------------------------------------------
   tG1_Status_1 G1_Status_1;

   //---------------------------------------------------------------------------
   // Register Groups
   //---------------------------------------------------------------------------

   //----------------------------------------
   // Register/Field Ids
   //----------------------------------------
   typedef enum {
      kG0_AutoIncrementId                  = 0,
      kG0_AutoIncrementDefaultId                                  = (tG0_AutoIncrement::kDefaultId << 27) | kG0_AutoIncrementId,

      kG0_CommandId                        = 1,
      kG0_ArmId                            = (tG0_Command::kG0_ArmId << 27) | kG0_CommandId,
      kG0_Save_TraceId                     = (tG0_Command::kG0_Save_TraceId << 27) | kG0_CommandId,
      kG0_LoadId                           = (tG0_Command::kG0_LoadId << 27) | kG0_CommandId,
      kG0_DisarmId                         = (tG0_Command::kG0_DisarmId << 27) | kG0_CommandId,
      kG0_Up_DownId                        = (tG0_Command::kG0_Up_DownId << 27) | kG0_CommandId,
      kG0_Write_SwitchId                   = (tG0_Command::kG0_Write_SwitchId << 27) | kG0_CommandId,
      kG0_Synchronized_GateId              = (tG0_Command::kG0_Synchronized_GateId << 27) | kG0_CommandId,
      kG0_Little_Big_EndianId              = (tG0_Command::kG0_Little_Big_EndianId << 27) | kG0_CommandId,
      kG0_Bank_Switch_StartId              = (tG0_Command::kG0_Bank_Switch_StartId << 27) | kG0_CommandId,
      kG0_Bank_Switch_ModeId               = (tG0_Command::kG0_Bank_Switch_ModeId << 27) | kG0_CommandId,
      kG0_Bank_Switch_EnableId             = (tG0_Command::kG0_Bank_Switch_EnableId << 27) | kG0_CommandId,
      kG1_Arm_CopyId                       = (tG0_Command::kG1_Arm_CopyId << 27) | kG0_CommandId,
      kG1_Save_Trace_CopyId                = (tG0_Command::kG1_Save_Trace_CopyId << 27) | kG0_CommandId,
      kG1_Disarm_CopyId                    = (tG0_Command::kG1_Disarm_CopyId << 27) | kG0_CommandId,

      kG0_Counting_ModeId                  = 2,
      kG0_Encoder_Counting_ModeId          = (tG0_Counting_Mode::kG0_Encoder_Counting_ModeId << 27) | kG0_Counting_ModeId,
      kG0_Index_EnableId                   = (tG0_Counting_Mode::kG0_Index_EnableId << 27) | kG0_Counting_ModeId,
      kG0_Index_PhaseId                    = (tG0_Counting_Mode::kG0_Index_PhaseId << 27) | kG0_Counting_ModeId,
      kG0_HW_Arm_EnableId                  = (tG0_Counting_Mode::kG0_HW_Arm_EnableId << 27) | kG0_Counting_ModeId,
      kG0_HW_Arm_SelectId                  = (tG0_Counting_Mode::kG0_HW_Arm_SelectId << 27) | kG0_Counting_ModeId,
      kG0_PrescaleId                       = (tG0_Counting_Mode::kG0_PrescaleId << 27) | kG0_Counting_ModeId,
      kG0_Alternate_SynchronizationId      = (tG0_Counting_Mode::kG0_Alternate_SynchronizationId << 27) | kG0_Counting_ModeId,
      kG0_Prescale_By_2Id                  = (tG0_Counting_Mode::kG0_Prescale_By_2Id << 27) | kG0_Counting_ModeId,

      kG0_MSeries_Counting_ModeId          = 3,
      kG0_MSeries_Encoder_Counting_ModeId  = (tG0_MSeries_Counting_Mode::kG0_MSeries_Encoder_Counting_ModeId << 27) | kG0_MSeries_Counting_ModeId,
      kG0_MSeries_Index_EnableId           = (tG0_MSeries_Counting_Mode::kG0_MSeries_Index_EnableId << 27) | kG0_MSeries_Counting_ModeId,
      kG0_MSeries_Index_PhaseId            = (tG0_MSeries_Counting_Mode::kG0_MSeries_Index_PhaseId << 27) | kG0_MSeries_Counting_ModeId,
      kG0_MSeries_HW_Arm_EnableId          = (tG0_MSeries_Counting_Mode::kG0_MSeries_HW_Arm_EnableId << 27) | kG0_MSeries_Counting_ModeId,
      kG0_MSeries_HW_Arm_SelectId          = (tG0_MSeries_Counting_Mode::kG0_MSeries_HW_Arm_SelectId << 27) | kG0_MSeries_Counting_ModeId,
      kG0_MSeries_PrescaleId               = (tG0_MSeries_Counting_Mode::kG0_MSeries_PrescaleId << 27) | kG0_MSeries_Counting_ModeId,
      kG0_MSeries_Alternate_SynchronizationId      = (tG0_MSeries_Counting_Mode::kG0_MSeries_Alternate_SynchronizationId << 27) | kG0_MSeries_Counting_ModeId,
      kG0_MSeries_Prescale_By_2Id          = (tG0_MSeries_Counting_Mode::kG0_MSeries_Prescale_By_2Id << 27) | kG0_MSeries_Counting_ModeId,

      kG0_DMA_ControlId                    = 4,
      kG0_DMA_EnableId                     = (tG0_DMA_Control::kG0_DMA_EnableId << 27) | kG0_DMA_ControlId,
      kG0_DMA_Output_EnableId              = (tG0_DMA_Control::kG0_DMA_Output_EnableId << 27) | kG0_DMA_ControlId,
      kG0_DMA_Int_EnableId                 = (tG0_DMA_Control::kG0_DMA_Int_EnableId << 27) | kG0_DMA_ControlId,

      kG0_Input_SelectId                   = 5,
      kG0_Read_Acknowledges_IrqId          = (tG0_Input_Select::kG0_Read_Acknowledges_IrqId << 27) | kG0_Input_SelectId,
      kG0_Write_Acknowledges_IrqId         = (tG0_Input_Select::kG0_Write_Acknowledges_IrqId << 27) | kG0_Input_SelectId,
      kG0_Source_SelectId                  = (tG0_Input_Select::kG0_Source_SelectId << 27) | kG0_Input_SelectId,
      kG0_Gate_SelectId                    = (tG0_Input_Select::kG0_Gate_SelectId << 27) | kG0_Input_SelectId,
      kG0_Gate_Select_Load_SourceId        = (tG0_Input_Select::kG0_Gate_Select_Load_SourceId << 27) | kG0_Input_SelectId,
      kG0_OR_GateId                        = (tG0_Input_Select::kG0_OR_GateId << 27) | kG0_Input_SelectId,
      kG0_Output_PolarityId                = (tG0_Input_Select::kG0_Output_PolarityId << 27) | kG0_Input_SelectId,
      kG0_Source_PolarityId                = (tG0_Input_Select::kG0_Source_PolarityId << 27) | kG0_Input_SelectId,

      kG0_Load_AId                         = 6,
      kG0_Load_ADefaultId                                  = (tG0_Load_A::kDefaultId << 27) | kG0_Load_AId,

      kG0_Load_BId                         = 7,
      kG0_Load_BDefaultId                                  = (tG0_Load_B::kDefaultId << 27) | kG0_Load_BId,

      kG0_ModeId                           = 8,
      kG0_Gating_ModeId                    = (tG0_Mode::kG0_Gating_ModeId << 27) | kG0_ModeId,
      kG0_Gate_On_Both_EdgesId             = (tG0_Mode::kG0_Gate_On_Both_EdgesId << 27) | kG0_ModeId,
      kG0_Trigger_Mode_For_Edge_GateId     = (tG0_Mode::kG0_Trigger_Mode_For_Edge_GateId << 27) | kG0_ModeId,
      kG0_Stop_ModeId                      = (tG0_Mode::kG0_Stop_ModeId << 27) | kG0_ModeId,
      kG0_Load_Source_SelectId             = (tG0_Mode::kG0_Load_Source_SelectId << 27) | kG0_ModeId,
      kG0_Output_ModeId                    = (tG0_Mode::kG0_Output_ModeId << 27) | kG0_ModeId,
      kG0_Counting_OnceId                  = (tG0_Mode::kG0_Counting_OnceId << 27) | kG0_ModeId,
      kG0_Loading_On_TCId                  = (tG0_Mode::kG0_Loading_On_TCId << 27) | kG0_ModeId,
      kG0_Gate_PolarityId                  = (tG0_Mode::kG0_Gate_PolarityId << 27) | kG0_ModeId,
      kG0_Loading_On_GateId                = (tG0_Mode::kG0_Loading_On_GateId << 27) | kG0_ModeId,
      kG0_Reload_Source_SwitchingId        = (tG0_Mode::kG0_Reload_Source_SwitchingId << 27) | kG0_ModeId,

      kG0_Second_GateId                    = 9,
      kG0_Second_Gate_Gating_ModeId        = (tG0_Second_Gate::kG0_Second_Gate_Gating_ModeId << 27) | kG0_Second_GateId,
      kG0_Second_Gate_SelectId             = (tG0_Second_Gate::kG0_Second_Gate_SelectId << 27) | kG0_Second_GateId,
      kG0_Second_Gate_PolarityId           = (tG0_Second_Gate::kG0_Second_Gate_PolarityId << 27) | kG0_Second_GateId,
      kG0_MSeries_Second_Gate_SubSelectId  = (tG0_Second_Gate::kG0_MSeries_Second_Gate_SubSelectId << 27) | kG0_Second_GateId,
      kG0_MSeries_Source_SubSelectId       = (tG0_Second_Gate::kG0_MSeries_Source_SubSelectId << 27) | kG0_Second_GateId,

      kG0_MSeries_ABZId                    = 10,
      kG0_Z_SelectId                       = (tG0_MSeries_ABZ::kG0_Z_SelectId << 27) | kG0_MSeries_ABZId,
      kG0_B_SelectId                       = (tG0_MSeries_ABZ::kG0_B_SelectId << 27) | kG0_MSeries_ABZId,
      kG0_A_SelectId                       = (tG0_MSeries_ABZ::kG0_A_SelectId << 27) | kG0_MSeries_ABZId,

      kG01_Joint_ResetId                   = 11,
      kG0_ResetId                          = (tG01_Joint_Reset::kG0_ResetId << 27) | kG01_Joint_ResetId,
      kG1_ResetId                          = (tG01_Joint_Reset::kG1_ResetId << 27) | kG01_Joint_ResetId,

      kG1_AutoIncrementId                  = 12,
      kG1_AutoIncrementDefaultId                                  = (tG1_AutoIncrement::kDefaultId << 27) | kG1_AutoIncrementId,

      kG1_CommandId                        = 13,
      kG1_ArmId                            = (tG1_Command::kG1_ArmId << 27) | kG1_CommandId,
      kG1_Save_TraceId                     = (tG1_Command::kG1_Save_TraceId << 27) | kG1_CommandId,
      kG1_LoadId                           = (tG1_Command::kG1_LoadId << 27) | kG1_CommandId,
      kG1_DisarmId                         = (tG1_Command::kG1_DisarmId << 27) | kG1_CommandId,
      kG1_Up_DownId                        = (tG1_Command::kG1_Up_DownId << 27) | kG1_CommandId,
      kG1_Write_SwitchId                   = (tG1_Command::kG1_Write_SwitchId << 27) | kG1_CommandId,
      kG1_Synchronized_GateId              = (tG1_Command::kG1_Synchronized_GateId << 27) | kG1_CommandId,
      kG1_Little_Big_EndianId              = (tG1_Command::kG1_Little_Big_EndianId << 27) | kG1_CommandId,
      kG1_Bank_Switch_StartId              = (tG1_Command::kG1_Bank_Switch_StartId << 27) | kG1_CommandId,
      kG1_Bank_Switch_ModeId               = (tG1_Command::kG1_Bank_Switch_ModeId << 27) | kG1_CommandId,
      kG1_Bank_Switch_EnableId             = (tG1_Command::kG1_Bank_Switch_EnableId << 27) | kG1_CommandId,
      kG0_Arm_CopyId                       = (tG1_Command::kG0_Arm_CopyId << 27) | kG1_CommandId,
      kG0_Save_Trace_CopyId                = (tG1_Command::kG0_Save_Trace_CopyId << 27) | kG1_CommandId,
      kG0_Disarm_CopyId                    = (tG1_Command::kG0_Disarm_CopyId << 27) | kG1_CommandId,

      kG1_Counting_ModeId                  = 14,
      kG1_Encoder_Counting_ModeId          = (tG1_Counting_Mode::kG1_Encoder_Counting_ModeId << 27) | kG1_Counting_ModeId,
      kG1_Index_EnableId                   = (tG1_Counting_Mode::kG1_Index_EnableId << 27) | kG1_Counting_ModeId,
      kG1_Index_PhaseId                    = (tG1_Counting_Mode::kG1_Index_PhaseId << 27) | kG1_Counting_ModeId,
      kG1_HW_Arm_EnableId                  = (tG1_Counting_Mode::kG1_HW_Arm_EnableId << 27) | kG1_Counting_ModeId,
      kG1_HW_Arm_SelectId                  = (tG1_Counting_Mode::kG1_HW_Arm_SelectId << 27) | kG1_Counting_ModeId,
      kG1_PrescaleId                       = (tG1_Counting_Mode::kG1_PrescaleId << 27) | kG1_Counting_ModeId,
      kG1_Alternate_SynchronizationId      = (tG1_Counting_Mode::kG1_Alternate_SynchronizationId << 27) | kG1_Counting_ModeId,
      kG1_Prescale_By_2Id                  = (tG1_Counting_Mode::kG1_Prescale_By_2Id << 27) | kG1_Counting_ModeId,

      kG1_MSeries_Counting_ModeId          = 15,
      kG1_MSeries_Encoder_Counting_ModeId  = (tG1_MSeries_Counting_Mode::kG1_MSeries_Encoder_Counting_ModeId << 27) | kG1_MSeries_Counting_ModeId,
      kG1_MSeries_Index_EnableId           = (tG1_MSeries_Counting_Mode::kG1_MSeries_Index_EnableId << 27) | kG1_MSeries_Counting_ModeId,
      kG1_MSeries_Index_PhaseId            = (tG1_MSeries_Counting_Mode::kG1_MSeries_Index_PhaseId << 27) | kG1_MSeries_Counting_ModeId,
      kG1_MSeries_HW_Arm_EnableId          = (tG1_MSeries_Counting_Mode::kG1_MSeries_HW_Arm_EnableId << 27) | kG1_MSeries_Counting_ModeId,
      kG1_MSeries_HW_Arm_SelectId          = (tG1_MSeries_Counting_Mode::kG1_MSeries_HW_Arm_SelectId << 27) | kG1_MSeries_Counting_ModeId,
      kG1_MSeries_PrescaleId               = (tG1_MSeries_Counting_Mode::kG1_MSeries_PrescaleId << 27) | kG1_MSeries_Counting_ModeId,
      kG1_MSeries_Alternate_SynchronizationId      = (tG1_MSeries_Counting_Mode::kG1_MSeries_Alternate_SynchronizationId << 27) | kG1_MSeries_Counting_ModeId,
      kG1_MSeries_Prescale_By_2Id          = (tG1_MSeries_Counting_Mode::kG1_MSeries_Prescale_By_2Id << 27) | kG1_MSeries_Counting_ModeId,

      kG1_DMA_ControlId                    = 16,
      kG1_DMA_EnableId                     = (tG1_DMA_Control::kG1_DMA_EnableId << 27) | kG1_DMA_ControlId,
      kG1_DMA_Output_EnableId              = (tG1_DMA_Control::kG1_DMA_Output_EnableId << 27) | kG1_DMA_ControlId,
      kG1_DMA_Int_EnableId                 = (tG1_DMA_Control::kG1_DMA_Int_EnableId << 27) | kG1_DMA_ControlId,

      kG1_Input_SelectId                   = 17,
      kG1_Read_Acknowledges_IrqId          = (tG1_Input_Select::kG1_Read_Acknowledges_IrqId << 27) | kG1_Input_SelectId,
      kG1_Write_Acknowledges_IrqId         = (tG1_Input_Select::kG1_Write_Acknowledges_IrqId << 27) | kG1_Input_SelectId,
      kG1_Source_SelectId                  = (tG1_Input_Select::kG1_Source_SelectId << 27) | kG1_Input_SelectId,
      kG1_Gate_SelectId                    = (tG1_Input_Select::kG1_Gate_SelectId << 27) | kG1_Input_SelectId,
      kG1_Gate_Select_Load_SourceId        = (tG1_Input_Select::kG1_Gate_Select_Load_SourceId << 27) | kG1_Input_SelectId,
      kG1_OR_GateId                        = (tG1_Input_Select::kG1_OR_GateId << 27) | kG1_Input_SelectId,
      kG1_Output_PolarityId                = (tG1_Input_Select::kG1_Output_PolarityId << 27) | kG1_Input_SelectId,
      kG1_Source_PolarityId                = (tG1_Input_Select::kG1_Source_PolarityId << 27) | kG1_Input_SelectId,

      kG1_Load_AId                         = 18,
      kG1_Load_ADefaultId                                  = (tG1_Load_A::kDefaultId << 27) | kG1_Load_AId,

      kG1_Load_BId                         = 19,
      kG1_Load_BDefaultId                                  = (tG1_Load_B::kDefaultId << 27) | kG1_Load_BId,

      kG1_ModeId                           = 20,
      kG1_Gating_ModeId                    = (tG1_Mode::kG1_Gating_ModeId << 27) | kG1_ModeId,
      kG1_Gate_On_Both_EdgesId             = (tG1_Mode::kG1_Gate_On_Both_EdgesId << 27) | kG1_ModeId,
      kG1_Trigger_Mode_For_Edge_GateId     = (tG1_Mode::kG1_Trigger_Mode_For_Edge_GateId << 27) | kG1_ModeId,
      kG1_Stop_ModeId                      = (tG1_Mode::kG1_Stop_ModeId << 27) | kG1_ModeId,
      kG1_Load_Source_SelectId             = (tG1_Mode::kG1_Load_Source_SelectId << 27) | kG1_ModeId,
      kG1_Output_ModeId                    = (tG1_Mode::kG1_Output_ModeId << 27) | kG1_ModeId,
      kG1_Counting_OnceId                  = (tG1_Mode::kG1_Counting_OnceId << 27) | kG1_ModeId,
      kG1_Loading_On_TCId                  = (tG1_Mode::kG1_Loading_On_TCId << 27) | kG1_ModeId,
      kG1_Gate_PolarityId                  = (tG1_Mode::kG1_Gate_PolarityId << 27) | kG1_ModeId,
      kG1_Loading_On_GateId                = (tG1_Mode::kG1_Loading_On_GateId << 27) | kG1_ModeId,
      kG1_Reload_Source_SwitchingId        = (tG1_Mode::kG1_Reload_Source_SwitchingId << 27) | kG1_ModeId,

      kG1_Second_GateId                    = 21,
      kG1_Second_Gate_Gating_ModeId        = (tG1_Second_Gate::kG1_Second_Gate_Gating_ModeId << 27) | kG1_Second_GateId,
      kG1_Second_Gate_SelectId             = (tG1_Second_Gate::kG1_Second_Gate_SelectId << 27) | kG1_Second_GateId,
      kG1_Second_Gate_PolarityId           = (tG1_Second_Gate::kG1_Second_Gate_PolarityId << 27) | kG1_Second_GateId,
      kG1_MSeries_Second_Gate_SubSelectId  = (tG1_Second_Gate::kG1_MSeries_Second_Gate_SubSelectId << 27) | kG1_Second_GateId,
      kG1_MSeries_Source_SubSelectId       = (tG1_Second_Gate::kG1_MSeries_Source_SubSelectId << 27) | kG1_Second_GateId,

      kG1_MSeries_ABZId                    = 22,
      kG1_Z_SelectId                       = (tG1_MSeries_ABZ::kG1_Z_SelectId << 27) | kG1_MSeries_ABZId,
      kG1_B_SelectId                       = (tG1_MSeries_ABZ::kG1_B_SelectId << 27) | kG1_MSeries_ABZId,
      kG1_A_SelectId                       = (tG1_MSeries_ABZ::kG1_A_SelectId << 27) | kG1_MSeries_ABZId,

      kInterrupt_G0_AckId                  = 23,
      kG0_Gate_Error_ConfirmId             = (tInterrupt_G0_Ack::kG0_Gate_Error_ConfirmId << 27) | kInterrupt_G0_AckId,
      kG0_TC_Error_ConfirmId               = (tInterrupt_G0_Ack::kG0_TC_Error_ConfirmId << 27) | kInterrupt_G0_AckId,
      kG0_TC_Interrupt_AckId               = (tInterrupt_G0_Ack::kG0_TC_Interrupt_AckId << 27) | kInterrupt_G0_AckId,
      kG0_Gate_Interrupt_AckId             = (tInterrupt_G0_Ack::kG0_Gate_Interrupt_AckId << 27) | kInterrupt_G0_AckId,

      kInterrupt_G0_EnableId               = 24,
      kG0_TC_Interrupt_EnableId            = (tInterrupt_G0_Enable::kG0_TC_Interrupt_EnableId << 27) | kInterrupt_G0_EnableId,
      kG0_Gate_Interrupt_EnableId          = (tInterrupt_G0_Enable::kG0_Gate_Interrupt_EnableId << 27) | kInterrupt_G0_EnableId,

      kInterrupt_G1_AckId                  = 25,
      kG1_Gate_Error_ConfirmId             = (tInterrupt_G1_Ack::kG1_Gate_Error_ConfirmId << 27) | kInterrupt_G1_AckId,
      kG1_TC_Error_ConfirmId               = (tInterrupt_G1_Ack::kG1_TC_Error_ConfirmId << 27) | kInterrupt_G1_AckId,
      kG1_TC_Interrupt_AckId               = (tInterrupt_G1_Ack::kG1_TC_Interrupt_AckId << 27) | kInterrupt_G1_AckId,
      kG1_Gate_Interrupt_AckId             = (tInterrupt_G1_Ack::kG1_Gate_Interrupt_AckId << 27) | kInterrupt_G1_AckId,

      kInterrupt_G1_EnableId               = 26,
      kG1_TC_Interrupt_EnableId            = (tInterrupt_G1_Enable::kG1_TC_Interrupt_EnableId << 27) | kInterrupt_G1_EnableId,
      kG1_Gate_Interrupt_EnableId          = (tInterrupt_G1_Enable::kG1_Gate_Interrupt_EnableId << 27) | kInterrupt_G1_EnableId,

      kG0_DMA_StatusId                     = 27,
      kG0_DMA_Read_ValueId                 = (tG0_DMA_Status::kG0_DMA_Read_ValueId << 27) | kG0_DMA_StatusId,
      kG0_DMA_Error_StId                   = (tG0_DMA_Status::kG0_DMA_Error_StId << 27) | kG0_DMA_StatusId,
      kG0_DRQ_StId                         = (tG0_DMA_Status::kG0_DRQ_StId << 27) | kG0_DMA_StatusId,

      kG0_HW_SaveId                        = 28,
      kG0_HW_Save_ValueId                  = (tG0_HW_Save::kG0_HW_Save_ValueId << 27) | kG0_HW_SaveId,

      kG0_HW_Save_HighId                   = 29,
      kG0_HW_Save_High_ValueId             = (tG0_HW_Save_High::kG0_HW_Save_High_ValueId << 27) | kG0_HW_Save_HighId,

      kG0_HW_Save_LowId                    = 30,
      kG0_HW_Save_Low_ValueId              = (tG0_HW_Save_Low::kG0_HW_Save_Low_ValueId << 27) | kG0_HW_Save_LowId,

      kG0_SaveId                           = 31,
      kG0_Save_ValueId                     = (tG0_Save::kG0_Save_ValueId << 27) | kG0_SaveId,

      kG0_Save_HighId                      = 32,
      kG0_Save_High_ValueId                = (tG0_Save_High::kG0_Save_High_ValueId << 27) | kG0_Save_HighId,

      kG0_Save_LowId                       = 33,
      kG0_Save_Low_ValueId                 = (tG0_Save_Low::kG0_Save_Low_ValueId << 27) | kG0_Save_LowId,

      kG0_Status_1Id                       = 34,
      kG0_Gate_Interrupt_StId              = (tG0_Status_1::kG0_Gate_Interrupt_StId << 27) | kG0_Status_1Id,
      kG0_TC_StId                          = (tG0_Status_1::kG0_TC_StId << 27) | kG0_Status_1Id,
      kG0_Interrupt_StId                   = (tG0_Status_1::kG0_Interrupt_StId << 27) | kG0_Status_1Id,

      kG01_Joint_Status_1Id                = 35,
      kG0_Bank_StId                        = (tG01_Joint_Status_1::kG0_Bank_StId << 27) | kG01_Joint_Status_1Id,
      kG1_Bank_StId                        = (tG01_Joint_Status_1::kG1_Bank_StId << 27) | kG01_Joint_Status_1Id,
      kG0_Gate_StId                        = (tG01_Joint_Status_1::kG0_Gate_StId << 27) | kG01_Joint_Status_1Id,
      kG1_Gate_StId                        = (tG01_Joint_Status_1::kG1_Gate_StId << 27) | kG01_Joint_Status_1Id,
      kG01_DIO_Serial_IO_In_Progress_StId  = (tG01_Joint_Status_1::kG01_DIO_Serial_IO_In_Progress_StId << 27) | kG01_Joint_Status_1Id,

      kG01_Joint_Status_2Id                = 36,
      kG0_Output_StId                      = (tG01_Joint_Status_2::kG0_Output_StId << 27) | kG01_Joint_Status_2Id,
      kG1_Output_StId                      = (tG01_Joint_Status_2::kG1_Output_StId << 27) | kG01_Joint_Status_2Id,
      kG0_HW_Save_StId                     = (tG01_Joint_Status_2::kG0_HW_Save_StId << 27) | kG01_Joint_Status_2Id,
      kG1_HW_Save_StId                     = (tG01_Joint_Status_2::kG1_HW_Save_StId << 27) | kG01_Joint_Status_2Id,
      kG0_Permanent_Stale_Data_StId        = (tG01_Joint_Status_2::kG0_Permanent_Stale_Data_StId << 27) | kG01_Joint_Status_2Id,
      kG1_Permanent_Stale_Data_StId        = (tG01_Joint_Status_2::kG1_Permanent_Stale_Data_StId << 27) | kG01_Joint_Status_2Id,

      kG01_StatusId                        = 37,
      kG0_Save_StId                        = (tG01_Status::kG0_Save_StId << 27) | kG01_StatusId,
      kG1_Save_StId                        = (tG01_Status::kG1_Save_StId << 27) | kG01_StatusId,
      kG0_Counting_StId                    = (tG01_Status::kG0_Counting_StId << 27) | kG01_StatusId,
      kG1_Counting_StId                    = (tG01_Status::kG1_Counting_StId << 27) | kG01_StatusId,
      kG0_Next_Load_Source_StId            = (tG01_Status::kG0_Next_Load_Source_StId << 27) | kG01_StatusId,
      kG1_Next_Load_Source_StId            = (tG01_Status::kG1_Next_Load_Source_StId << 27) | kG01_StatusId,
      kG0_Stale_Data_StId                  = (tG01_Status::kG0_Stale_Data_StId << 27) | kG01_StatusId,
      kG1_Stale_Data_StId                  = (tG01_Status::kG1_Stale_Data_StId << 27) | kG01_StatusId,
      kG0_Armed_StId                       = (tG01_Status::kG0_Armed_StId << 27) | kG01_StatusId,
      kG1_Armed_StId                       = (tG01_Status::kG1_Armed_StId << 27) | kG01_StatusId,
      kG0_No_Load_Between_Gates_StId       = (tG01_Status::kG0_No_Load_Between_Gates_StId << 27) | kG01_StatusId,
      kG1_No_Load_Between_Gates_StId       = (tG01_Status::kG1_No_Load_Between_Gates_StId << 27) | kG01_StatusId,
      kG0_TC_Error_StId                    = (tG01_Status::kG0_TC_Error_StId << 27) | kG01_StatusId,
      kG1_TC_Error_StId                    = (tG01_Status::kG1_TC_Error_StId << 27) | kG01_StatusId,
      kG0_Gate_Error_StId                  = (tG01_Status::kG0_Gate_Error_StId << 27) | kG01_StatusId,
      kG1_Gate_Error_StId                  = (tG01_Status::kG1_Gate_Error_StId << 27) | kG01_StatusId,

      kG1_DMA_StatusId                     = 38,
      kG1_DMA_Read_ValueId                 = (tG1_DMA_Status::kG1_DMA_Read_ValueId << 27) | kG1_DMA_StatusId,
      kG1_DMA_Error_StId                   = (tG1_DMA_Status::kG1_DMA_Error_StId << 27) | kG1_DMA_StatusId,
      kG1_DRQ_StId                         = (tG1_DMA_Status::kG1_DRQ_StId << 27) | kG1_DMA_StatusId,

      kG1_HW_SaveId                        = 39,
      kG1_HW_Save_ValueId                  = (tG1_HW_Save::kG1_HW_Save_ValueId << 27) | kG1_HW_SaveId,

      kG1_HW_Save_HighId                   = 40,
      kG1_HW_Save_High_ValueId             = (tG1_HW_Save_High::kG1_HW_Save_High_ValueId << 27) | kG1_HW_Save_HighId,

      kG1_HW_Save_LowId                    = 41,
      kG1_HW_Save_Low_ValueId              = (tG1_HW_Save_Low::kG1_HW_Save_Low_ValueId << 27) | kG1_HW_Save_LowId,

      kG1_SaveId                           = 42,
      kG1_Save_ValueId                     = (tG1_Save::kG1_Save_ValueId << 27) | kG1_SaveId,

      kG1_Save_HighId                      = 43,
      kG1_Save_High_ValueId                = (tG1_Save_High::kG1_Save_High_ValueId << 27) | kG1_Save_HighId,

      kG1_Save_LowId                       = 44,
      kG1_Save_Low_ValueId                 = (tG1_Save_Low::kG1_Save_Low_ValueId << 27) | kG1_Save_LowId,

      kG1_Status_1Id                       = 45,
      kG1_Gate_Interrupt_StId              = (tG1_Status_1::kG1_Gate_Interrupt_StId << 27) | kG1_Status_1Id,
      kG1_TC_StId                          = (tG1_Status_1::kG1_TC_StId << 27) | kG1_Status_1Id,
      kG1_Interrupt_StId                   = (tG1_Status_1::kG1_Interrupt_StId << 27) | kG1_Status_1Id,


      kMaxRegisterId = 45

   } tId;

   tTIO(tBusSpaceReference addrSpace, nMDBG::tStatus2* statusChain = NULL);
   void reset(nMDBG::tStatus2* statusChain = NULL);
   virtual ~tTIO();

   inline tBusSpaceReference getBusSpaceReference(void) const;

   inline void setAddressOffset(u32 value, nMDBG::tStatus2* statusChain = NULL);
   inline u32  getAddressOffset(nMDBG::tStatus2* statusChain = NULL);
   inline void flushBus(nMDBG::tStatus2* statusChain = NULL);
private:
   void _initialize(nMDBG::tStatus2* statusChain = NULL);
   tBusSpaceReference _addrSpace;
   tBoolean _deallocateBus;
   u32 _addressOffset;

};

#ifndef ___tTIO_ipp___
#ifndef ___tTIO_h_no_inline___
#include "tTIO_auto.cpp"
#endif

#endif

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

