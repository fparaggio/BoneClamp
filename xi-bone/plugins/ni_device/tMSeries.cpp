// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tMSeries_h___
#include "tMSeries.h"

#endif

tMSeries::tMSeries(tBusSpaceReference addrSpace, nMDBG::tStatus2* s)

{
   _addressOffset = 0;
   _addrSpace = addrSpace;
   _deallocateBus = kFalse;

   if (s && s->isFatal()) return;
   _initialize(s);
}


void tMSeries::reset(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   AI_Command_1.setRegister(0x0, s);
   AI_Command_2.setRegister(0x0, s);
   AI_Mode_2.setRegister(0x0, s);
   AI_Mode_3.setRegister(0x0, s);
   AI_Personal.setRegister(0x0, s);
   AI_Output_Control.setRegister(0x0, s);
   AI_SC_Load_A.setRegister(0x0, s);
   AI_SC_Load_B.setRegister(0x0, s);
   AI_SC_Save.setRegister(0x0, s);
   AI_SI_Load_A.setRegister(0x0, s);
   AI_SI_Load_B.setRegister(0x0, s);
   AI_SI_Save.setRegister(0x0, s);
   AI_SI2_Load_A.setRegister(0x0, s);
   AI_SI2_Load_B.setRegister(0x0, s);
   AI_START_STOP_Select.setRegister(0x0, s);
   AI_Status_1.setRegister(0x0, s);
   Analog_Trigger_Etc.setRegister(0x0, s);
   AI_Trigger_Select.setRegister(0x0, s);
   AO_BC_Load_A.setRegister(0x0, s);
   AO_BC_Load_B.setRegister(0x0, s);
   AO_BC_Save.setRegister(0x0, s);
   AO_Command_2.setRegister(0x0, s);
   AO_Command_1.setRegister(0x0, s);
   AO_Mode_1.setRegister(0x0, s);
   AO_Mode_2.setRegister(0x0, s);
   AO_Output_Control.setRegister(0x0, s);
   AO_Mode_3.setRegister(0x0, s);
   AO_Personal.setRegister(0x0, s);
   AO_START_Select.setRegister(0x0, s);
   AO_Status_2.setRegister(0x0, s);
   AO_Status_1.setRegister(0x0, s);
   AO_Trigger_Select.setRegister(0x0, s);
   AO_UC_Load_A.setRegister(0x0, s);
   AO_UC_Load_B.setRegister(0x0, s);
   AO_UC_Save.setRegister(0x0, s);
   AO_UI_Load_A.setRegister(0x0, s);
   AO_UI_Load_B.setRegister(0x0, s);
   AO_UI_Save.setRegister(0x0, s);
   Clock_and_FOUT.setRegister(0x0, s);
   Interrupt_A_Ack.setRegister(0x0, s);
   Interrupt_A_Enable.setRegister(0x0, s);
   Interrupt_B_Ack.setRegister(0x0, s);
   Interrupt_Control.setRegister(0x0, s);
   Interrupt_B_Enable.setRegister(0x0, s);
   IO_Bidirection_Pin.setRegister(0x0, s);
   Joint_Reset.setRegister(0x0, s);
   Joint_Status_2.setRegister(0x0, s);
   Joint_Status_1.setRegister(0x0, s);
   RTSI_Shared_MUX.setRegister(0x0, s);
   RTSI_Trig_A_Output.setRegister(0x0, s);
   RTSI_Trig_Direction.setRegister(0x0, s);
   RTSI_Trig_B_Output.setRegister(0x0, s);
   G0_DMA_Config.setRegister(0x0, s);
   G1_DMA_Config.setRegister(0x0, s);
   G0_DMA_Status.setRegister(0x0, s);
   G1_DMA_Status.setRegister(0x0, s);
   CDIO_DMA_Select.setRegister(0x0, s);
   SCXI_Control.setRegister(0x0, s);
   AI_Mode_1.setRegister(0x0, s);
   AI_DIV_Load_A.setRegister(0x0, s);
   SCXI_Serial_Data_In.setRegister(0x0, s);
   SCXI_Serial_Data_Out.setRegister(0x0, s);
   SCXI_Status.setRegister(0x0, s);
   SCXI_Output_Enable.setRegister(0x0, s);
   SCXI_DIO_Enable.setRegister(0x0, s);
   Static_Digital_Output.setRegister(0x0, s);
   Static_Digital_Input.setRegister(0x0, s);
   DIO_Direction.setRegister(0x0, s);
   AO_Serial_Interrupt_Enable.setRegister(0x0, s);
   AO_Serial_Interrupt_Ack.setRegister(0x0, s);
   AO_Serial_Interrupt_Status.setRegister(0x0, s);
   Interrupt_C_Enable.setRegister(0x0, s);
   Interrupt_C_Status.setRegister(0x0, s);
   Analog_Trigger_Control.setRegister(0x0, s);
   AI_FIFO_Data.setRegister(0x0, s);
   AI_FIFO_Clear.setRegister(0x0, s);
   AI_AO_Select.setRegister(0x0, s);
   AI_Config_FIFO_Data.setRegister(0x0, s);
   Configuration_Memory_Clear.setRegister(0x0, s);
   AO_FIFO_Data.setRegister(0x0, s);
   AO_FIFO_Clear.setRegister(0x0, s);
   G0_G1_Select.setRegister(0x0, s);
   Misc_Command.setRegister(0x0, s);
   AO_Calibration.setRegister(0x0, s);
   PFI_Output_Select_1.setRegister(0x0, s);
   PFI_Output_Select_2.setRegister(0x0, s);
   PFI_Output_Select_3.setRegister(0x0, s);
   PFI_Output_Select_4.setRegister(0x0, s);
   PFI_Output_Select_5.setRegister(0x0, s);
   PFI_Output_Select_6.setRegister(0x0, s);
   PFI_DI.setRegister(0x0, s);
   PFI_DO.setRegister(0x0, s);
   PFI_Filter.setRegister(0x0, s);
   RTSI_Filter.setRegister(0x0, s);
   Clock_And_Fout2.setRegister(0x0, s);
   PLL_Control.setRegister(0x0, s);
   PLL_Status.setRegister(0x0, s);
   AI_Config_FIFO_Bypass.setRegister(0x0, s);
   CDI_FIFO_Data.setRegister(0x0, s);
   CDO_FIFO_Data.setRegister(0x0, s);
   CDIO_Status.setRegister(0x0, s);
   CDIO_Command.setRegister(0x0, s);
   CDI_Mode.setRegister(0x0, s);
   CDO_Mode.setRegister(0x0, s);
   CDI_Mask_Enable.setRegister(0x0, s);
   CDO_Mask_Enable.setRegister(0x0, s);
   SCXI_Legacy_Compatibility.setRegister(0x0, s);
   DIO_Reserved_0.setRegister(0x0, s);
   DIO_Reserved_1.setRegister(0x0, s);
   DIO_Reserved_2.setRegister(0x0, s);
   DIO_Reserved_3.setRegister(0x0, s);
   DIO_Reserved_4.setRegister(0x0, s);
   DIO_Reserved_5.setRegister(0x0, s);
   DIO_Reserved_6.setRegister(0x0, s);
   DIO_Reserved_7.setRegister(0x0, s);
   LB_Reserved_0.setRegister(0x0, s);
   LB_Reserved_1.setRegister(0x0, s);
   unsigned int i;
   for(i = 0; i < 16; ++i) {
      AO_Waveform_Order[i].setRegister(0x0, s);
   }
   for(i = 0; i < 4; ++i) {
      AO_Config_Bank[i].setRegister(0x0, s);
   }
   for(i = 0; i < 16; ++i) {
      DAC_Direct_Data[i].setRegister(0x0, s);
   }
   Cal_PWM.setRegister(0x0, s);
   for(i = 0; i < 7; ++i) {
      Gen_PWM[i].setRegister(0x0, s);
   }
   for(i = 0; i < 8; ++i) {
      Static_AI_Control[i].setRegister(0x0, s);
   }
}

void tMSeries::_initialize(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;


   {
      unsigned int i;
      for (i=0; i<16; ++i) {
         AO_Waveform_Order[i].initialize(0xc2+(0x4*i),0x75+i);
      }
      for (i=0; i<4; ++i) {
         AO_Config_Bank[i].initialize(0xc3+(0x4*i),0x85+i);
      }
      for (i=0; i<16; ++i) {
         DAC_Direct_Data[i].initialize(0xc0+(0x4*i),0x89+i);
      }
      for (i=0; i<7; ++i) {
         Gen_PWM[i].initialize(0x44+(0x2*i),0x9a+i);
      }
      {
      u32 offset[] = {
         0x64,
         0x261,
         0x262,
         0x263,
         0x264,
         0x265,
         0x266,
         0x267
      };
      for (i=0; i<8; ++i) {
         Static_AI_Control[i].initialize(offset[i],0xa1+i);
      }
      }
   }


   //----------------------------------------
   // set register maps of all registers
   //----------------------------------------
   AI_Command_1.setRegisterMap(this);
   AI_Command_2.setRegisterMap(this);
   AI_Mode_2.setRegisterMap(this);
   AI_Mode_3.setRegisterMap(this);
   AI_Personal.setRegisterMap(this);
   AI_Output_Control.setRegisterMap(this);
   AI_SC_Load_A.setRegisterMap(this);
   AI_SC_Load_B.setRegisterMap(this);
   AI_SC_Save.setRegisterMap(this);
   AI_SI_Load_A.setRegisterMap(this);
   AI_SI_Load_B.setRegisterMap(this);
   AI_SI_Save.setRegisterMap(this);
   AI_SI2_Load_A.setRegisterMap(this);
   AI_SI2_Load_B.setRegisterMap(this);
   AI_START_STOP_Select.setRegisterMap(this);
   AI_Status_1.setRegisterMap(this);
   Analog_Trigger_Etc.setRegisterMap(this);
   AI_Trigger_Select.setRegisterMap(this);
   AO_BC_Load_A.setRegisterMap(this);
   AO_BC_Load_B.setRegisterMap(this);
   AO_BC_Save.setRegisterMap(this);
   AO_Command_2.setRegisterMap(this);
   AO_Command_1.setRegisterMap(this);
   AO_Mode_1.setRegisterMap(this);
   AO_Mode_2.setRegisterMap(this);
   AO_Output_Control.setRegisterMap(this);
   AO_Mode_3.setRegisterMap(this);
   AO_Personal.setRegisterMap(this);
   AO_START_Select.setRegisterMap(this);
   AO_Status_2.setRegisterMap(this);
   AO_Status_1.setRegisterMap(this);
   AO_Trigger_Select.setRegisterMap(this);
   AO_UC_Load_A.setRegisterMap(this);
   AO_UC_Load_B.setRegisterMap(this);
   AO_UC_Save.setRegisterMap(this);
   AO_UI_Load_A.setRegisterMap(this);
   AO_UI_Load_B.setRegisterMap(this);
   AO_UI_Save.setRegisterMap(this);
   Clock_and_FOUT.setRegisterMap(this);
   Interrupt_A_Ack.setRegisterMap(this);
   Interrupt_A_Enable.setRegisterMap(this);
   Interrupt_B_Ack.setRegisterMap(this);
   Interrupt_Control.setRegisterMap(this);
   Interrupt_B_Enable.setRegisterMap(this);
   IO_Bidirection_Pin.setRegisterMap(this);
   Joint_Reset.setRegisterMap(this);
   Joint_Status_2.setRegisterMap(this);
   Joint_Status_1.setRegisterMap(this);
   RTSI_Shared_MUX.setRegisterMap(this);
   RTSI_Trig_A_Output.setRegisterMap(this);
   RTSI_Trig_Direction.setRegisterMap(this);
   RTSI_Trig_B_Output.setRegisterMap(this);
   G0_DMA_Config.setRegisterMap(this);
   G1_DMA_Config.setRegisterMap(this);
   G0_DMA_Status.setRegisterMap(this);
   G1_DMA_Status.setRegisterMap(this);
   CDIO_DMA_Select.setRegisterMap(this);
   SCXI_Control.setRegisterMap(this);
   AI_Mode_1.setRegisterMap(this);
   AI_DIV_Load_A.setRegisterMap(this);
   SCXI_Serial_Data_In.setRegisterMap(this);
   SCXI_Serial_Data_Out.setRegisterMap(this);
   SCXI_Status.setRegisterMap(this);
   SCXI_Output_Enable.setRegisterMap(this);
   SCXI_DIO_Enable.setRegisterMap(this);
   Static_Digital_Output.setRegisterMap(this);
   Static_Digital_Input.setRegisterMap(this);
   DIO_Direction.setRegisterMap(this);
   AO_Serial_Interrupt_Enable.setRegisterMap(this);
   AO_Serial_Interrupt_Ack.setRegisterMap(this);
   AO_Serial_Interrupt_Status.setRegisterMap(this);
   Interrupt_C_Enable.setRegisterMap(this);
   Interrupt_C_Status.setRegisterMap(this);
   Analog_Trigger_Control.setRegisterMap(this);
   AI_FIFO_Data.setRegisterMap(this);
   AI_FIFO_Clear.setRegisterMap(this);
   AI_AO_Select.setRegisterMap(this);
   AI_Config_FIFO_Data.setRegisterMap(this);
   Configuration_Memory_Clear.setRegisterMap(this);
   AO_FIFO_Data.setRegisterMap(this);
   AO_FIFO_Clear.setRegisterMap(this);
   G0_G1_Select.setRegisterMap(this);
   Misc_Command.setRegisterMap(this);
   AO_Calibration.setRegisterMap(this);
   PFI_Output_Select_1.setRegisterMap(this);
   PFI_Output_Select_2.setRegisterMap(this);
   PFI_Output_Select_3.setRegisterMap(this);
   PFI_Output_Select_4.setRegisterMap(this);
   PFI_Output_Select_5.setRegisterMap(this);
   PFI_Output_Select_6.setRegisterMap(this);
   PFI_DI.setRegisterMap(this);
   PFI_DO.setRegisterMap(this);
   PFI_Filter.setRegisterMap(this);
   RTSI_Filter.setRegisterMap(this);
   Clock_And_Fout2.setRegisterMap(this);
   PLL_Control.setRegisterMap(this);
   PLL_Status.setRegisterMap(this);
   AI_Config_FIFO_Bypass.setRegisterMap(this);
   CDI_FIFO_Data.setRegisterMap(this);
   CDO_FIFO_Data.setRegisterMap(this);
   CDIO_Status.setRegisterMap(this);
   CDIO_Command.setRegisterMap(this);
   CDI_Mode.setRegisterMap(this);
   CDO_Mode.setRegisterMap(this);
   CDI_Mask_Enable.setRegisterMap(this);
   CDO_Mask_Enable.setRegisterMap(this);
   SCXI_Legacy_Compatibility.setRegisterMap(this);
   DIO_Reserved_0.setRegisterMap(this);
   DIO_Reserved_1.setRegisterMap(this);
   DIO_Reserved_2.setRegisterMap(this);
   DIO_Reserved_3.setRegisterMap(this);
   DIO_Reserved_4.setRegisterMap(this);
   DIO_Reserved_5.setRegisterMap(this);
   DIO_Reserved_6.setRegisterMap(this);
   DIO_Reserved_7.setRegisterMap(this);
   LB_Reserved_0.setRegisterMap(this);
   LB_Reserved_1.setRegisterMap(this);
   {
      unsigned int i;
      for(i = 0; i < 16; ++i) {
         AO_Waveform_Order[i].setRegisterMap(this);
      }
   }
   {
      unsigned int i;
      for(i = 0; i < 4; ++i) {
         AO_Config_Bank[i].setRegisterMap(this);
      }
   }
   {
      unsigned int i;
      for(i = 0; i < 16; ++i) {
         DAC_Direct_Data[i].setRegisterMap(this);
      }
   }
   Cal_PWM.setRegisterMap(this);
   {
      unsigned int i;
      for(i = 0; i < 7; ++i) {
         Gen_PWM[i].setRegisterMap(this);
      }
   }
   {
      unsigned int i;
      for(i = 0; i < 8; ++i) {
         Static_AI_Control[i].setRegisterMap(this);
      }
   }

   reset(s);
}

tMSeries::~tMSeries()
{
}



// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

