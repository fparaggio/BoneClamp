// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tMSeries_ipp___
#define ___tMSeries_ipp___

#ifndef ___tMSeries_h___
#include "tMSeries.h"
#endif

#include "trace.h"
inline void tMSeries::tReg8IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u8 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write8(offset, u8(value));
}
inline u8 tMSeries::tReg8IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u8 value;   if (s && s->isFatal()) return ~0;
   value = (u8)addrSpace.read8(offset);
   return value;
}

inline void tMSeries::tReg16IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u16 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write16(offset, u16(value));
}

inline u16 tMSeries::tReg16IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u16 value;   if (s && s->isFatal()) return ~0;
   value = (u16)addrSpace.read16(offset);
   return value;
}

inline void tMSeries::tReg32IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u32 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write32(offset, value);
}

inline u32 tMSeries::tReg32IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u32 value;   if (s && s->isFatal()) return ~0;
   value = addrSpace.read32(offset);
   return value;
}

inline tBusSpaceReference tMSeries::getBusSpaceReference(void) const
{
   return _addrSpace;
}

inline void tMSeries::setAddressOffset(u32 value, nMDBG::tStatus2* s)
{
   _addressOffset = value;
}
inline u32  tMSeries::getAddressOffset(nMDBG::tStatus2* s)
{
   return _addressOffset;
}
inline void tMSeries::flushBus(nMDBG::tStatus2* s)
{

}

inline tMSeries::tAI_Command_1::tAI_Command_1()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_Command_1::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_Command_1::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_Command_1::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffff0000);
}

inline void tMSeries::tAI_Command_1::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAI_Command_1::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_CONVERT_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_CONVERT_Pulse(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tAI_Command_1::writeAI_CONVERT_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_CONVERT_Pulse(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_CONVERT_Pulse(nMDBG::tStatus2* s)
{
   return getAI_CONVERT_Pulse(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_LOCALMUX_CLK_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_LOCALMUX_CLK_Pulse(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tAI_Command_1::writeAI_LOCALMUX_CLK_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_LOCALMUX_CLK_Pulse(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_LOCALMUX_CLK_Pulse(nMDBG::tStatus2* s)
{
   return getAI_LOCALMUX_CLK_Pulse(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_EXTMUX_CLK_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_EXTMUX_CLK_Pulse(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tAI_Command_1::writeAI_EXTMUX_CLK_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_EXTMUX_CLK_Pulse(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_EXTMUX_CLK_Pulse(nMDBG::tStatus2* s)
{
   return getAI_EXTMUX_CLK_Pulse(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_SCAN_IN_PROG_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_SCAN_IN_PROG_Pulse(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tAI_Command_1::writeAI_SCAN_IN_PROG_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SCAN_IN_PROG_Pulse(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_SCAN_IN_PROG_Pulse(nMDBG::tStatus2* s)
{
   return getAI_SCAN_IN_PROG_Pulse(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_SC_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_SC_Load(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tAI_Command_1::writeAI_SC_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SC_Load(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_SC_Load(nMDBG::tStatus2* s)
{
   return getAI_SC_Load(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_SC_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_SC_Arm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tAI_Command_1::writeAI_SC_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SC_Arm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_SC_Arm(nMDBG::tStatus2* s)
{
   return getAI_SC_Arm(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_DIV_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_DIV_Load(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tMSeries::tAI_Command_1::writeAI_DIV_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_DIV_Load(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_DIV_Load(nMDBG::tStatus2* s)
{
   return getAI_DIV_Load(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_DIV_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_DIV_Arm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tAI_Command_1::writeAI_DIV_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_DIV_Arm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_DIV_Arm(nMDBG::tStatus2* s)
{
   return getAI_DIV_Arm(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_SI_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_SI_Load(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tMSeries::tAI_Command_1::writeAI_SI_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI_Load(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_SI_Load(nMDBG::tStatus2* s)
{
   return getAI_SI_Load(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_SI_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_SI_Arm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tAI_Command_1::writeAI_SI_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI_Arm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_SI_Arm(nMDBG::tStatus2* s)
{
   return getAI_SI_Arm(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_SI2_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_SI2_Load(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tAI_Command_1::writeAI_SI2_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI2_Load(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_SI2_Load(nMDBG::tStatus2* s)
{
   return getAI_SI2_Load(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_SI2_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_SI2_Arm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tAI_Command_1::writeAI_SI2_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI2_Arm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_SI2_Arm(nMDBG::tStatus2* s)
{
   return getAI_SI2_Arm(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_Disarm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tAI_Command_1::writeAI_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Disarm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_Disarm(nMDBG::tStatus2* s)
{
   return getAI_Disarm(s);
}

inline tMSeries::tAI_Command_1& tMSeries::tAI_Command_1::setAI_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_1::getAI_Analog_Trigger_Reset(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tAI_Command_1::writeAI_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Analog_Trigger_Reset(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_1::readAI_Analog_Trigger_Reset(nMDBG::tStatus2* s)
{
   return getAI_Analog_Trigger_Reset(s);
}

inline void tMSeries::tAI_Command_1::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_Command_2::tAI_Command_2()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_Command_2::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_Command_2::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_Command_2& tMSeries::tAI_Command_2::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAI_Command_2::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_Command_2::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffff3c00);
}

inline void tMSeries::tAI_Command_2::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAI_Command_2::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_Command_2& tMSeries::tAI_Command_2::setAI_START1_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_2::getAI_START1_Pulse(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tAI_Command_2::writeAI_START1_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_START1_Pulse(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_2::readAI_START1_Pulse(nMDBG::tStatus2* s)
{
   return getAI_START1_Pulse(s);
}

inline tMSeries::tAI_Command_2& tMSeries::tAI_Command_2::setAI_START2_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_2::getAI_START2_Pulse(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tAI_Command_2::writeAI_START2_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_START2_Pulse(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_2::readAI_START2_Pulse(nMDBG::tStatus2* s)
{
   return getAI_START2_Pulse(s);
}

inline tMSeries::tAI_Command_2& tMSeries::tAI_Command_2::setAI_START_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_2::getAI_START_Pulse(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tAI_Command_2::writeAI_START_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_START_Pulse(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_2::readAI_START_Pulse(nMDBG::tStatus2* s)
{
   return getAI_START_Pulse(s);
}

inline tMSeries::tAI_Command_2& tMSeries::tAI_Command_2::setAI_STOP_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_2::getAI_STOP_Pulse(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tAI_Command_2::writeAI_STOP_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_STOP_Pulse(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_2::readAI_STOP_Pulse(nMDBG::tStatus2* s)
{
   return getAI_STOP_Pulse(s);
}

inline tMSeries::tAI_Command_2& tMSeries::tAI_Command_2::setAI_SC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_2::getAI_SC_Switch_Load_On_TC(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tAI_Command_2::writeAI_SC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SC_Switch_Load_On_TC(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_2::readAI_SC_Switch_Load_On_TC(nMDBG::tStatus2* s)
{
   return getAI_SC_Switch_Load_On_TC(s);
}

inline tMSeries::tAI_Command_2& tMSeries::tAI_Command_2::setAI_SI_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_2::getAI_SI_Switch_Load_On_TC(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tMSeries::tAI_Command_2::writeAI_SI_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI_Switch_Load_On_TC(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_2::readAI_SI_Switch_Load_On_TC(nMDBG::tStatus2* s)
{
   return getAI_SI_Switch_Load_On_TC(s);
}

inline tMSeries::tAI_Command_2& tMSeries::tAI_Command_2::setAI_SI_Switch_Load_On_STOP(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_2::getAI_SI_Switch_Load_On_STOP(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tAI_Command_2::writeAI_SI_Switch_Load_On_STOP(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI_Switch_Load_On_STOP(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_2::readAI_SI_Switch_Load_On_STOP(nMDBG::tStatus2* s)
{
   return getAI_SI_Switch_Load_On_STOP(s);
}

inline tMSeries::tAI_Command_2& tMSeries::tAI_Command_2::setAI_SI_Switch_Load_On_SC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_2::getAI_SI_Switch_Load_On_SC_TC(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tMSeries::tAI_Command_2::writeAI_SI_Switch_Load_On_SC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI_Switch_Load_On_SC_TC(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_2::readAI_SI_Switch_Load_On_SC_TC(nMDBG::tStatus2* s)
{
   return getAI_SI_Switch_Load_On_SC_TC(s);
}

inline tMSeries::tAI_Command_2& tMSeries::tAI_Command_2::setAI_SC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_2::getAI_SC_Save_Trace(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tAI_Command_2::writeAI_SC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SC_Save_Trace(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_2::readAI_SC_Save_Trace(nMDBG::tStatus2* s)
{
   return getAI_SC_Save_Trace(s);
}

inline tMSeries::tAI_Command_2& tMSeries::tAI_Command_2::setAI_START1_Disable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_2::getAI_START1_Disable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tAI_Command_2::writeAI_START1_Disable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_START1_Disable(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_2::readAI_START1_Disable(nMDBG::tStatus2* s)
{
   return getAI_START1_Disable(s);
}

inline tMSeries::tAI_Command_2& tMSeries::tAI_Command_2::setAI_End_On_End_Of_Scan(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_2::getAI_End_On_End_Of_Scan(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tAI_Command_2::writeAI_End_On_End_Of_Scan(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_End_On_End_Of_Scan(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_2::readAI_End_On_End_Of_Scan(nMDBG::tStatus2* s)
{
   return getAI_End_On_End_Of_Scan(s);
}

inline tMSeries::tAI_Command_2& tMSeries::tAI_Command_2::setAI_End_On_SC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Command_2::getAI_End_On_SC_TC(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tAI_Command_2::writeAI_End_On_SC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_End_On_SC_TC(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Command_2::readAI_End_On_SC_TC(nMDBG::tStatus2* s)
{
   return getAI_End_On_SC_TC(s);
}

inline void tMSeries::tAI_Command_2::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_Mode_2::tAI_Mode_2()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_Mode_2::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_Mode_2::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_Mode_2& tMSeries::tAI_Mode_2::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAI_Mode_2::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_Mode_2::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAI_Mode_2::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAI_Mode_2::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_Mode_2& tMSeries::tAI_Mode_2::setAI_SC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Mode_2::getAI_SC_Write_Switch(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tAI_Mode_2::writeAI_SC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SC_Write_Switch(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Mode_2::readAI_SC_Write_Switch(nMDBG::tStatus2* s)
{
   return getAI_SC_Write_Switch(s);
}

inline tMSeries::tAI_Mode_2& tMSeries::tAI_Mode_2::setAI_SC_Reload_Mode(tAI_SC_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_2::tAI_SC_Reload_Mode tMSeries::tAI_Mode_2::getAI_SC_Reload_Mode(nMDBG::tStatus2*) const
{
   return (tAI_SC_Reload_Mode)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tAI_Mode_2::writeAI_SC_Reload_Mode(tAI_SC_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
   setAI_SC_Reload_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_2::tAI_SC_Reload_Mode tMSeries::tAI_Mode_2::readAI_SC_Reload_Mode(nMDBG::tStatus2* s)
{
   return getAI_SC_Reload_Mode(s);
}

inline tMSeries::tAI_Mode_2& tMSeries::tAI_Mode_2::setAI_SC_Initial_Load_Source(tAI_SC_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_2::tAI_SC_Initial_Load_Source tMSeries::tAI_Mode_2::getAI_SC_Initial_Load_Source(nMDBG::tStatus2*) const
{
   return (tAI_SC_Initial_Load_Source)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tAI_Mode_2::writeAI_SC_Initial_Load_Source(tAI_SC_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
   setAI_SC_Initial_Load_Source(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_2::tAI_SC_Initial_Load_Source tMSeries::tAI_Mode_2::readAI_SC_Initial_Load_Source(nMDBG::tStatus2* s)
{
   return getAI_SC_Initial_Load_Source(s);
}

inline tMSeries::tAI_Mode_2& tMSeries::tAI_Mode_2::setAI_SI_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Mode_2::getAI_SI_Write_Switch(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tAI_Mode_2::writeAI_SI_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI_Write_Switch(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Mode_2::readAI_SI_Write_Switch(nMDBG::tStatus2* s)
{
   return getAI_SI_Write_Switch(s);
}

inline tMSeries::tAI_Mode_2& tMSeries::tAI_Mode_2::setAI_SI_Reload_Mode(tAI_SI_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff8f)) | (((u16)fieldValue << 0x4) & ~0xff8f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_2::tAI_SI_Reload_Mode tMSeries::tAI_Mode_2::getAI_SI_Reload_Mode(nMDBG::tStatus2*) const
{
   return (tAI_SI_Reload_Mode)((_softCopy & ~0xff8f) >> 0x4);
}

inline void tMSeries::tAI_Mode_2::writeAI_SI_Reload_Mode(tAI_SI_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI_Reload_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_2::tAI_SI_Reload_Mode tMSeries::tAI_Mode_2::readAI_SI_Reload_Mode(nMDBG::tStatus2* s)
{
   return getAI_SI_Reload_Mode(s);
}

inline tMSeries::tAI_Mode_2& tMSeries::tAI_Mode_2::setAI_SI_Initial_Load_Source(tAI_SI_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_2::tAI_SI_Initial_Load_Source tMSeries::tAI_Mode_2::getAI_SI_Initial_Load_Source(nMDBG::tStatus2*) const
{
   return (tAI_SI_Initial_Load_Source)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tMSeries::tAI_Mode_2::writeAI_SI_Initial_Load_Source(tAI_SI_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI_Initial_Load_Source(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_2::tAI_SI_Initial_Load_Source tMSeries::tAI_Mode_2::readAI_SI_Initial_Load_Source(nMDBG::tStatus2* s)
{
   return getAI_SI_Initial_Load_Source(s);
}

inline tMSeries::tAI_Mode_2& tMSeries::tAI_Mode_2::setAI_SI2_Reload_Mode(tAI_SI2_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_2::tAI_SI2_Reload_Mode tMSeries::tAI_Mode_2::getAI_SI2_Reload_Mode(nMDBG::tStatus2*) const
{
   return (tAI_SI2_Reload_Mode)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tAI_Mode_2::writeAI_SI2_Reload_Mode(tAI_SI2_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI2_Reload_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_2::tAI_SI2_Reload_Mode tMSeries::tAI_Mode_2::readAI_SI2_Reload_Mode(nMDBG::tStatus2* s)
{
   return getAI_SI2_Reload_Mode(s);
}

inline tMSeries::tAI_Mode_2& tMSeries::tAI_Mode_2::setAI_SI2_Initial_Load_Source(tAI_SI2_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_2::tAI_SI2_Initial_Load_Source tMSeries::tAI_Mode_2::getAI_SI2_Initial_Load_Source(nMDBG::tStatus2*) const
{
   return (tAI_SI2_Initial_Load_Source)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tMSeries::tAI_Mode_2::writeAI_SI2_Initial_Load_Source(tAI_SI2_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI2_Initial_Load_Source(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_2::tAI_SI2_Initial_Load_Source tMSeries::tAI_Mode_2::readAI_SI2_Initial_Load_Source(nMDBG::tStatus2* s)
{
   return getAI_SI2_Initial_Load_Source(s);
}

inline tMSeries::tAI_Mode_2& tMSeries::tAI_Mode_2::setAI_External_MUX_Present(tAI_External_MUX_Present fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_2::tAI_External_MUX_Present tMSeries::tAI_Mode_2::getAI_External_MUX_Present(nMDBG::tStatus2*) const
{
   return (tAI_External_MUX_Present)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tAI_Mode_2::writeAI_External_MUX_Present(tAI_External_MUX_Present fieldValue, nMDBG::tStatus2* s)
{
   setAI_External_MUX_Present(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_2::tAI_External_MUX_Present tMSeries::tAI_Mode_2::readAI_External_MUX_Present(nMDBG::tStatus2* s)
{
   return getAI_External_MUX_Present(s);
}

inline tMSeries::tAI_Mode_2& tMSeries::tAI_Mode_2::setAI_Pre_Trigger(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Mode_2::getAI_Pre_Trigger(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tAI_Mode_2::writeAI_Pre_Trigger(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_Pre_Trigger(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Mode_2::readAI_Pre_Trigger(nMDBG::tStatus2* s)
{
   return getAI_Pre_Trigger(s);
}

inline tMSeries::tAI_Mode_2& tMSeries::tAI_Mode_2::setAI_Start_Stop_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Mode_2::getAI_Start_Stop_Gate_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tAI_Mode_2::writeAI_Start_Stop_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_Start_Stop_Gate_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Mode_2::readAI_Start_Stop_Gate_Enable(nMDBG::tStatus2* s)
{
   return getAI_Start_Stop_Gate_Enable(s);
}

inline tMSeries::tAI_Mode_2& tMSeries::tAI_Mode_2::setAI_SC_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Mode_2::getAI_SC_Gate_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tAI_Mode_2::writeAI_SC_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_SC_Gate_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Mode_2::readAI_SC_Gate_Enable(nMDBG::tStatus2* s)
{
   return getAI_SC_Gate_Enable(s);
}

inline void tMSeries::tAI_Mode_2::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_Mode_3::tAI_Mode_3()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_Mode_3::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_Mode_3::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_Mode_3& tMSeries::tAI_Mode_3::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAI_Mode_3::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_Mode_3::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAI_Mode_3::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAI_Mode_3::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_Mode_3& tMSeries::tAI_Mode_3::setAI_External_Gate_Select(tAI_External_Gate_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_3::tAI_External_Gate_Select tMSeries::tAI_Mode_3::getAI_External_Gate_Select(nMDBG::tStatus2*) const
{
   return (tAI_External_Gate_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tMSeries::tAI_Mode_3::writeAI_External_Gate_Select(tAI_External_Gate_Select fieldValue, nMDBG::tStatus2* s)
{
   setAI_External_Gate_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_3::tAI_External_Gate_Select tMSeries::tAI_Mode_3::readAI_External_Gate_Select(nMDBG::tStatus2* s)
{
   return getAI_External_Gate_Select(s);
}

inline tMSeries::tAI_Mode_3& tMSeries::tAI_Mode_3::setAI_External_Gate_Polarity(tAI_External_Gate_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_3::tAI_External_Gate_Polarity tMSeries::tAI_Mode_3::getAI_External_Gate_Polarity(nMDBG::tStatus2*) const
{
   return (tAI_External_Gate_Polarity)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tAI_Mode_3::writeAI_External_Gate_Polarity(tAI_External_Gate_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAI_External_Gate_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_3::tAI_External_Gate_Polarity tMSeries::tAI_Mode_3::readAI_External_Gate_Polarity(nMDBG::tStatus2* s)
{
   return getAI_External_Gate_Polarity(s);
}

inline tMSeries::tAI_Mode_3& tMSeries::tAI_Mode_3::setAI_FIFO_Mode(tAI_FIFO_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff3f)) | (((u16)fieldValue << 0x6) & ~0xff3f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_3::tAI_FIFO_Mode tMSeries::tAI_Mode_3::getAI_FIFO_Mode(nMDBG::tStatus2*) const
{
   return (tAI_FIFO_Mode)((_softCopy & ~0xff3f) >> 0x6);
}

inline void tMSeries::tAI_Mode_3::writeAI_FIFO_Mode(tAI_FIFO_Mode fieldValue, nMDBG::tStatus2* s)
{
   setAI_FIFO_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_3::tAI_FIFO_Mode tMSeries::tAI_Mode_3::readAI_FIFO_Mode(nMDBG::tStatus2* s)
{
   return getAI_FIFO_Mode(s);
}

inline tMSeries::tAI_Mode_3& tMSeries::tAI_Mode_3::setAI_External_Gate_Mode(tAI_External_Gate_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_3::tAI_External_Gate_Mode tMSeries::tAI_Mode_3::getAI_External_Gate_Mode(nMDBG::tStatus2*) const
{
   return (tAI_External_Gate_Mode)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tAI_Mode_3::writeAI_External_Gate_Mode(tAI_External_Gate_Mode fieldValue, nMDBG::tStatus2* s)
{
   setAI_External_Gate_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_3::tAI_External_Gate_Mode tMSeries::tAI_Mode_3::readAI_External_Gate_Mode(nMDBG::tStatus2* s)
{
   return getAI_External_Gate_Mode(s);
}

inline tMSeries::tAI_Mode_3& tMSeries::tAI_Mode_3::setAI_Delayed_START1(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Mode_3::getAI_Delayed_START1(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tMSeries::tAI_Mode_3::writeAI_Delayed_START1(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_Delayed_START1(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Mode_3::readAI_Delayed_START1(nMDBG::tStatus2* s)
{
   return getAI_Delayed_START1(s);
}

inline tMSeries::tAI_Mode_3& tMSeries::tAI_Mode_3::setAI_Delayed_START2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Mode_3::getAI_Delayed_START2(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tAI_Mode_3::writeAI_Delayed_START2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_Delayed_START2(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Mode_3::readAI_Delayed_START2(nMDBG::tStatus2* s)
{
   return getAI_Delayed_START2(s);
}

inline tMSeries::tAI_Mode_3& tMSeries::tAI_Mode_3::setAI_SI2_Source_Select(tAI_SI2_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_3::tAI_SI2_Source_Select tMSeries::tAI_Mode_3::getAI_SI2_Source_Select(nMDBG::tStatus2*) const
{
   return (tAI_SI2_Source_Select)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tAI_Mode_3::writeAI_SI2_Source_Select(tAI_SI2_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI2_Source_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_3::tAI_SI2_Source_Select tMSeries::tAI_Mode_3::readAI_SI2_Source_Select(nMDBG::tStatus2* s)
{
   return getAI_SI2_Source_Select(s);
}

inline tMSeries::tAI_Mode_3& tMSeries::tAI_Mode_3::setAI_Software_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Mode_3::getAI_Software_Gate(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tAI_Mode_3::writeAI_Software_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Software_Gate(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Mode_3::readAI_Software_Gate(nMDBG::tStatus2* s)
{
   return getAI_Software_Gate(s);
}

inline tMSeries::tAI_Mode_3& tMSeries::tAI_Mode_3::setAI_Delay_START(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Mode_3::getAI_Delay_START(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tAI_Mode_3::writeAI_Delay_START(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Delay_START(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Mode_3::readAI_Delay_START(nMDBG::tStatus2* s)
{
   return getAI_Delay_START(s);
}

inline tMSeries::tAI_Mode_3& tMSeries::tAI_Mode_3::setAI_Trigger_Length(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Mode_3::getAI_Trigger_Length(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tAI_Mode_3::writeAI_Trigger_Length(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Trigger_Length(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Mode_3::readAI_Trigger_Length(nMDBG::tStatus2* s)
{
   return getAI_Trigger_Length(s);
}

inline void tMSeries::tAI_Mode_3::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_Personal::tAI_Personal()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_Personal::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_Personal::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_Personal& tMSeries::tAI_Personal::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAI_Personal::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_Personal::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAI_Personal::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAI_Personal::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_Personal& tMSeries::tAI_Personal::setAI_EXTMUX_CLK_Pulse_Width(tAI_EXTMUX_CLK_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Personal::tAI_EXTMUX_CLK_Pulse_Width tMSeries::tAI_Personal::getAI_EXTMUX_CLK_Pulse_Width(nMDBG::tStatus2*) const
{
   return (tAI_EXTMUX_CLK_Pulse_Width)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tAI_Personal::writeAI_EXTMUX_CLK_Pulse_Width(tAI_EXTMUX_CLK_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
   setAI_EXTMUX_CLK_Pulse_Width(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Personal::tAI_EXTMUX_CLK_Pulse_Width tMSeries::tAI_Personal::readAI_EXTMUX_CLK_Pulse_Width(nMDBG::tStatus2* s)
{
   return getAI_EXTMUX_CLK_Pulse_Width(s);
}

inline tMSeries::tAI_Personal& tMSeries::tAI_Personal::setAI_CONVERT_Pulse_Width(tAI_CONVERT_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Personal::tAI_CONVERT_Pulse_Width tMSeries::tAI_Personal::getAI_CONVERT_Pulse_Width(nMDBG::tStatus2*) const
{
   return (tAI_CONVERT_Pulse_Width)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tAI_Personal::writeAI_CONVERT_Pulse_Width(tAI_CONVERT_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
   setAI_CONVERT_Pulse_Width(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Personal::tAI_CONVERT_Pulse_Width tMSeries::tAI_Personal::readAI_CONVERT_Pulse_Width(nMDBG::tStatus2* s)
{
   return getAI_CONVERT_Pulse_Width(s);
}

inline void tMSeries::tAI_Personal::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_Output_Control::tAI_Output_Control()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_Output_Control::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_Output_Control::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_Output_Control& tMSeries::tAI_Output_Control::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAI_Output_Control::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_Output_Control::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAI_Output_Control::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAI_Output_Control::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_Output_Control& tMSeries::tAI_Output_Control::setAI_CONVERT_Output_Select(tAI_CONVERT_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffc)) | (((u16)fieldValue << 0x0) & ~0xfffc);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Output_Control::tAI_CONVERT_Output_Select tMSeries::tAI_Output_Control::getAI_CONVERT_Output_Select(nMDBG::tStatus2*) const
{
   return (tAI_CONVERT_Output_Select)((_softCopy & ~0xfffc) >> 0x0);
}

inline void tMSeries::tAI_Output_Control::writeAI_CONVERT_Output_Select(tAI_CONVERT_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setAI_CONVERT_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Output_Control::tAI_CONVERT_Output_Select tMSeries::tAI_Output_Control::readAI_CONVERT_Output_Select(nMDBG::tStatus2* s)
{
   return getAI_CONVERT_Output_Select(s);
}

inline tMSeries::tAI_Output_Control& tMSeries::tAI_Output_Control::setAI_EXTMUX_CLK_Output_Select(tAI_EXTMUX_CLK_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff3f)) | (((u16)fieldValue << 0x6) & ~0xff3f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Output_Control::tAI_EXTMUX_CLK_Output_Select tMSeries::tAI_Output_Control::getAI_EXTMUX_CLK_Output_Select(nMDBG::tStatus2*) const
{
   return (tAI_EXTMUX_CLK_Output_Select)((_softCopy & ~0xff3f) >> 0x6);
}

inline void tMSeries::tAI_Output_Control::writeAI_EXTMUX_CLK_Output_Select(tAI_EXTMUX_CLK_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setAI_EXTMUX_CLK_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Output_Control::tAI_EXTMUX_CLK_Output_Select tMSeries::tAI_Output_Control::readAI_EXTMUX_CLK_Output_Select(nMDBG::tStatus2* s)
{
   return getAI_EXTMUX_CLK_Output_Select(s);
}

inline tMSeries::tAI_Output_Control& tMSeries::tAI_Output_Control::setAI_SCAN_IN_PROG_Output_Select(tAI_SCAN_IN_PROG_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfcff)) | (((u16)fieldValue << 0x8) & ~0xfcff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Output_Control::tAI_SCAN_IN_PROG_Output_Select tMSeries::tAI_Output_Control::getAI_SCAN_IN_PROG_Output_Select(nMDBG::tStatus2*) const
{
   return (tAI_SCAN_IN_PROG_Output_Select)((_softCopy & ~0xfcff) >> 0x8);
}

inline void tMSeries::tAI_Output_Control::writeAI_SCAN_IN_PROG_Output_Select(tAI_SCAN_IN_PROG_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setAI_SCAN_IN_PROG_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Output_Control::tAI_SCAN_IN_PROG_Output_Select tMSeries::tAI_Output_Control::readAI_SCAN_IN_PROG_Output_Select(nMDBG::tStatus2* s)
{
   return getAI_SCAN_IN_PROG_Output_Select(s);
}

inline tMSeries::tAI_Output_Control& tMSeries::tAI_Output_Control::setAI_START_Output_Select(tAI_START_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Output_Control::tAI_START_Output_Select tMSeries::tAI_Output_Control::getAI_START_Output_Select(nMDBG::tStatus2*) const
{
   return (tAI_START_Output_Select)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tAI_Output_Control::writeAI_START_Output_Select(tAI_START_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setAI_START_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Output_Control::tAI_START_Output_Select tMSeries::tAI_Output_Control::readAI_START_Output_Select(nMDBG::tStatus2* s)
{
   return getAI_START_Output_Select(s);
}

inline void tMSeries::tAI_Output_Control::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_SC_Load_A::tAI_SC_Load_A()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_SC_Load_A::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_SC_Load_A::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_SC_Load_A& tMSeries::tAI_SC_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAI_SC_Load_A::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_SC_Load_A::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tAI_SC_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAI_SC_Load_A::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_SC_Load_A& tMSeries::tAI_SC_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_SC_Load_A::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAI_SC_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_SC_Load_A::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAI_SC_Load_A::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_SC_Load_B::tAI_SC_Load_B()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_SC_Load_B::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_SC_Load_B::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_SC_Load_B& tMSeries::tAI_SC_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAI_SC_Load_B::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_SC_Load_B::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tAI_SC_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAI_SC_Load_B::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_SC_Load_B& tMSeries::tAI_SC_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_SC_Load_B::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAI_SC_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_SC_Load_B::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAI_SC_Load_B::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_SC_Save::tAI_SC_Save()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_SC_Save::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tAI_SC_Save& tMSeries::tAI_SC_Save::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAI_SC_Save::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_SC_Save::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u32 tMSeries::tAI_SC_Save::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tAI_SC_Save& tMSeries::tAI_SC_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_SC_Save::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tMSeries::tAI_SC_Save::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void tMSeries::tAI_SC_Save::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_SI_Load_A::tAI_SI_Load_A()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_SI_Load_A::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_SI_Load_A::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_SI_Load_A& tMSeries::tAI_SI_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAI_SI_Load_A::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_SI_Load_A::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0x0);
}

inline void tMSeries::tAI_SI_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAI_SI_Load_A::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_SI_Load_A& tMSeries::tAI_SI_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_SI_Load_A::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAI_SI_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_SI_Load_A::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAI_SI_Load_A::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_SI_Load_B::tAI_SI_Load_B()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_SI_Load_B::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_SI_Load_B::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_SI_Load_B& tMSeries::tAI_SI_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAI_SI_Load_B::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_SI_Load_B::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tAI_SI_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAI_SI_Load_B::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_SI_Load_B& tMSeries::tAI_SI_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_SI_Load_B::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAI_SI_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_SI_Load_B::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAI_SI_Load_B::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_SI_Save::tAI_SI_Save()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_SI_Save::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tAI_SI_Save& tMSeries::tAI_SI_Save::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAI_SI_Save::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_SI_Save::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u32 tMSeries::tAI_SI_Save::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tAI_SI_Save& tMSeries::tAI_SI_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_SI_Save::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tMSeries::tAI_SI_Save::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void tMSeries::tAI_SI_Save::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_SI2_Load_A::tAI_SI2_Load_A()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_SI2_Load_A::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_SI2_Load_A::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_SI2_Load_A& tMSeries::tAI_SI2_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAI_SI2_Load_A::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_SI2_Load_A::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tAI_SI2_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAI_SI2_Load_A::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_SI2_Load_A& tMSeries::tAI_SI2_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_SI2_Load_A::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAI_SI2_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_SI2_Load_A::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAI_SI2_Load_A::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_SI2_Load_B::tAI_SI2_Load_B()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_SI2_Load_B::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_SI2_Load_B::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_SI2_Load_B& tMSeries::tAI_SI2_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAI_SI2_Load_B::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_SI2_Load_B::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tAI_SI2_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAI_SI2_Load_B::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_SI2_Load_B& tMSeries::tAI_SI2_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_SI2_Load_B::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAI_SI2_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_SI2_Load_B::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAI_SI2_Load_B::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_START_STOP_Select::tAI_START_STOP_Select()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_START_STOP_Select::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_START_STOP_Select::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_START_STOP_Select& tMSeries::tAI_START_STOP_Select::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAI_START_STOP_Select::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_START_STOP_Select::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAI_START_STOP_Select::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAI_START_STOP_Select::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_START_STOP_Select& tMSeries::tAI_START_STOP_Select::setAI_START_Select(tAI_START_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_START_STOP_Select::tAI_START_Select tMSeries::tAI_START_STOP_Select::getAI_START_Select(nMDBG::tStatus2*) const
{
   return (tAI_START_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tMSeries::tAI_START_STOP_Select::writeAI_START_Select(tAI_START_Select fieldValue, nMDBG::tStatus2* s)
{
   setAI_START_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_START_STOP_Select::tAI_START_Select tMSeries::tAI_START_STOP_Select::readAI_START_Select(nMDBG::tStatus2* s)
{
   return getAI_START_Select(s);
}

inline tMSeries::tAI_START_STOP_Select& tMSeries::tAI_START_STOP_Select::setAI_START_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_START_STOP_Select::getAI_START_Edge(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tAI_START_STOP_Select::writeAI_START_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_START_Edge(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_START_STOP_Select::readAI_START_Edge(nMDBG::tStatus2* s)
{
   return getAI_START_Edge(s);
}

inline tMSeries::tAI_START_STOP_Select& tMSeries::tAI_START_STOP_Select::setAI_START_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_START_STOP_Select::getAI_START_Sync(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tAI_START_STOP_Select::writeAI_START_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_START_Sync(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_START_STOP_Select::readAI_START_Sync(nMDBG::tStatus2* s)
{
   return getAI_START_Sync(s);
}

inline tMSeries::tAI_START_STOP_Select& tMSeries::tAI_START_STOP_Select::setAI_STOP_Select(tAI_STOP_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf07f)) | (((u16)fieldValue << 0x7) & ~0xf07f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_START_STOP_Select::tAI_STOP_Select tMSeries::tAI_START_STOP_Select::getAI_STOP_Select(nMDBG::tStatus2*) const
{
   return (tAI_STOP_Select)((_softCopy & ~0xf07f) >> 0x7);
}

inline void tMSeries::tAI_START_STOP_Select::writeAI_STOP_Select(tAI_STOP_Select fieldValue, nMDBG::tStatus2* s)
{
   setAI_STOP_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_START_STOP_Select::tAI_STOP_Select tMSeries::tAI_START_STOP_Select::readAI_STOP_Select(nMDBG::tStatus2* s)
{
   return getAI_STOP_Select(s);
}

inline tMSeries::tAI_START_STOP_Select& tMSeries::tAI_START_STOP_Select::setAI_STOP_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_START_STOP_Select::getAI_STOP_Edge(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tAI_START_STOP_Select::writeAI_STOP_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_STOP_Edge(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_START_STOP_Select::readAI_STOP_Edge(nMDBG::tStatus2* s)
{
   return getAI_STOP_Edge(s);
}

inline tMSeries::tAI_START_STOP_Select& tMSeries::tAI_START_STOP_Select::setAI_STOP_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_START_STOP_Select::getAI_STOP_Sync(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tAI_START_STOP_Select::writeAI_STOP_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_STOP_Sync(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_START_STOP_Select::readAI_STOP_Sync(nMDBG::tStatus2* s)
{
   return getAI_STOP_Sync(s);
}

inline tMSeries::tAI_START_STOP_Select& tMSeries::tAI_START_STOP_Select::setAI_STOP_Polarity(tAI_STOP_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_START_STOP_Select::tAI_STOP_Polarity tMSeries::tAI_START_STOP_Select::getAI_STOP_Polarity(nMDBG::tStatus2*) const
{
   return (tAI_STOP_Polarity)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tAI_START_STOP_Select::writeAI_STOP_Polarity(tAI_STOP_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAI_STOP_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_START_STOP_Select::tAI_STOP_Polarity tMSeries::tAI_START_STOP_Select::readAI_STOP_Polarity(nMDBG::tStatus2* s)
{
   return getAI_STOP_Polarity(s);
}

inline tMSeries::tAI_START_STOP_Select& tMSeries::tAI_START_STOP_Select::setAI_START_Polarity(tAI_START_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_START_STOP_Select::tAI_START_Polarity tMSeries::tAI_START_STOP_Select::getAI_START_Polarity(nMDBG::tStatus2*) const
{
   return (tAI_START_Polarity)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tAI_START_STOP_Select::writeAI_START_Polarity(tAI_START_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAI_START_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_START_STOP_Select::tAI_START_Polarity tMSeries::tAI_START_STOP_Select::readAI_START_Polarity(nMDBG::tStatus2* s)
{
   return getAI_START_Polarity(s);
}

inline void tMSeries::tAI_START_STOP_Select::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_Status_1::tAI_Status_1()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_Status_1::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAI_Status_1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_Status_1::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u16 tMSeries::tAI_Status_1::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setPass_Thru_0_Interrupt_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getPass_Thru_0_Interrupt_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline tBoolean tMSeries::tAI_Status_1::readPass_Thru_0_Interrupt_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getPass_Thru_0_Interrupt_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setAI_FIFO_Request_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getAI_FIFO_Request_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffd) >> 0x1);
}

inline tBoolean tMSeries::tAI_Status_1::readAI_FIFO_Request_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_FIFO_Request_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setG0_Gate_Interrupt_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getG0_Gate_Interrupt_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffb) >> 0x2);
}

inline tBoolean tMSeries::tAI_Status_1::readG0_Gate_Interrupt_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Gate_Interrupt_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setG0_TC_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getG0_TC_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfff7) >> 0x3);
}

inline tBoolean tMSeries::tAI_Status_1::readG0_TC_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_TC_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setAI_STOP_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getAI_STOP_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffef) >> 0x4);
}

inline tBoolean tMSeries::tAI_Status_1::readAI_STOP_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_STOP_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setAI_START_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getAI_START_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline tBoolean tMSeries::tAI_Status_1::readAI_START_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_START_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setAI_SC_TC_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getAI_SC_TC_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline tBoolean tMSeries::tAI_Status_1::readAI_SC_TC_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_SC_TC_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setAI_START1_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getAI_START1_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xff7f) >> 0x7);
}

inline tBoolean tMSeries::tAI_Status_1::readAI_START1_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_START1_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setAI_START2_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getAI_START2_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfeff) >> 0x8);
}

inline tBoolean tMSeries::tAI_Status_1::readAI_START2_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_START2_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setAI_SC_TC_Error_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getAI_SC_TC_Error_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfdff) >> 0x9);
}

inline tBoolean tMSeries::tAI_Status_1::readAI_SC_TC_Error_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_SC_TC_Error_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setAI_Overflow_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getAI_Overflow_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfbff) >> 0xa);
}

inline tBoolean tMSeries::tAI_Status_1::readAI_Overflow_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_Overflow_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setAI_Overrun_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getAI_Overrun_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xf7ff) >> 0xb);
}

inline tBoolean tMSeries::tAI_Status_1::readAI_Overrun_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_Overrun_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setAI_FIFO_Empty_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getAI_FIFO_Empty_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xefff) >> 0xc);
}

inline tBoolean tMSeries::tAI_Status_1::readAI_FIFO_Empty_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_FIFO_Empty_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setAI_FIFO_Half_Full_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getAI_FIFO_Half_Full_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xdfff) >> 0xd);
}

inline tBoolean tMSeries::tAI_Status_1::readAI_FIFO_Half_Full_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_FIFO_Half_Full_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setAI_FIFO_Full_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getAI_FIFO_Full_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xbfff) >> 0xe);
}

inline tBoolean tMSeries::tAI_Status_1::readAI_FIFO_Full_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_FIFO_Full_St(s);
}

inline tMSeries::tAI_Status_1& tMSeries::tAI_Status_1::setInterrupt_Group_A_Status(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Status_1::getInterrupt_Group_A_Status(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0x7fff) >> 0xf);
}

inline tBoolean tMSeries::tAI_Status_1::readInterrupt_Group_A_Status(nMDBG::tStatus2* s)
{
   refresh(s);
   return getInterrupt_Group_A_Status(s);
}

inline void tMSeries::tAI_Status_1::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAnalog_Trigger_Etc::tAnalog_Trigger_Etc()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAnalog_Trigger_Etc::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAnalog_Trigger_Etc::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAnalog_Trigger_Etc& tMSeries::tAnalog_Trigger_Etc::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAnalog_Trigger_Etc::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAnalog_Trigger_Etc::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffdf);
}

inline void tMSeries::tAnalog_Trigger_Etc::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAnalog_Trigger_Etc::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAnalog_Trigger_Etc& tMSeries::tAnalog_Trigger_Etc::setAnalog_Trigger_Mode(tAnalog_Trigger_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff8)) | (((u16)fieldValue << 0x0) & ~0xfff8);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAnalog_Trigger_Etc::tAnalog_Trigger_Mode tMSeries::tAnalog_Trigger_Etc::getAnalog_Trigger_Mode(nMDBG::tStatus2*) const
{
   return (tAnalog_Trigger_Mode)((_softCopy & ~0xfff8) >> 0x0);
}

inline void tMSeries::tAnalog_Trigger_Etc::writeAnalog_Trigger_Mode(tAnalog_Trigger_Mode fieldValue, nMDBG::tStatus2* s)
{
   setAnalog_Trigger_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tAnalog_Trigger_Etc::tAnalog_Trigger_Mode tMSeries::tAnalog_Trigger_Etc::readAnalog_Trigger_Mode(nMDBG::tStatus2* s)
{
   return getAnalog_Trigger_Mode(s);
}

inline tMSeries::tAnalog_Trigger_Etc& tMSeries::tAnalog_Trigger_Etc::setAnalog_Trigger_Enable(tAnalog_Trigger_Enable fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAnalog_Trigger_Etc::tAnalog_Trigger_Enable tMSeries::tAnalog_Trigger_Etc::getAnalog_Trigger_Enable(nMDBG::tStatus2*) const
{
   return (tAnalog_Trigger_Enable)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tAnalog_Trigger_Etc::writeAnalog_Trigger_Enable(tAnalog_Trigger_Enable fieldValue, nMDBG::tStatus2* s)
{
   setAnalog_Trigger_Enable(fieldValue, s);
   flush(s);
}
inline tMSeries::tAnalog_Trigger_Etc::tAnalog_Trigger_Enable tMSeries::tAnalog_Trigger_Etc::readAnalog_Trigger_Enable(nMDBG::tStatus2* s)
{
   return getAnalog_Trigger_Enable(s);
}

inline tMSeries::tAnalog_Trigger_Etc& tMSeries::tAnalog_Trigger_Etc::setAnalog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAnalog_Trigger_Etc::getAnalog_Trigger_Reset(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tAnalog_Trigger_Etc::writeAnalog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAnalog_Trigger_Reset(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAnalog_Trigger_Etc::readAnalog_Trigger_Reset(nMDBG::tStatus2* s)
{
   return getAnalog_Trigger_Reset(s);
}

inline tMSeries::tAnalog_Trigger_Etc& tMSeries::tAnalog_Trigger_Etc::setMisc_Counter_TCs_Output_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAnalog_Trigger_Etc::getMisc_Counter_TCs_Output_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tAnalog_Trigger_Etc::writeMisc_Counter_TCs_Output_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setMisc_Counter_TCs_Output_Enable(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAnalog_Trigger_Etc::readMisc_Counter_TCs_Output_Enable(nMDBG::tStatus2* s)
{
   return getMisc_Counter_TCs_Output_Enable(s);
}

inline tMSeries::tAnalog_Trigger_Etc& tMSeries::tAnalog_Trigger_Etc::setGPFO_1_Output_Select(tGPFO_1_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAnalog_Trigger_Etc::tGPFO_1_Output_Select tMSeries::tAnalog_Trigger_Etc::getGPFO_1_Output_Select(nMDBG::tStatus2*) const
{
   return (tGPFO_1_Output_Select)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tMSeries::tAnalog_Trigger_Etc::writeGPFO_1_Output_Select(tGPFO_1_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setGPFO_1_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAnalog_Trigger_Etc::tGPFO_1_Output_Select tMSeries::tAnalog_Trigger_Etc::readGPFO_1_Output_Select(nMDBG::tStatus2* s)
{
   return getGPFO_1_Output_Select(s);
}

inline tMSeries::tAnalog_Trigger_Etc& tMSeries::tAnalog_Trigger_Etc::setGPFO_0_Output_Select(tGPFO_0_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xc7ff)) | (((u16)fieldValue << 0xb) & ~0xc7ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAnalog_Trigger_Etc::tGPFO_0_Output_Select tMSeries::tAnalog_Trigger_Etc::getGPFO_0_Output_Select(nMDBG::tStatus2*) const
{
   return (tGPFO_0_Output_Select)((_softCopy & ~0xc7ff) >> 0xb);
}

inline void tMSeries::tAnalog_Trigger_Etc::writeGPFO_0_Output_Select(tGPFO_0_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setGPFO_0_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAnalog_Trigger_Etc::tGPFO_0_Output_Select tMSeries::tAnalog_Trigger_Etc::readGPFO_0_Output_Select(nMDBG::tStatus2* s)
{
   return getGPFO_0_Output_Select(s);
}

inline tMSeries::tAnalog_Trigger_Etc& tMSeries::tAnalog_Trigger_Etc::setGPFO_0_Output_Enable(tGPFO_0_Output_Enable fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAnalog_Trigger_Etc::tGPFO_0_Output_Enable tMSeries::tAnalog_Trigger_Etc::getGPFO_0_Output_Enable(nMDBG::tStatus2*) const
{
   return (tGPFO_0_Output_Enable)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tAnalog_Trigger_Etc::writeGPFO_0_Output_Enable(tGPFO_0_Output_Enable fieldValue, nMDBG::tStatus2* s)
{
   setGPFO_0_Output_Enable(fieldValue, s);
   flush(s);
}
inline tMSeries::tAnalog_Trigger_Etc::tGPFO_0_Output_Enable tMSeries::tAnalog_Trigger_Etc::readGPFO_0_Output_Enable(nMDBG::tStatus2* s)
{
   return getGPFO_0_Output_Enable(s);
}

inline tMSeries::tAnalog_Trigger_Etc& tMSeries::tAnalog_Trigger_Etc::setGPFO_1_Output_Enable(tGPFO_1_Output_Enable fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAnalog_Trigger_Etc::tGPFO_1_Output_Enable tMSeries::tAnalog_Trigger_Etc::getGPFO_1_Output_Enable(nMDBG::tStatus2*) const
{
   return (tGPFO_1_Output_Enable)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tAnalog_Trigger_Etc::writeGPFO_1_Output_Enable(tGPFO_1_Output_Enable fieldValue, nMDBG::tStatus2* s)
{
   setGPFO_1_Output_Enable(fieldValue, s);
   flush(s);
}
inline tMSeries::tAnalog_Trigger_Etc::tGPFO_1_Output_Enable tMSeries::tAnalog_Trigger_Etc::readGPFO_1_Output_Enable(nMDBG::tStatus2* s)
{
   return getGPFO_1_Output_Enable(s);
}

inline void tMSeries::tAnalog_Trigger_Etc::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_Trigger_Select::tAI_Trigger_Select()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_Trigger_Select::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_Trigger_Select::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_Trigger_Select& tMSeries::tAI_Trigger_Select::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAI_Trigger_Select::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_Trigger_Select::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAI_Trigger_Select::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAI_Trigger_Select::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_Trigger_Select& tMSeries::tAI_Trigger_Select::setAI_START1_Select(tAI_START1_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Trigger_Select::tAI_START1_Select tMSeries::tAI_Trigger_Select::getAI_START1_Select(nMDBG::tStatus2*) const
{
   return (tAI_START1_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tMSeries::tAI_Trigger_Select::writeAI_START1_Select(tAI_START1_Select fieldValue, nMDBG::tStatus2* s)
{
   setAI_START1_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Trigger_Select::tAI_START1_Select tMSeries::tAI_Trigger_Select::readAI_START1_Select(nMDBG::tStatus2* s)
{
   return getAI_START1_Select(s);
}

inline tMSeries::tAI_Trigger_Select& tMSeries::tAI_Trigger_Select::setAI_START1_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Trigger_Select::getAI_START1_Edge(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tAI_Trigger_Select::writeAI_START1_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_START1_Edge(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Trigger_Select::readAI_START1_Edge(nMDBG::tStatus2* s)
{
   return getAI_START1_Edge(s);
}

inline tMSeries::tAI_Trigger_Select& tMSeries::tAI_Trigger_Select::setAI_START1_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Trigger_Select::getAI_START1_Sync(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tAI_Trigger_Select::writeAI_START1_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_START1_Sync(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Trigger_Select::readAI_START1_Sync(nMDBG::tStatus2* s)
{
   return getAI_START1_Sync(s);
}

inline tMSeries::tAI_Trigger_Select& tMSeries::tAI_Trigger_Select::setAI_START2_Select(tAI_START2_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf07f)) | (((u16)fieldValue << 0x7) & ~0xf07f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Trigger_Select::tAI_START2_Select tMSeries::tAI_Trigger_Select::getAI_START2_Select(nMDBG::tStatus2*) const
{
   return (tAI_START2_Select)((_softCopy & ~0xf07f) >> 0x7);
}

inline void tMSeries::tAI_Trigger_Select::writeAI_START2_Select(tAI_START2_Select fieldValue, nMDBG::tStatus2* s)
{
   setAI_START2_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Trigger_Select::tAI_START2_Select tMSeries::tAI_Trigger_Select::readAI_START2_Select(nMDBG::tStatus2* s)
{
   return getAI_START2_Select(s);
}

inline tMSeries::tAI_Trigger_Select& tMSeries::tAI_Trigger_Select::setAI_START2_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Trigger_Select::getAI_START2_Edge(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tAI_Trigger_Select::writeAI_START2_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_START2_Edge(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Trigger_Select::readAI_START2_Edge(nMDBG::tStatus2* s)
{
   return getAI_START2_Edge(s);
}

inline tMSeries::tAI_Trigger_Select& tMSeries::tAI_Trigger_Select::setAI_START2_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Trigger_Select::getAI_START2_Sync(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tAI_Trigger_Select::writeAI_START2_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_START2_Sync(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Trigger_Select::readAI_START2_Sync(nMDBG::tStatus2* s)
{
   return getAI_START2_Sync(s);
}

inline tMSeries::tAI_Trigger_Select& tMSeries::tAI_Trigger_Select::setAI_START2_Polarity(tAI_START2_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Trigger_Select::tAI_START2_Polarity tMSeries::tAI_Trigger_Select::getAI_START2_Polarity(nMDBG::tStatus2*) const
{
   return (tAI_START2_Polarity)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tAI_Trigger_Select::writeAI_START2_Polarity(tAI_START2_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAI_START2_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Trigger_Select::tAI_START2_Polarity tMSeries::tAI_Trigger_Select::readAI_START2_Polarity(nMDBG::tStatus2* s)
{
   return getAI_START2_Polarity(s);
}

inline tMSeries::tAI_Trigger_Select& tMSeries::tAI_Trigger_Select::setAI_START1_Polarity(tAI_START1_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Trigger_Select::tAI_START1_Polarity tMSeries::tAI_Trigger_Select::getAI_START1_Polarity(nMDBG::tStatus2*) const
{
   return (tAI_START1_Polarity)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tAI_Trigger_Select::writeAI_START1_Polarity(tAI_START1_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAI_START1_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Trigger_Select::tAI_START1_Polarity tMSeries::tAI_Trigger_Select::readAI_START1_Polarity(nMDBG::tStatus2* s)
{
   return getAI_START1_Polarity(s);
}

inline void tMSeries::tAI_Trigger_Select::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_BC_Load_A::tAO_BC_Load_A()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_BC_Load_A::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_BC_Load_A::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_BC_Load_A& tMSeries::tAO_BC_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAO_BC_Load_A::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_BC_Load_A::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tAO_BC_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAO_BC_Load_A::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_BC_Load_A& tMSeries::tAO_BC_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAO_BC_Load_A::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAO_BC_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAO_BC_Load_A::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAO_BC_Load_A::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_BC_Load_B::tAO_BC_Load_B()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_BC_Load_B::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_BC_Load_B::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_BC_Load_B& tMSeries::tAO_BC_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAO_BC_Load_B::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_BC_Load_B::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tAO_BC_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAO_BC_Load_B::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_BC_Load_B& tMSeries::tAO_BC_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAO_BC_Load_B::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAO_BC_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAO_BC_Load_B::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAO_BC_Load_B::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_BC_Save::tAO_BC_Save()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_BC_Save::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tAO_BC_Save& tMSeries::tAO_BC_Save::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAO_BC_Save::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_BC_Save::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u32 tMSeries::tAO_BC_Save::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tAO_BC_Save& tMSeries::tAO_BC_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAO_BC_Save::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tMSeries::tAO_BC_Save::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void tMSeries::tAO_BC_Save::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Command_2::tAO_Command_2()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Command_2::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_Command_2::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Command_2::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffff3c0e);
}

inline void tMSeries::tAO_Command_2::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAO_Command_2::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_START1_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_START1_Pulse(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tAO_Command_2::writeAO_START1_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_START1_Pulse(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_START1_Pulse(nMDBG::tStatus2* s)
{
   return getAO_START1_Pulse(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_Mute_A(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_Mute_A(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tAO_Command_2::writeAO_Mute_A(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Mute_A(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_Mute_A(nMDBG::tStatus2* s)
{
   return getAO_Mute_A(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_Mute_B(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_Mute_B(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tAO_Command_2::writeAO_Mute_B(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Mute_B(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_Mute_B(nMDBG::tStatus2* s)
{
   return getAO_Mute_B(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_BC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_BC_Switch_Load_On_TC(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tAO_Command_2::writeAO_BC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_BC_Switch_Load_On_TC(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_BC_Switch_Load_On_TC(nMDBG::tStatus2* s)
{
   return getAO_BC_Switch_Load_On_TC(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_UC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_UC_Switch_Load_On_TC(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tAO_Command_2::writeAO_UC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UC_Switch_Load_On_TC(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_UC_Switch_Load_On_TC(nMDBG::tStatus2* s)
{
   return getAO_UC_Switch_Load_On_TC(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_UC_Switch_Load_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_UC_Switch_Load_On_BC_TC(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tAO_Command_2::writeAO_UC_Switch_Load_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UC_Switch_Load_On_BC_TC(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_UC_Switch_Load_On_BC_TC(nMDBG::tStatus2* s)
{
   return getAO_UC_Switch_Load_On_BC_TC(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_UI_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_UI_Switch_Load_On_TC(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tMSeries::tAO_Command_2::writeAO_UI_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UI_Switch_Load_On_TC(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_UI_Switch_Load_On_TC(nMDBG::tStatus2* s)
{
   return getAO_UI_Switch_Load_On_TC(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_UI_Switch_Load_On_Stop(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_UI_Switch_Load_On_Stop(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tAO_Command_2::writeAO_UI_Switch_Load_On_Stop(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UI_Switch_Load_On_Stop(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_UI_Switch_Load_On_Stop(nMDBG::tStatus2* s)
{
   return getAO_UI_Switch_Load_On_Stop(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_UI_Switch_Load_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_UI_Switch_Load_On_BC_TC(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tMSeries::tAO_Command_2::writeAO_UI_Switch_Load_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UI_Switch_Load_On_BC_TC(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_UI_Switch_Load_On_BC_TC(nMDBG::tStatus2* s)
{
   return getAO_UI_Switch_Load_On_BC_TC(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_BC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_BC_Save_Trace(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tAO_Command_2::writeAO_BC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_BC_Save_Trace(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_BC_Save_Trace(nMDBG::tStatus2* s)
{
   return getAO_BC_Save_Trace(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_BC_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Command_2::getAO_BC_Gate_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tAO_Command_2::writeAO_BC_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_BC_Gate_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Command_2::readAO_BC_Gate_Enable(nMDBG::tStatus2* s)
{
   return getAO_BC_Gate_Enable(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_UC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_UC_Save_Trace(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tAO_Command_2::writeAO_UC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UC_Save_Trace(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_UC_Save_Trace(nMDBG::tStatus2* s)
{
   return getAO_UC_Save_Trace(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_Start_Stop_Gate_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_Start_Stop_Gate_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tAO_Command_2::writeAO_Start_Stop_Gate_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Start_Stop_Gate_Enable(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_Start_Stop_Gate_Enable(nMDBG::tStatus2* s)
{
   return getAO_Start_Stop_Gate_Enable(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_End_On_UC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_End_On_UC_TC(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tAO_Command_2::writeAO_End_On_UC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_End_On_UC_TC(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_End_On_UC_TC(nMDBG::tStatus2* s)
{
   return getAO_End_On_UC_TC(s);
}

inline tMSeries::tAO_Command_2& tMSeries::tAO_Command_2::setAO_End_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_2::getAO_End_On_BC_TC(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tAO_Command_2::writeAO_End_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_End_On_BC_TC(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_2::readAO_End_On_BC_TC(nMDBG::tStatus2* s)
{
   return getAO_End_On_BC_TC(s);
}

inline void tMSeries::tAO_Command_2::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Command_1::tAO_Command_1()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Command_1::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_Command_1::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_Command_1& tMSeries::tAO_Command_1::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAO_Command_1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Command_1::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffff181e);
}

inline void tMSeries::tAO_Command_1::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAO_Command_1::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_Command_1& tMSeries::tAO_Command_1::setAO_UPDATE_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_1::getAO_UPDATE_Pulse(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tAO_Command_1::writeAO_UPDATE_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UPDATE_Pulse(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_1::readAO_UPDATE_Pulse(nMDBG::tStatus2* s)
{
   return getAO_UPDATE_Pulse(s);
}

inline tMSeries::tAO_Command_1& tMSeries::tAO_Command_1::setAO_DAC0_Update_Mode(tAO_DAC0_Update_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Command_1::tAO_DAC0_Update_Mode tMSeries::tAO_Command_1::getAO_DAC0_Update_Mode(nMDBG::tStatus2*) const
{
   return (tAO_DAC0_Update_Mode)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tAO_Command_1::writeAO_DAC0_Update_Mode(tAO_DAC0_Update_Mode fieldValue, nMDBG::tStatus2* s)
{
   setAO_DAC0_Update_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Command_1::tAO_DAC0_Update_Mode tMSeries::tAO_Command_1::readAO_DAC0_Update_Mode(nMDBG::tStatus2* s)
{
   return getAO_DAC0_Update_Mode(s);
}

inline tMSeries::tAO_Command_1& tMSeries::tAO_Command_1::setAO_DAC1_Update_Mode(tAO_DAC1_Update_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Command_1::tAO_DAC1_Update_Mode tMSeries::tAO_Command_1::getAO_DAC1_Update_Mode(nMDBG::tStatus2*) const
{
   return (tAO_DAC1_Update_Mode)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tAO_Command_1::writeAO_DAC1_Update_Mode(tAO_DAC1_Update_Mode fieldValue, nMDBG::tStatus2* s)
{
   setAO_DAC1_Update_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Command_1::tAO_DAC1_Update_Mode tMSeries::tAO_Command_1::readAO_DAC1_Update_Mode(nMDBG::tStatus2* s)
{
   return getAO_DAC1_Update_Mode(s);
}

inline tMSeries::tAO_Command_1& tMSeries::tAO_Command_1::setAO_BC_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_1::getAO_BC_Load(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tAO_Command_1::writeAO_BC_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_BC_Load(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_1::readAO_BC_Load(nMDBG::tStatus2* s)
{
   return getAO_BC_Load(s);
}

inline tMSeries::tAO_Command_1& tMSeries::tAO_Command_1::setAO_BC_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_1::getAO_BC_Arm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tAO_Command_1::writeAO_BC_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_BC_Arm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_1::readAO_BC_Arm(nMDBG::tStatus2* s)
{
   return getAO_BC_Arm(s);
}

inline tMSeries::tAO_Command_1& tMSeries::tAO_Command_1::setAO_UC_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_1::getAO_UC_Load(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tMSeries::tAO_Command_1::writeAO_UC_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UC_Load(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_1::readAO_UC_Load(nMDBG::tStatus2* s)
{
   return getAO_UC_Load(s);
}

inline tMSeries::tAO_Command_1& tMSeries::tAO_Command_1::setAO_UC_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_1::getAO_UC_Arm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tAO_Command_1::writeAO_UC_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UC_Arm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_1::readAO_UC_Arm(nMDBG::tStatus2* s)
{
   return getAO_UC_Arm(s);
}

inline tMSeries::tAO_Command_1& tMSeries::tAO_Command_1::setAO_UI_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_1::getAO_UI_Load(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tMSeries::tAO_Command_1::writeAO_UI_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UI_Load(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_1::readAO_UI_Load(nMDBG::tStatus2* s)
{
   return getAO_UI_Load(s);
}

inline tMSeries::tAO_Command_1& tMSeries::tAO_Command_1::setAO_UI_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_1::getAO_UI_Arm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tAO_Command_1::writeAO_UI_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UI_Arm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_1::readAO_UI_Arm(nMDBG::tStatus2* s)
{
   return getAO_UI_Arm(s);
}

inline tMSeries::tAO_Command_1& tMSeries::tAO_Command_1::setAO_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_1::getAO_Disarm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tAO_Command_1::writeAO_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Disarm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_1::readAO_Disarm(nMDBG::tStatus2* s)
{
   return getAO_Disarm(s);
}

inline tMSeries::tAO_Command_1& tMSeries::tAO_Command_1::setAO_START_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_1::getAO_START_Pulse(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tAO_Command_1::writeAO_START_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_START_Pulse(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_1::readAO_START_Pulse(nMDBG::tStatus2* s)
{
   return getAO_START_Pulse(s);
}

inline tMSeries::tAO_Command_1& tMSeries::tAO_Command_1::setAO_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Command_1::getAO_Analog_Trigger_Reset(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tAO_Command_1::writeAO_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Analog_Trigger_Reset(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Command_1::readAO_Analog_Trigger_Reset(nMDBG::tStatus2* s)
{
   return getAO_Analog_Trigger_Reset(s);
}

inline void tMSeries::tAO_Command_1::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Mode_1::tAO_Mode_1()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Mode_1::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_Mode_1::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_Mode_1& tMSeries::tAO_Mode_1::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAO_Mode_1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Mode_1::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAO_Mode_1::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAO_Mode_1::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_Mode_1& tMSeries::tAO_Mode_1::setAO_Trigger_Once(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Mode_1::getAO_Trigger_Once(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tAO_Mode_1::writeAO_Trigger_Once(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_Trigger_Once(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Mode_1::readAO_Trigger_Once(nMDBG::tStatus2* s)
{
   return getAO_Trigger_Once(s);
}

inline tMSeries::tAO_Mode_1& tMSeries::tAO_Mode_1::setAO_Continuous(tAO_Continuous fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Mode_1::tAO_Continuous tMSeries::tAO_Mode_1::getAO_Continuous(nMDBG::tStatus2*) const
{
   return (tAO_Continuous)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tAO_Mode_1::writeAO_Continuous(tAO_Continuous fieldValue, nMDBG::tStatus2* s)
{
   setAO_Continuous(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Mode_1::tAO_Continuous tMSeries::tAO_Mode_1::readAO_Continuous(nMDBG::tStatus2* s)
{
   return getAO_Continuous(s);
}

inline tMSeries::tAO_Mode_1& tMSeries::tAO_Mode_1::setAO_UC_Switch_Load_Every_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Mode_1::getAO_UC_Switch_Load_Every_TC(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tAO_Mode_1::writeAO_UC_Switch_Load_Every_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UC_Switch_Load_Every_TC(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Mode_1::readAO_UC_Switch_Load_Every_TC(nMDBG::tStatus2* s)
{
   return getAO_UC_Switch_Load_Every_TC(s);
}

inline tMSeries::tAO_Mode_1& tMSeries::tAO_Mode_1::setAO_UI_Source_Polarity(tAO_UI_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Mode_1::tAO_UI_Source_Polarity tMSeries::tAO_Mode_1::getAO_UI_Source_Polarity(nMDBG::tStatus2*) const
{
   return (tAO_UI_Source_Polarity)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tAO_Mode_1::writeAO_UI_Source_Polarity(tAO_UI_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAO_UI_Source_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Mode_1::tAO_UI_Source_Polarity tMSeries::tAO_Mode_1::readAO_UI_Source_Polarity(nMDBG::tStatus2* s)
{
   return getAO_UI_Source_Polarity(s);
}

inline tMSeries::tAO_Mode_1& tMSeries::tAO_Mode_1::setAO_UPDATE_Source_Polarity(tAO_UPDATE_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Mode_1::tAO_UPDATE_Source_Polarity tMSeries::tAO_Mode_1::getAO_UPDATE_Source_Polarity(nMDBG::tStatus2*) const
{
   return (tAO_UPDATE_Source_Polarity)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tAO_Mode_1::writeAO_UPDATE_Source_Polarity(tAO_UPDATE_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAO_UPDATE_Source_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Mode_1::tAO_UPDATE_Source_Polarity tMSeries::tAO_Mode_1::readAO_UPDATE_Source_Polarity(nMDBG::tStatus2* s)
{
   return getAO_UPDATE_Source_Polarity(s);
}

inline tMSeries::tAO_Mode_1& tMSeries::tAO_Mode_1::setAO_Multiple_Channels(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Mode_1::getAO_Multiple_Channels(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tAO_Mode_1::writeAO_Multiple_Channels(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_Multiple_Channels(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Mode_1::readAO_Multiple_Channels(nMDBG::tStatus2* s)
{
   return getAO_Multiple_Channels(s);
}

inline tMSeries::tAO_Mode_1& tMSeries::tAO_Mode_1::setAO_UI_Source_Select(tAO_UI_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf83f)) | (((u16)fieldValue << 0x6) & ~0xf83f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Mode_1::tAO_UI_Source_Select tMSeries::tAO_Mode_1::getAO_UI_Source_Select(nMDBG::tStatus2*) const
{
   return (tAO_UI_Source_Select)((_softCopy & ~0xf83f) >> 0x6);
}

inline void tMSeries::tAO_Mode_1::writeAO_UI_Source_Select(tAO_UI_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   setAO_UI_Source_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Mode_1::tAO_UI_Source_Select tMSeries::tAO_Mode_1::readAO_UI_Source_Select(nMDBG::tStatus2* s)
{
   return getAO_UI_Source_Select(s);
}

inline tMSeries::tAO_Mode_1& tMSeries::tAO_Mode_1::setAO_UPDATE_Source_Select(tAO_UPDATE_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7ff)) | (((u16)fieldValue << 0xb) & ~0x7ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Mode_1::tAO_UPDATE_Source_Select tMSeries::tAO_Mode_1::getAO_UPDATE_Source_Select(nMDBG::tStatus2*) const
{
   return (tAO_UPDATE_Source_Select)((_softCopy & ~0x7ff) >> 0xb);
}

inline void tMSeries::tAO_Mode_1::writeAO_UPDATE_Source_Select(tAO_UPDATE_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   setAO_UPDATE_Source_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Mode_1::tAO_UPDATE_Source_Select tMSeries::tAO_Mode_1::readAO_UPDATE_Source_Select(nMDBG::tStatus2* s)
{
   return getAO_UPDATE_Source_Select(s);
}

inline void tMSeries::tAO_Mode_1::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Mode_2::tAO_Mode_2()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Mode_2::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_Mode_2::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_Mode_2& tMSeries::tAO_Mode_2::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAO_Mode_2::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Mode_2::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAO_Mode_2::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAO_Mode_2::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_Mode_2& tMSeries::tAO_Mode_2::setAO_BC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Mode_2::getAO_BC_Write_Switch(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tAO_Mode_2::writeAO_BC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_BC_Write_Switch(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Mode_2::readAO_BC_Write_Switch(nMDBG::tStatus2* s)
{
   return getAO_BC_Write_Switch(s);
}

inline tMSeries::tAO_Mode_2& tMSeries::tAO_Mode_2::setAO_BC_Reload_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Mode_2::getAO_BC_Reload_Mode(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tAO_Mode_2::writeAO_BC_Reload_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_BC_Reload_Mode(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Mode_2::readAO_BC_Reload_Mode(nMDBG::tStatus2* s)
{
   return getAO_BC_Reload_Mode(s);
}

inline tMSeries::tAO_Mode_2& tMSeries::tAO_Mode_2::setAO_BC_Initial_Load_Source(tAO_BC_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Mode_2::tAO_BC_Initial_Load_Source tMSeries::tAO_Mode_2::getAO_BC_Initial_Load_Source(nMDBG::tStatus2*) const
{
   return (tAO_BC_Initial_Load_Source)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tAO_Mode_2::writeAO_BC_Initial_Load_Source(tAO_BC_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
   setAO_BC_Initial_Load_Source(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Mode_2::tAO_BC_Initial_Load_Source tMSeries::tAO_Mode_2::readAO_BC_Initial_Load_Source(nMDBG::tStatus2* s)
{
   return getAO_BC_Initial_Load_Source(s);
}

inline tMSeries::tAO_Mode_2& tMSeries::tAO_Mode_2::setAO_UI_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Mode_2::getAO_UI_Write_Switch(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tAO_Mode_2::writeAO_UI_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UI_Write_Switch(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Mode_2::readAO_UI_Write_Switch(nMDBG::tStatus2* s)
{
   return getAO_UI_Write_Switch(s);
}

inline tMSeries::tAO_Mode_2& tMSeries::tAO_Mode_2::setAO_UI_Reload_Mode(tAO_UI_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff8f)) | (((u16)fieldValue << 0x4) & ~0xff8f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Mode_2::tAO_UI_Reload_Mode tMSeries::tAO_Mode_2::getAO_UI_Reload_Mode(nMDBG::tStatus2*) const
{
   return (tAO_UI_Reload_Mode)((_softCopy & ~0xff8f) >> 0x4);
}

inline void tMSeries::tAO_Mode_2::writeAO_UI_Reload_Mode(tAO_UI_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
   setAO_UI_Reload_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Mode_2::tAO_UI_Reload_Mode tMSeries::tAO_Mode_2::readAO_UI_Reload_Mode(nMDBG::tStatus2* s)
{
   return getAO_UI_Reload_Mode(s);
}

inline tMSeries::tAO_Mode_2& tMSeries::tAO_Mode_2::setAO_UI_Initial_Load_Source(tAO_UI_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Mode_2::tAO_UI_Initial_Load_Source tMSeries::tAO_Mode_2::getAO_UI_Initial_Load_Source(nMDBG::tStatus2*) const
{
   return (tAO_UI_Initial_Load_Source)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tMSeries::tAO_Mode_2::writeAO_UI_Initial_Load_Source(tAO_UI_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
   setAO_UI_Initial_Load_Source(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Mode_2::tAO_UI_Initial_Load_Source tMSeries::tAO_Mode_2::readAO_UI_Initial_Load_Source(nMDBG::tStatus2* s)
{
   return getAO_UI_Initial_Load_Source(s);
}

inline tMSeries::tAO_Mode_2& tMSeries::tAO_Mode_2::setAO_UC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Mode_2::getAO_UC_Write_Switch(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tAO_Mode_2::writeAO_UC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UC_Write_Switch(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Mode_2::readAO_UC_Write_Switch(nMDBG::tStatus2* s)
{
   return getAO_UC_Write_Switch(s);
}

inline tMSeries::tAO_Mode_2& tMSeries::tAO_Mode_2::setAO_UC_Initial_Load_Source(tAO_UC_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Mode_2::tAO_UC_Initial_Load_Source tMSeries::tAO_Mode_2::getAO_UC_Initial_Load_Source(nMDBG::tStatus2*) const
{
   return (tAO_UC_Initial_Load_Source)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tAO_Mode_2::writeAO_UC_Initial_Load_Source(tAO_UC_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
   setAO_UC_Initial_Load_Source(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Mode_2::tAO_UC_Initial_Load_Source tMSeries::tAO_Mode_2::readAO_UC_Initial_Load_Source(nMDBG::tStatus2* s)
{
   return getAO_UC_Initial_Load_Source(s);
}

inline tMSeries::tAO_Mode_2& tMSeries::tAO_Mode_2::setAO_START1_Disable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Mode_2::getAO_START1_Disable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tAO_Mode_2::writeAO_START1_Disable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_START1_Disable(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Mode_2::readAO_START1_Disable(nMDBG::tStatus2* s)
{
   return getAO_START1_Disable(s);
}

inline tMSeries::tAO_Mode_2& tMSeries::tAO_Mode_2::setAO_FIFO_Retransmit_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Mode_2::getAO_FIFO_Retransmit_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tAO_Mode_2::writeAO_FIFO_Retransmit_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_FIFO_Retransmit_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Mode_2::readAO_FIFO_Retransmit_Enable(nMDBG::tStatus2* s)
{
   return getAO_FIFO_Retransmit_Enable(s);
}

inline tMSeries::tAO_Mode_2& tMSeries::tAO_Mode_2::setAO_FIFO_Mode(tAO_FIFO_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x3fff)) | (((u16)fieldValue << 0xe) & ~0x3fff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Mode_2::tAO_FIFO_Mode tMSeries::tAO_Mode_2::getAO_FIFO_Mode(nMDBG::tStatus2*) const
{
   return (tAO_FIFO_Mode)((_softCopy & ~0x3fff) >> 0xe);
}

inline void tMSeries::tAO_Mode_2::writeAO_FIFO_Mode(tAO_FIFO_Mode fieldValue, nMDBG::tStatus2* s)
{
   setAO_FIFO_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Mode_2::tAO_FIFO_Mode tMSeries::tAO_Mode_2::readAO_FIFO_Mode(nMDBG::tStatus2* s)
{
   return getAO_FIFO_Mode(s);
}

inline void tMSeries::tAO_Mode_2::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Output_Control::tAO_Output_Control()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Output_Control::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_Output_Control::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_Output_Control& tMSeries::tAO_Output_Control::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAO_Output_Control::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Output_Control::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAO_Output_Control::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAO_Output_Control::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_Output_Control& tMSeries::tAO_Output_Control::setAO_UPDATE_Output_Select(tAO_UPDATE_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffc)) | (((u16)fieldValue << 0x0) & ~0xfffc);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Output_Control::tAO_UPDATE_Output_Select tMSeries::tAO_Output_Control::getAO_UPDATE_Output_Select(nMDBG::tStatus2*) const
{
   return (tAO_UPDATE_Output_Select)((_softCopy & ~0xfffc) >> 0x0);
}

inline void tMSeries::tAO_Output_Control::writeAO_UPDATE_Output_Select(tAO_UPDATE_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setAO_UPDATE_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Output_Control::tAO_UPDATE_Output_Select tMSeries::tAO_Output_Control::readAO_UPDATE_Output_Select(nMDBG::tStatus2* s)
{
   return getAO_UPDATE_Output_Select(s);
}

inline tMSeries::tAO_Output_Control& tMSeries::tAO_Output_Control::setAO_External_Gate_Polarity(tAO_External_Gate_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Output_Control::tAO_External_Gate_Polarity tMSeries::tAO_Output_Control::getAO_External_Gate_Polarity(nMDBG::tStatus2*) const
{
   return (tAO_External_Gate_Polarity)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tAO_Output_Control::writeAO_External_Gate_Polarity(tAO_External_Gate_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAO_External_Gate_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Output_Control::tAO_External_Gate_Polarity tMSeries::tAO_Output_Control::readAO_External_Gate_Polarity(nMDBG::tStatus2* s)
{
   return getAO_External_Gate_Polarity(s);
}

inline tMSeries::tAO_Output_Control& tMSeries::tAO_Output_Control::setAO_Number_Of_Channels(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfc3f)) | (((u16)fieldValue << 0x6) & ~0xfc3f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Output_Control::getAO_Number_Of_Channels(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfc3f) >> 0x6);
}

inline void tMSeries::tAO_Output_Control::writeAO_Number_Of_Channels(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Number_Of_Channels(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Output_Control::readAO_Number_Of_Channels(nMDBG::tStatus2* s)
{
   return getAO_Number_Of_Channels(s);
}

inline tMSeries::tAO_Output_Control& tMSeries::tAO_Output_Control::setAO_External_Gate_Select(tAO_External_Gate_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x83ff)) | (((u16)fieldValue << 0xa) & ~0x83ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Output_Control::tAO_External_Gate_Select tMSeries::tAO_Output_Control::getAO_External_Gate_Select(nMDBG::tStatus2*) const
{
   return (tAO_External_Gate_Select)((_softCopy & ~0x83ff) >> 0xa);
}

inline void tMSeries::tAO_Output_Control::writeAO_External_Gate_Select(tAO_External_Gate_Select fieldValue, nMDBG::tStatus2* s)
{
   setAO_External_Gate_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Output_Control::tAO_External_Gate_Select tMSeries::tAO_Output_Control::readAO_External_Gate_Select(nMDBG::tStatus2* s)
{
   return getAO_External_Gate_Select(s);
}

inline tMSeries::tAO_Output_Control& tMSeries::tAO_Output_Control::setAO_External_Gate_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Output_Control::getAO_External_Gate_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tAO_Output_Control::writeAO_External_Gate_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_External_Gate_Enable(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Output_Control::readAO_External_Gate_Enable(nMDBG::tStatus2* s)
{
   return getAO_External_Gate_Enable(s);
}

inline void tMSeries::tAO_Output_Control::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Mode_3::tAO_Mode_3()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Mode_3::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_Mode_3::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_Mode_3& tMSeries::tAO_Mode_3::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAO_Mode_3::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Mode_3::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAO_Mode_3::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAO_Mode_3::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_Mode_3& tMSeries::tAO_Mode_3::setAO_Last_Gate_Disable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Mode_3::getAO_Last_Gate_Disable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tAO_Mode_3::writeAO_Last_Gate_Disable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Last_Gate_Disable(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Mode_3::readAO_Last_Gate_Disable(nMDBG::tStatus2* s)
{
   return getAO_Last_Gate_Disable(s);
}

inline tMSeries::tAO_Mode_3& tMSeries::tAO_Mode_3::setAO_Software_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Mode_3::getAO_Software_Gate(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tAO_Mode_3::writeAO_Software_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Software_Gate(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Mode_3::readAO_Software_Gate(nMDBG::tStatus2* s)
{
   return getAO_Software_Gate(s);
}

inline tMSeries::tAO_Mode_3& tMSeries::tAO_Mode_3::setAO_Not_An_UPDATE(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Mode_3::getAO_Not_An_UPDATE(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tAO_Mode_3::writeAO_Not_An_UPDATE(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Not_An_UPDATE(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Mode_3::readAO_Not_An_UPDATE(nMDBG::tStatus2* s)
{
   return getAO_Not_An_UPDATE(s);
}

inline tMSeries::tAO_Mode_3& tMSeries::tAO_Mode_3::setAO_Stop_On_BC_TC_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Mode_3::getAO_Stop_On_BC_TC_Error(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tAO_Mode_3::writeAO_Stop_On_BC_TC_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_Stop_On_BC_TC_Error(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Mode_3::readAO_Stop_On_BC_TC_Error(nMDBG::tStatus2* s)
{
   return getAO_Stop_On_BC_TC_Error(s);
}

inline tMSeries::tAO_Mode_3& tMSeries::tAO_Mode_3::setAO_Stop_On_BC_TC_Trigger_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Mode_3::getAO_Stop_On_BC_TC_Trigger_Error(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tAO_Mode_3::writeAO_Stop_On_BC_TC_Trigger_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_Stop_On_BC_TC_Trigger_Error(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Mode_3::readAO_Stop_On_BC_TC_Trigger_Error(nMDBG::tStatus2* s)
{
   return getAO_Stop_On_BC_TC_Trigger_Error(s);
}

inline tMSeries::tAO_Mode_3& tMSeries::tAO_Mode_3::setAO_Stop_On_Overrun_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Mode_3::getAO_Stop_On_Overrun_Error(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tAO_Mode_3::writeAO_Stop_On_Overrun_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_Stop_On_Overrun_Error(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Mode_3::readAO_Stop_On_Overrun_Error(nMDBG::tStatus2* s)
{
   return getAO_Stop_On_Overrun_Error(s);
}

inline tMSeries::tAO_Mode_3& tMSeries::tAO_Mode_3::setAO_Trigger_Length(tAO_Trigger_Length fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Mode_3::tAO_Trigger_Length tMSeries::tAO_Mode_3::getAO_Trigger_Length(nMDBG::tStatus2*) const
{
   return (tAO_Trigger_Length)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tAO_Mode_3::writeAO_Trigger_Length(tAO_Trigger_Length fieldValue, nMDBG::tStatus2* s)
{
   setAO_Trigger_Length(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Mode_3::tAO_Trigger_Length tMSeries::tAO_Mode_3::readAO_Trigger_Length(nMDBG::tStatus2* s)
{
   return getAO_Trigger_Length(s);
}

inline tMSeries::tAO_Mode_3& tMSeries::tAO_Mode_3::setAO_UC_Switch_Load_Every_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Mode_3::getAO_UC_Switch_Load_Every_BC_TC(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tAO_Mode_3::writeAO_UC_Switch_Load_Every_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UC_Switch_Load_Every_BC_TC(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_Mode_3::readAO_UC_Switch_Load_Every_BC_TC(nMDBG::tStatus2* s)
{
   return getAO_UC_Switch_Load_Every_BC_TC(s);
}

inline void tMSeries::tAO_Mode_3::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Personal::tAO_Personal()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Personal::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_Personal::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_Personal& tMSeries::tAO_Personal::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAO_Personal::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Personal::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAO_Personal::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAO_Personal::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_Personal& tMSeries::tAO_Personal::setAO_Interval_Buffer_Mode(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Personal::getAO_Interval_Buffer_Mode(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tAO_Personal::writeAO_Interval_Buffer_Mode(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_Interval_Buffer_Mode(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Personal::readAO_Interval_Buffer_Mode(nMDBG::tStatus2* s)
{
   return getAO_Interval_Buffer_Mode(s);
}

inline tMSeries::tAO_Personal& tMSeries::tAO_Personal::setAO_BC_Source_Select(tAO_BC_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Personal::tAO_BC_Source_Select tMSeries::tAO_Personal::getAO_BC_Source_Select(nMDBG::tStatus2*) const
{
   return (tAO_BC_Source_Select)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tAO_Personal::writeAO_BC_Source_Select(tAO_BC_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   setAO_BC_Source_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Personal::tAO_BC_Source_Select tMSeries::tAO_Personal::readAO_BC_Source_Select(nMDBG::tStatus2* s)
{
   return getAO_BC_Source_Select(s);
}

inline tMSeries::tAO_Personal& tMSeries::tAO_Personal::setAO_UPDATE_Pulse_Width(tAO_UPDATE_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Personal::tAO_UPDATE_Pulse_Width tMSeries::tAO_Personal::getAO_UPDATE_Pulse_Width(nMDBG::tStatus2*) const
{
   return (tAO_UPDATE_Pulse_Width)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tAO_Personal::writeAO_UPDATE_Pulse_Width(tAO_UPDATE_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
   setAO_UPDATE_Pulse_Width(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Personal::tAO_UPDATE_Pulse_Width tMSeries::tAO_Personal::readAO_UPDATE_Pulse_Width(nMDBG::tStatus2* s)
{
   return getAO_UPDATE_Pulse_Width(s);
}

inline tMSeries::tAO_Personal& tMSeries::tAO_Personal::setAO_UPDATE_Pulse_Timebase(tAO_UPDATE_Pulse_Timebase fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Personal::tAO_UPDATE_Pulse_Timebase tMSeries::tAO_Personal::getAO_UPDATE_Pulse_Timebase(nMDBG::tStatus2*) const
{
   return (tAO_UPDATE_Pulse_Timebase)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tAO_Personal::writeAO_UPDATE_Pulse_Timebase(tAO_UPDATE_Pulse_Timebase fieldValue, nMDBG::tStatus2* s)
{
   setAO_UPDATE_Pulse_Timebase(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Personal::tAO_UPDATE_Pulse_Timebase tMSeries::tAO_Personal::readAO_UPDATE_Pulse_Timebase(nMDBG::tStatus2* s)
{
   return getAO_UPDATE_Pulse_Timebase(s);
}

inline tMSeries::tAO_Personal& tMSeries::tAO_Personal::setAO_UPDATE_Original_Pulse(tAO_UPDATE_Original_Pulse fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Personal::tAO_UPDATE_Original_Pulse tMSeries::tAO_Personal::getAO_UPDATE_Original_Pulse(nMDBG::tStatus2*) const
{
   return (tAO_UPDATE_Original_Pulse)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tMSeries::tAO_Personal::writeAO_UPDATE_Original_Pulse(tAO_UPDATE_Original_Pulse fieldValue, nMDBG::tStatus2* s)
{
   setAO_UPDATE_Original_Pulse(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Personal::tAO_UPDATE_Original_Pulse tMSeries::tAO_Personal::readAO_UPDATE_Original_Pulse(nMDBG::tStatus2* s)
{
   return getAO_UPDATE_Original_Pulse(s);
}

inline tMSeries::tAO_Personal& tMSeries::tAO_Personal::setAO_FIFO_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Personal::getAO_FIFO_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tAO_Personal::writeAO_FIFO_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_FIFO_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Personal::readAO_FIFO_Enable(nMDBG::tStatus2* s)
{
   return getAO_FIFO_Enable(s);
}

inline tMSeries::tAO_Personal& tMSeries::tAO_Personal::setAO_TMRDACWR_Pulse_Width(tAO_TMRDACWR_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Personal::tAO_TMRDACWR_Pulse_Width tMSeries::tAO_Personal::getAO_TMRDACWR_Pulse_Width(nMDBG::tStatus2*) const
{
   return (tAO_TMRDACWR_Pulse_Width)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tAO_Personal::writeAO_TMRDACWR_Pulse_Width(tAO_TMRDACWR_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
   setAO_TMRDACWR_Pulse_Width(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Personal::tAO_TMRDACWR_Pulse_Width tMSeries::tAO_Personal::readAO_TMRDACWR_Pulse_Width(nMDBG::tStatus2* s)
{
   return getAO_TMRDACWR_Pulse_Width(s);
}

inline tMSeries::tAO_Personal& tMSeries::tAO_Personal::setAO_Number_Of_DAC_Packages(tAO_Number_Of_DAC_Packages fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Personal::tAO_Number_Of_DAC_Packages tMSeries::tAO_Personal::getAO_Number_Of_DAC_Packages(nMDBG::tStatus2*) const
{
   return (tAO_Number_Of_DAC_Packages)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tAO_Personal::writeAO_Number_Of_DAC_Packages(tAO_Number_Of_DAC_Packages fieldValue, nMDBG::tStatus2* s)
{
   setAO_Number_Of_DAC_Packages(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Personal::tAO_Number_Of_DAC_Packages tMSeries::tAO_Personal::readAO_Number_Of_DAC_Packages(nMDBG::tStatus2* s)
{
   return getAO_Number_Of_DAC_Packages(s);
}

inline tMSeries::tAO_Personal& tMSeries::tAO_Personal::setAO_Multiple_DACS_Per_Package(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Personal::getAO_Multiple_DACS_Per_Package(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tAO_Personal::writeAO_Multiple_DACS_Per_Package(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_Multiple_DACS_Per_Package(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Personal::readAO_Multiple_DACS_Per_Package(nMDBG::tStatus2* s)
{
   return getAO_Multiple_DACS_Per_Package(s);
}

inline void tMSeries::tAO_Personal::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_START_Select::tAO_START_Select()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_START_Select::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_START_Select::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_START_Select& tMSeries::tAO_START_Select::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAO_START_Select::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_START_Select::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAO_START_Select::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAO_START_Select::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_START_Select& tMSeries::tAO_START_Select::set(tDefault fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_START_Select::tDefault tMSeries::tAO_START_Select::get(nMDBG::tStatus2*) const
{
   return (tDefault)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tMSeries::tAO_START_Select::write(tDefault fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_START_Select::tDefault tMSeries::tAO_START_Select::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline tMSeries::tAO_START_Select& tMSeries::tAO_START_Select::setAO_START_Edge(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_START_Select::getAO_START_Edge(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tAO_START_Select::writeAO_START_Edge(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_START_Edge(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_START_Select::readAO_START_Edge(nMDBG::tStatus2* s)
{
   return getAO_START_Edge(s);
}

inline tMSeries::tAO_START_Select& tMSeries::tAO_START_Select::setAO_START_Sync(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_START_Select::getAO_START_Sync(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tAO_START_Select::writeAO_START_Sync(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_START_Sync(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_START_Select::readAO_START_Sync(nMDBG::tStatus2* s)
{
   return getAO_START_Sync(s);
}

inline tMSeries::tAO_START_Select& tMSeries::tAO_START_Select::setAO_AOFREQ_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_START_Select::getAO_AOFREQ_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tAO_START_Select::writeAO_AOFREQ_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_AOFREQ_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_START_Select::readAO_AOFREQ_Enable(nMDBG::tStatus2* s)
{
   return getAO_AOFREQ_Enable(s);
}

inline tMSeries::tAO_START_Select& tMSeries::tAO_START_Select::setAO_START_Polarity(tAO_START_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_START_Select::tAO_START_Polarity tMSeries::tAO_START_Select::getAO_START_Polarity(nMDBG::tStatus2*) const
{
   return (tAO_START_Polarity)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tAO_START_Select::writeAO_START_Polarity(tAO_START_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAO_START_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_START_Select::tAO_START_Polarity tMSeries::tAO_START_Select::readAO_START_Polarity(nMDBG::tStatus2* s)
{
   return getAO_START_Polarity(s);
}

inline void tMSeries::tAO_START_Select::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Status_2::tAO_Status_2()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Status_2::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tAO_Status_2& tMSeries::tAO_Status_2::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAO_Status_2::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Status_2::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u16 tMSeries::tAO_Status_2::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tAO_Status_2& tMSeries::tAO_Status_2::setAO_BC_Armed_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_2::getAO_BC_Armed_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline u16 tMSeries::tAO_Status_2::readAO_BC_Armed_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_BC_Armed_St(s);
}

inline tMSeries::tAO_Status_2& tMSeries::tAO_Status_2::setAO_BC_Save_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_2::getAO_BC_Save_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline u16 tMSeries::tAO_Status_2::readAO_BC_Save_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_BC_Save_St(s);
}

inline tMSeries::tAO_Status_2& tMSeries::tAO_Status_2::setAO_BC_Q_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_2::getAO_BC_Q_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline u16 tMSeries::tAO_Status_2::readAO_BC_Q_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_BC_Q_St(s);
}

inline tMSeries::tAO_Status_2& tMSeries::tAO_Status_2::setAO_BC_TC_Trigger_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_2::getAO_BC_TC_Trigger_Error_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline u16 tMSeries::tAO_Status_2::readAO_BC_TC_Trigger_Error_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_BC_TC_Trigger_Error_St(s);
}

inline tMSeries::tAO_Status_2& tMSeries::tAO_Status_2::setAO_UI_Armed_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_2::getAO_UI_Armed_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline u16 tMSeries::tAO_Status_2::readAO_UI_Armed_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_UI_Armed_St(s);
}

inline tMSeries::tAO_Status_2& tMSeries::tAO_Status_2::setAO_UI_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_2::getAO_UI_Next_Load_Source_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline u16 tMSeries::tAO_Status_2::readAO_UI_Next_Load_Source_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_UI_Next_Load_Source_St(s);
}

inline tMSeries::tAO_Status_2& tMSeries::tAO_Status_2::setAO_UC_Save_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_2::getAO_UC_Save_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline u16 tMSeries::tAO_Status_2::readAO_UC_Save_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_UC_Save_St(s);
}

inline tMSeries::tAO_Status_2& tMSeries::tAO_Status_2::setAO_UI_Count_Enabled_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_2::getAO_UI_Count_Enabled_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline u16 tMSeries::tAO_Status_2::readAO_UI_Count_Enabled_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_UI_Count_Enabled_St(s);
}

inline tMSeries::tAO_Status_2& tMSeries::tAO_Status_2::setAO_UI_Q_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_2::getAO_UI_Q_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline u16 tMSeries::tAO_Status_2::readAO_UI_Q_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_UI_Q_St(s);
}

inline tMSeries::tAO_Status_2& tMSeries::tAO_Status_2::setAO_UC_Armed_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_2::getAO_UC_Armed_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tMSeries::tAO_Status_2::readAO_UC_Armed_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_UC_Armed_St(s);
}

inline void tMSeries::tAO_Status_2::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Status_1::tAO_Status_1()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Status_1::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Status_1::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u16 tMSeries::tAO_Status_1::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setPass_Thru_1_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getPass_Thru_1_Interrupt_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline u16 tMSeries::tAO_Status_1::readPass_Thru_1_Interrupt_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getPass_Thru_1_Interrupt_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setAO_FIFO_Request_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getAO_FIFO_Request_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline u16 tMSeries::tAO_Status_1::readAO_FIFO_Request_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_FIFO_Request_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setG1_Gate_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getG1_Gate_Interrupt_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline u16 tMSeries::tAO_Status_1::readG1_Gate_Interrupt_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Gate_Interrupt_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setG1_TC_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getG1_TC_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline u16 tMSeries::tAO_Status_1::readG1_TC_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_TC_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setAO_UPDATE_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getAO_UPDATE_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline u16 tMSeries::tAO_Status_1::readAO_UPDATE_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_UPDATE_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setAO_UC_TC_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getAO_UC_TC_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline u16 tMSeries::tAO_Status_1::readAO_UC_TC_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_UC_TC_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setAO_BC_TC_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getAO_BC_TC_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline u16 tMSeries::tAO_Status_1::readAO_BC_TC_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_BC_TC_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setAO_START1_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getAO_START1_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline u16 tMSeries::tAO_Status_1::readAO_START1_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_START1_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setAO_Overrun_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getAO_Overrun_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline u16 tMSeries::tAO_Status_1::readAO_Overrun_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_Overrun_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setAO_START_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getAO_START_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline u16 tMSeries::tAO_Status_1::readAO_START_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_START_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setAO_BC_TC_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getAO_BC_TC_Error_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline u16 tMSeries::tAO_Status_1::readAO_BC_TC_Error_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_BC_TC_Error_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setAO_FIFO_Empty_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getAO_FIFO_Empty_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline u16 tMSeries::tAO_Status_1::readAO_FIFO_Empty_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_FIFO_Empty_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setAO_FIFO_Half_Full_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getAO_FIFO_Half_Full_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline u16 tMSeries::tAO_Status_1::readAO_FIFO_Half_Full_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_FIFO_Half_Full_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setAO_FIFO_Full_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getAO_FIFO_Full_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tMSeries::tAO_Status_1::readAO_FIFO_Full_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_FIFO_Full_St(s);
}

inline tMSeries::tAO_Status_1& tMSeries::tAO_Status_1::setInterrupt_Group_B_Status(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_Status_1::getInterrupt_Group_B_Status(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tMSeries::tAO_Status_1::readInterrupt_Group_B_Status(nMDBG::tStatus2* s)
{
   refresh(s);
   return getInterrupt_Group_B_Status(s);
}

inline void tMSeries::tAO_Status_1::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Trigger_Select::tAO_Trigger_Select()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Trigger_Select::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_Trigger_Select::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_Trigger_Select& tMSeries::tAO_Trigger_Select::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAO_Trigger_Select::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Trigger_Select::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAO_Trigger_Select::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAO_Trigger_Select::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_Trigger_Select& tMSeries::tAO_Trigger_Select::setAO_START1_Select(tAO_START1_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Trigger_Select::tAO_START1_Select tMSeries::tAO_Trigger_Select::getAO_START1_Select(nMDBG::tStatus2*) const
{
   return (tAO_START1_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tMSeries::tAO_Trigger_Select::writeAO_START1_Select(tAO_START1_Select fieldValue, nMDBG::tStatus2* s)
{
   setAO_START1_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Trigger_Select::tAO_START1_Select tMSeries::tAO_Trigger_Select::readAO_START1_Select(nMDBG::tStatus2* s)
{
   return getAO_START1_Select(s);
}

inline tMSeries::tAO_Trigger_Select& tMSeries::tAO_Trigger_Select::setAO_START1_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Trigger_Select::getAO_START1_Edge(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tAO_Trigger_Select::writeAO_START1_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_START1_Edge(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Trigger_Select::readAO_START1_Edge(nMDBG::tStatus2* s)
{
   return getAO_START1_Edge(s);
}

inline tMSeries::tAO_Trigger_Select& tMSeries::tAO_Trigger_Select::setAO_START1_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Trigger_Select::getAO_START1_Sync(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tAO_Trigger_Select::writeAO_START1_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_START1_Sync(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Trigger_Select::readAO_START1_Sync(nMDBG::tStatus2* s)
{
   return getAO_START1_Sync(s);
}

inline tMSeries::tAO_Trigger_Select& tMSeries::tAO_Trigger_Select::setAO_START1_Polarity(tAO_START1_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Trigger_Select::tAO_START1_Polarity tMSeries::tAO_Trigger_Select::getAO_START1_Polarity(nMDBG::tStatus2*) const
{
   return (tAO_START1_Polarity)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tAO_Trigger_Select::writeAO_START1_Polarity(tAO_START1_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAO_START1_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Trigger_Select::tAO_START1_Polarity tMSeries::tAO_Trigger_Select::readAO_START1_Polarity(nMDBG::tStatus2* s)
{
   return getAO_START1_Polarity(s);
}

inline tMSeries::tAO_Trigger_Select& tMSeries::tAO_Trigger_Select::setAO_Delayed_START1(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Trigger_Select::getAO_Delayed_START1(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tAO_Trigger_Select::writeAO_Delayed_START1(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_Delayed_START1(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Trigger_Select::readAO_Delayed_START1(nMDBG::tStatus2* s)
{
   return getAO_Delayed_START1(s);
}

inline void tMSeries::tAO_Trigger_Select::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_UC_Load_A::tAO_UC_Load_A()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_UC_Load_A::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_UC_Load_A::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_UC_Load_A& tMSeries::tAO_UC_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAO_UC_Load_A::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_UC_Load_A::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tAO_UC_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAO_UC_Load_A::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_UC_Load_A& tMSeries::tAO_UC_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAO_UC_Load_A::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAO_UC_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAO_UC_Load_A::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAO_UC_Load_A::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_UC_Load_B::tAO_UC_Load_B()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_UC_Load_B::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_UC_Load_B::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_UC_Load_B& tMSeries::tAO_UC_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAO_UC_Load_B::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_UC_Load_B::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tAO_UC_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAO_UC_Load_B::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_UC_Load_B& tMSeries::tAO_UC_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAO_UC_Load_B::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAO_UC_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAO_UC_Load_B::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAO_UC_Load_B::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_UC_Save::tAO_UC_Save()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_UC_Save::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tAO_UC_Save& tMSeries::tAO_UC_Save::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAO_UC_Save::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_UC_Save::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u32 tMSeries::tAO_UC_Save::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tAO_UC_Save& tMSeries::tAO_UC_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAO_UC_Save::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tMSeries::tAO_UC_Save::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void tMSeries::tAO_UC_Save::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_UI_Load_A::tAO_UI_Load_A()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_UI_Load_A::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_UI_Load_A::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_UI_Load_A& tMSeries::tAO_UI_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAO_UI_Load_A::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_UI_Load_A::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tAO_UI_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAO_UI_Load_A::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_UI_Load_A& tMSeries::tAO_UI_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAO_UI_Load_A::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAO_UI_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAO_UI_Load_A::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAO_UI_Load_A::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_UI_Load_B::tAO_UI_Load_B()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_UI_Load_B::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_UI_Load_B::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_UI_Load_B& tMSeries::tAO_UI_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAO_UI_Load_B::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_UI_Load_B::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tAO_UI_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAO_UI_Load_B::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_UI_Load_B& tMSeries::tAO_UI_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAO_UI_Load_B::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAO_UI_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAO_UI_Load_B::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAO_UI_Load_B::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_UI_Save::tAO_UI_Save()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_UI_Save::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tAO_UI_Save& tMSeries::tAO_UI_Save::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAO_UI_Save::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_UI_Save::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u32 tMSeries::tAO_UI_Save::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tAO_UI_Save& tMSeries::tAO_UI_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAO_UI_Save::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tMSeries::tAO_UI_Save::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void tMSeries::tAO_UI_Save::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tClock_and_FOUT::tClock_and_FOUT()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tClock_and_FOUT::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tClock_and_FOUT::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tClock_and_FOUT& tMSeries::tClock_and_FOUT::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tClock_and_FOUT::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tClock_and_FOUT::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tClock_and_FOUT::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tClock_and_FOUT::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tClock_and_FOUT& tMSeries::tClock_and_FOUT::setFOUT_Divider(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff0)) | (((u16)fieldValue << 0x0) & ~0xfff0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tClock_and_FOUT::getFOUT_Divider(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff0) >> 0x0);
}

inline void tMSeries::tClock_and_FOUT::writeFOUT_Divider(u16 fieldValue, nMDBG::tStatus2* s)
{
   setFOUT_Divider(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tClock_and_FOUT::readFOUT_Divider(nMDBG::tStatus2* s)
{
   return getFOUT_Divider(s);
}

inline tMSeries::tClock_and_FOUT& tMSeries::tClock_and_FOUT::setClock_To_Board(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tClock_and_FOUT::getClock_To_Board(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tClock_and_FOUT::writeClock_To_Board(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setClock_To_Board(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tClock_and_FOUT::readClock_To_Board(nMDBG::tStatus2* s)
{
   return getClock_To_Board(s);
}

inline tMSeries::tClock_and_FOUT& tMSeries::tClock_and_FOUT::setClock_To_Board_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tClock_and_FOUT::getClock_To_Board_Divide_By_2(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tMSeries::tClock_and_FOUT::writeClock_To_Board_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setClock_To_Board_Divide_By_2(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tClock_and_FOUT::readClock_To_Board_Divide_By_2(nMDBG::tStatus2* s)
{
   return getClock_To_Board_Divide_By_2(s);
}

inline tMSeries::tClock_and_FOUT& tMSeries::tClock_and_FOUT::setSlow_Internal_Timebase(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tClock_and_FOUT::getSlow_Internal_Timebase(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tClock_and_FOUT::writeSlow_Internal_Timebase(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setSlow_Internal_Timebase(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tClock_and_FOUT::readSlow_Internal_Timebase(nMDBG::tStatus2* s)
{
   return getSlow_Internal_Timebase(s);
}

inline tMSeries::tClock_and_FOUT& tMSeries::tClock_and_FOUT::setDIO_Serial_Out_Divide_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tClock_and_FOUT::getDIO_Serial_Out_Divide_By_2(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tClock_and_FOUT::writeDIO_Serial_Out_Divide_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
   setDIO_Serial_Out_Divide_By_2(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tClock_and_FOUT::readDIO_Serial_Out_Divide_By_2(nMDBG::tStatus2* s)
{
   return getDIO_Serial_Out_Divide_By_2(s);
}

inline tMSeries::tClock_and_FOUT& tMSeries::tClock_and_FOUT::setFOUT_Timebase_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tClock_and_FOUT::getFOUT_Timebase_Select(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tClock_and_FOUT::writeFOUT_Timebase_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
   setFOUT_Timebase_Select(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tClock_and_FOUT::readFOUT_Timebase_Select(nMDBG::tStatus2* s)
{
   return getFOUT_Timebase_Select(s);
}

inline tMSeries::tClock_and_FOUT& tMSeries::tClock_and_FOUT::setFOUT_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tClock_and_FOUT::getFOUT_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tClock_and_FOUT::writeFOUT_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setFOUT_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tClock_and_FOUT::readFOUT_Enable(nMDBG::tStatus2* s)
{
   return getFOUT_Enable(s);
}

inline void tMSeries::tClock_and_FOUT::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tInterrupt_A_Ack::tInterrupt_A_Ack()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tInterrupt_A_Ack::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tInterrupt_A_Ack::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tInterrupt_A_Ack& tMSeries::tInterrupt_A_Ack::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tInterrupt_A_Ack::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tInterrupt_A_Ack::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffff001f);
}

inline void tMSeries::tInterrupt_A_Ack::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tInterrupt_A_Ack::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tInterrupt_A_Ack& tMSeries::tInterrupt_A_Ack::setG0_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_A_Ack::getG0_Gate_Error_Confirm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tInterrupt_A_Ack::writeG0_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Gate_Error_Confirm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_A_Ack::readG0_Gate_Error_Confirm(nMDBG::tStatus2* s)
{
   return getG0_Gate_Error_Confirm(s);
}

inline tMSeries::tInterrupt_A_Ack& tMSeries::tInterrupt_A_Ack::setG0_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_A_Ack::getG0_TC_Error_Confirm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tInterrupt_A_Ack::writeG0_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_TC_Error_Confirm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_A_Ack::readG0_TC_Error_Confirm(nMDBG::tStatus2* s)
{
   return getG0_TC_Error_Confirm(s);
}

inline tMSeries::tInterrupt_A_Ack& tMSeries::tInterrupt_A_Ack::setAI_SC_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_A_Ack::getAI_SC_TC_Error_Confirm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tMSeries::tInterrupt_A_Ack::writeAI_SC_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SC_TC_Error_Confirm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_A_Ack::readAI_SC_TC_Error_Confirm(nMDBG::tStatus2* s)
{
   return getAI_SC_TC_Error_Confirm(s);
}

inline tMSeries::tInterrupt_A_Ack& tMSeries::tInterrupt_A_Ack::setAI_SC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_A_Ack::getAI_SC_TC_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tInterrupt_A_Ack::writeAI_SC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_SC_TC_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_A_Ack::readAI_SC_TC_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAI_SC_TC_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_A_Ack& tMSeries::tInterrupt_A_Ack::setAI_START1_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_A_Ack::getAI_START1_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tMSeries::tInterrupt_A_Ack::writeAI_START1_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_START1_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_A_Ack::readAI_START1_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAI_START1_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_A_Ack& tMSeries::tInterrupt_A_Ack::setAI_START2_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_A_Ack::getAI_START2_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tInterrupt_A_Ack::writeAI_START2_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_START2_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_A_Ack::readAI_START2_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAI_START2_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_A_Ack& tMSeries::tInterrupt_A_Ack::setAI_START_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_A_Ack::getAI_START_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tInterrupt_A_Ack::writeAI_START_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_START_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_A_Ack::readAI_START_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAI_START_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_A_Ack& tMSeries::tInterrupt_A_Ack::setAI_STOP_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_A_Ack::getAI_STOP_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tInterrupt_A_Ack::writeAI_STOP_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_STOP_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_A_Ack::readAI_STOP_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAI_STOP_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_A_Ack& tMSeries::tInterrupt_A_Ack::setAI_Error_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_A_Ack::getAI_Error_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tInterrupt_A_Ack::writeAI_Error_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Error_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_A_Ack::readAI_Error_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAI_Error_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_A_Ack& tMSeries::tInterrupt_A_Ack::setG0_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_A_Ack::getG0_TC_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tInterrupt_A_Ack::writeG0_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_TC_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_A_Ack::readG0_TC_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getG0_TC_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_A_Ack& tMSeries::tInterrupt_A_Ack::setG0_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_A_Ack::getG0_Gate_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tInterrupt_A_Ack::writeG0_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Gate_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_A_Ack::readG0_Gate_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getG0_Gate_Interrupt_Ack(s);
}

inline void tMSeries::tInterrupt_A_Ack::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tInterrupt_A_Enable::tInterrupt_A_Enable()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tInterrupt_A_Enable::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tInterrupt_A_Enable::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tInterrupt_A_Enable& tMSeries::tInterrupt_A_Enable::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tInterrupt_A_Enable::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tInterrupt_A_Enable::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tInterrupt_A_Enable::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tInterrupt_A_Enable::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tInterrupt_A_Enable& tMSeries::tInterrupt_A_Enable::setAI_SC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_A_Enable::getAI_SC_TC_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tInterrupt_A_Enable::writeAI_SC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_SC_TC_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_A_Enable::readAI_SC_TC_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAI_SC_TC_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_A_Enable& tMSeries::tInterrupt_A_Enable::setAI_START1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_A_Enable::getAI_START1_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tInterrupt_A_Enable::writeAI_START1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_START1_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_A_Enable::readAI_START1_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAI_START1_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_A_Enable& tMSeries::tInterrupt_A_Enable::setAI_START2_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_A_Enable::getAI_START2_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tInterrupt_A_Enable::writeAI_START2_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_START2_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_A_Enable::readAI_START2_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAI_START2_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_A_Enable& tMSeries::tInterrupt_A_Enable::setAI_START_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_A_Enable::getAI_START_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tInterrupt_A_Enable::writeAI_START_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_START_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_A_Enable::readAI_START_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAI_START_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_A_Enable& tMSeries::tInterrupt_A_Enable::setAI_STOP_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_A_Enable::getAI_STOP_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tInterrupt_A_Enable::writeAI_STOP_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_STOP_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_A_Enable::readAI_STOP_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAI_STOP_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_A_Enable& tMSeries::tInterrupt_A_Enable::setAI_Error_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_A_Enable::getAI_Error_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tInterrupt_A_Enable::writeAI_Error_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_Error_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_A_Enable::readAI_Error_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAI_Error_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_A_Enable& tMSeries::tInterrupt_A_Enable::setG0_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_A_Enable::getG0_TC_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tInterrupt_A_Enable::writeG0_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setG0_TC_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_A_Enable::readG0_TC_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getG0_TC_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_A_Enable& tMSeries::tInterrupt_A_Enable::setAI_FIFO_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_A_Enable::getAI_FIFO_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tMSeries::tInterrupt_A_Enable::writeAI_FIFO_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_FIFO_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_A_Enable::readAI_FIFO_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAI_FIFO_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_A_Enable& tMSeries::tInterrupt_A_Enable::setG0_Gate_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_A_Enable::getG0_Gate_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tInterrupt_A_Enable::writeG0_Gate_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setG0_Gate_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_A_Enable::readG0_Gate_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getG0_Gate_Interrupt_Enable(s);
}

inline void tMSeries::tInterrupt_A_Enable::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tInterrupt_B_Ack::tInterrupt_B_Ack()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tInterrupt_B_Ack::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tInterrupt_B_Ack::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tInterrupt_B_Ack::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffff0061);
}

inline void tMSeries::tInterrupt_B_Ack::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tInterrupt_B_Ack::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setG1_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getG1_Gate_Error_Confirm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tInterrupt_B_Ack::writeG1_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Gate_Error_Confirm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_B_Ack::readG1_Gate_Error_Confirm(nMDBG::tStatus2* s)
{
   return getG1_Gate_Error_Confirm(s);
}

inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setG1_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getG1_TC_Error_Confirm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tInterrupt_B_Ack::writeG1_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_TC_Error_Confirm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_B_Ack::readG1_TC_Error_Confirm(nMDBG::tStatus2* s)
{
   return getG1_TC_Error_Confirm(s);
}

inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setAO_BC_TC_Trigger_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getAO_BC_TC_Trigger_Error_Confirm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tInterrupt_B_Ack::writeAO_BC_TC_Trigger_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_BC_TC_Trigger_Error_Confirm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_B_Ack::readAO_BC_TC_Trigger_Error_Confirm(nMDBG::tStatus2* s)
{
   return getAO_BC_TC_Trigger_Error_Confirm(s);
}

inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setAO_BC_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getAO_BC_TC_Error_Confirm(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tInterrupt_B_Ack::writeAO_BC_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_BC_TC_Error_Confirm(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_B_Ack::readAO_BC_TC_Error_Confirm(nMDBG::tStatus2* s)
{
   return getAO_BC_TC_Error_Confirm(s);
}

inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setAO_UC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getAO_UC_TC_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tMSeries::tInterrupt_B_Ack::writeAO_UC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UC_TC_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_B_Ack::readAO_UC_TC_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAO_UC_TC_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setAO_BC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getAO_BC_TC_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tInterrupt_B_Ack::writeAO_BC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_BC_TC_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_B_Ack::readAO_BC_TC_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAO_BC_TC_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setAO_START1_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getAO_START1_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tMSeries::tInterrupt_B_Ack::writeAO_START1_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_START1_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_B_Ack::readAO_START1_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAO_START1_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setAO_UPDATE_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getAO_UPDATE_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tInterrupt_B_Ack::writeAO_UPDATE_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_UPDATE_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_B_Ack::readAO_UPDATE_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAO_UPDATE_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setAO_START_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getAO_START_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tInterrupt_B_Ack::writeAO_START_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_START_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_B_Ack::readAO_START_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAO_START_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setAO_STOP_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getAO_STOP_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tInterrupt_B_Ack::writeAO_STOP_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_STOP_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_B_Ack::readAO_STOP_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAO_STOP_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setAO_Error_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getAO_Error_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tInterrupt_B_Ack::writeAO_Error_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Error_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_B_Ack::readAO_Error_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAO_Error_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setG1_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getG1_TC_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tInterrupt_B_Ack::writeG1_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_TC_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_B_Ack::readG1_TC_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getG1_TC_Interrupt_Ack(s);
}

inline tMSeries::tInterrupt_B_Ack& tMSeries::tInterrupt_B_Ack::setG1_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Ack::getG1_Gate_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tInterrupt_B_Ack::writeG1_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Gate_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tInterrupt_B_Ack::readG1_Gate_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getG1_Gate_Interrupt_Ack(s);
}

inline void tMSeries::tInterrupt_B_Ack::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tInterrupt_Control::tInterrupt_Control()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tInterrupt_Control::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tInterrupt_Control::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tInterrupt_Control& tMSeries::tInterrupt_Control::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tInterrupt_Control::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tInterrupt_Control::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tInterrupt_Control::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tInterrupt_Control::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tInterrupt_Control& tMSeries::tInterrupt_Control::setInterrupt_Group_A_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_Control::getInterrupt_Group_A_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tInterrupt_Control::writeInterrupt_Group_A_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setInterrupt_Group_A_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_Control::readInterrupt_Group_A_Enable(nMDBG::tStatus2* s)
{
   return getInterrupt_Group_A_Enable(s);
}

inline tMSeries::tInterrupt_Control& tMSeries::tInterrupt_Control::setInterrupt_Group_B_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_Control::getInterrupt_Group_B_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tInterrupt_Control::writeInterrupt_Group_B_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setInterrupt_Group_B_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_Control::readInterrupt_Group_B_Enable(nMDBG::tStatus2* s)
{
   return getInterrupt_Group_B_Enable(s);
}

inline void tMSeries::tInterrupt_Control::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tInterrupt_B_Enable::tInterrupt_B_Enable()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tInterrupt_B_Enable::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tInterrupt_B_Enable::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tInterrupt_B_Enable& tMSeries::tInterrupt_B_Enable::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tInterrupt_B_Enable::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tInterrupt_B_Enable::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tInterrupt_B_Enable::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tInterrupt_B_Enable::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tInterrupt_B_Enable& tMSeries::tInterrupt_B_Enable::setAO_BC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_B_Enable::getAO_BC_TC_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tInterrupt_B_Enable::writeAO_BC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_BC_TC_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_B_Enable::readAO_BC_TC_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAO_BC_TC_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_B_Enable& tMSeries::tInterrupt_B_Enable::setAO_START1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_B_Enable::getAO_START1_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tInterrupt_B_Enable::writeAO_START1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_START1_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_B_Enable::readAO_START1_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAO_START1_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_B_Enable& tMSeries::tInterrupt_B_Enable::setAO_UPDATE_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_B_Enable::getAO_UPDATE_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tInterrupt_B_Enable::writeAO_UPDATE_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_UPDATE_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_B_Enable::readAO_UPDATE_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAO_UPDATE_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_B_Enable& tMSeries::tInterrupt_B_Enable::setAO_START_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_B_Enable::getAO_START_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tInterrupt_B_Enable::writeAO_START_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_START_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_B_Enable::readAO_START_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAO_START_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_B_Enable& tMSeries::tInterrupt_B_Enable::setAO_STOP_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_B_Enable::getAO_STOP_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tInterrupt_B_Enable::writeAO_STOP_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_STOP_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_B_Enable::readAO_STOP_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAO_STOP_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_B_Enable& tMSeries::tInterrupt_B_Enable::setAO_Error_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_B_Enable::getAO_Error_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tInterrupt_B_Enable::writeAO_Error_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_Error_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_B_Enable::readAO_Error_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAO_Error_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_B_Enable& tMSeries::tInterrupt_B_Enable::setAO_UC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_B_Enable::getAO_UC_TC_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tInterrupt_B_Enable::writeAO_UC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_UC_TC_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_B_Enable::readAO_UC_TC_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAO_UC_TC_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_B_Enable& tMSeries::tInterrupt_B_Enable::setAO_FIFO_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_B_Enable::getAO_FIFO_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tInterrupt_B_Enable::writeAO_FIFO_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_FIFO_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_B_Enable::readAO_FIFO_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAO_FIFO_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_B_Enable& tMSeries::tInterrupt_B_Enable::setG1_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_B_Enable::getG1_TC_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tMSeries::tInterrupt_B_Enable::writeG1_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setG1_TC_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_B_Enable::readG1_TC_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getG1_TC_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_B_Enable& tMSeries::tInterrupt_B_Enable::setG1_Gate_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_B_Enable::getG1_Gate_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tInterrupt_B_Enable::writeG1_Gate_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setG1_Gate_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_B_Enable::readG1_Gate_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getG1_Gate_Interrupt_Enable(s);
}

inline tMSeries::tInterrupt_B_Enable& tMSeries::tInterrupt_B_Enable::setPass_Thru_1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_B_Enable::getPass_Thru_1_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tInterrupt_B_Enable::writePass_Thru_1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setPass_Thru_1_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_B_Enable::readPass_Thru_1_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getPass_Thru_1_Interrupt_Enable(s);
}

inline void tMSeries::tInterrupt_B_Enable::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tIO_Bidirection_Pin::tIO_Bidirection_Pin()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tIO_Bidirection_Pin::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tIO_Bidirection_Pin::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tIO_Bidirection_Pin::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tIO_Bidirection_Pin::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tIO_Bidirection_Pin::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tIO_Bidirection_Pin::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI0_Pin_Dir(tPFI0_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI0_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI0_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI0_Pin_Dir)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI0_Pin_Dir(tPFI0_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI0_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI0_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI0_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI0_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI1_Pin_Dir(tPFI1_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI1_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI1_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI1_Pin_Dir)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI1_Pin_Dir(tPFI1_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI1_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI1_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI1_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI1_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI2_Pin_Dir(tPFI2_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI2_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI2_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI2_Pin_Dir)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI2_Pin_Dir(tPFI2_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI2_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI2_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI2_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI2_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI3_Pin_Dir(tPFI3_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI3_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI3_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI3_Pin_Dir)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI3_Pin_Dir(tPFI3_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI3_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI3_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI3_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI3_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI4_Pin_Dir(tPFI4_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI4_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI4_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI4_Pin_Dir)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI4_Pin_Dir(tPFI4_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI4_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI4_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI4_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI4_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI5_Pin_Dir(tPFI5_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI5_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI5_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI5_Pin_Dir)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI5_Pin_Dir(tPFI5_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI5_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI5_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI5_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI5_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI6_Pin_Dir(tPFI6_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI6_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI6_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI6_Pin_Dir)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI6_Pin_Dir(tPFI6_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI6_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI6_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI6_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI6_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI7_Pin_Dir(tPFI7_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI7_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI7_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI7_Pin_Dir)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI7_Pin_Dir(tPFI7_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI7_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI7_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI7_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI7_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI8_Pin_Dir(tPFI8_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI8_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI8_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI8_Pin_Dir)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI8_Pin_Dir(tPFI8_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI8_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI8_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI8_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI8_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI9_Pin_Dir(tPFI9_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI9_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI9_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI9_Pin_Dir)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI9_Pin_Dir(tPFI9_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI9_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI9_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI9_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI9_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI10_Pin_Dir(tPFI10_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI10_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI10_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI10_Pin_Dir)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI10_Pin_Dir(tPFI10_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI10_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI10_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI10_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI10_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI11_Pin_Dir(tPFI11_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI11_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI11_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI11_Pin_Dir)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI11_Pin_Dir(tPFI11_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI11_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI11_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI11_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI11_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI12_Pin_Dir(tPFI12_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI12_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI12_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI12_Pin_Dir)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI12_Pin_Dir(tPFI12_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI12_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI12_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI12_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI12_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI13_Pin_Dir(tPFI13_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI13_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI13_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI13_Pin_Dir)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI13_Pin_Dir(tPFI13_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI13_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI13_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI13_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI13_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI14_Pin_Dir(tPFI14_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI14_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI14_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI14_Pin_Dir)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI14_Pin_Dir(tPFI14_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI14_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI14_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI14_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI14_Pin_Dir(s);
}

inline tMSeries::tIO_Bidirection_Pin& tMSeries::tIO_Bidirection_Pin::setPFI15_Pin_Dir(tPFI15_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tIO_Bidirection_Pin::tPFI15_Pin_Dir tMSeries::tIO_Bidirection_Pin::getPFI15_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tPFI15_Pin_Dir)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tIO_Bidirection_Pin::writePFI15_Pin_Dir(tPFI15_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setPFI15_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tIO_Bidirection_Pin::tPFI15_Pin_Dir tMSeries::tIO_Bidirection_Pin::readPFI15_Pin_Dir(nMDBG::tStatus2* s)
{
   return getPFI15_Pin_Dir(s);
}

inline void tMSeries::tIO_Bidirection_Pin::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tJoint_Reset::tJoint_Reset()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tJoint_Reset::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tJoint_Reset::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tJoint_Reset& tMSeries::tJoint_Reset::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tJoint_Reset::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tJoint_Reset::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xfffffcc0);
}

inline void tMSeries::tJoint_Reset::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tJoint_Reset::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tJoint_Reset& tMSeries::tJoint_Reset::setAI_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Reset::getAI_Reset(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tJoint_Reset::writeAI_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Reset(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tJoint_Reset::readAI_Reset(nMDBG::tStatus2* s)
{
   return getAI_Reset(s);
}

inline tMSeries::tJoint_Reset& tMSeries::tJoint_Reset::setAO_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Reset::getAO_Reset(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tJoint_Reset::writeAO_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Reset(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tJoint_Reset::readAO_Reset(nMDBG::tStatus2* s)
{
   return getAO_Reset(s);
}

inline tMSeries::tJoint_Reset& tMSeries::tJoint_Reset::setG0_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Reset::getG0_Reset(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tJoint_Reset::writeG0_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_Reset(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tJoint_Reset::readG0_Reset(nMDBG::tStatus2* s)
{
   return getG0_Reset(s);
}

inline tMSeries::tJoint_Reset& tMSeries::tJoint_Reset::setG1_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Reset::getG1_Reset(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tJoint_Reset::writeG1_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_Reset(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tJoint_Reset::readG1_Reset(nMDBG::tStatus2* s)
{
   return getG1_Reset(s);
}

inline tMSeries::tJoint_Reset& tMSeries::tJoint_Reset::setAI_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Reset::getAI_Configuration_Start(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tJoint_Reset::writeAI_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Configuration_Start(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tJoint_Reset::readAI_Configuration_Start(nMDBG::tStatus2* s)
{
   return getAI_Configuration_Start(s);
}

inline tMSeries::tJoint_Reset& tMSeries::tJoint_Reset::setAO_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Reset::getAO_Configuration_Start(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tJoint_Reset::writeAO_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Configuration_Start(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tJoint_Reset::readAO_Configuration_Start(nMDBG::tStatus2* s)
{
   return getAO_Configuration_Start(s);
}

inline tMSeries::tJoint_Reset& tMSeries::tJoint_Reset::setAI_Configuration_End(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Reset::getAI_Configuration_End(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tJoint_Reset::writeAI_Configuration_End(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Configuration_End(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tJoint_Reset::readAI_Configuration_End(nMDBG::tStatus2* s)
{
   return getAI_Configuration_End(s);
}

inline tMSeries::tJoint_Reset& tMSeries::tJoint_Reset::setAO_Configuration_End(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Reset::getAO_Configuration_End(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tMSeries::tJoint_Reset::writeAO_Configuration_End(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Configuration_End(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tJoint_Reset::readAO_Configuration_End(nMDBG::tStatus2* s)
{
   return getAO_Configuration_End(s);
}

inline tMSeries::tJoint_Reset& tMSeries::tJoint_Reset::setSoftware_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Reset::getSoftware_Reset(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tJoint_Reset::writeSoftware_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   setSoftware_Reset(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tJoint_Reset::readSoftware_Reset(nMDBG::tStatus2* s)
{
   return getSoftware_Reset(s);
}

inline void tMSeries::tJoint_Reset::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tJoint_Status_2::tJoint_Status_2()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tJoint_Status_2::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tJoint_Status_2& tMSeries::tJoint_Status_2::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tJoint_Status_2::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tJoint_Status_2::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u16 tMSeries::tJoint_Status_2::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tJoint_Status_2& tMSeries::tJoint_Status_2::setG0_Output_St(tG0_Output_St fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tJoint_Status_2::tG0_Output_St tMSeries::tJoint_Status_2::getG0_Output_St(nMDBG::tStatus2*) const
{
   return (tG0_Output_St)((_softCopy & ~0xfffe) >> 0x0);
}

inline tMSeries::tJoint_Status_2::tG0_Output_St tMSeries::tJoint_Status_2::readG0_Output_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Output_St(s);
}

inline tMSeries::tJoint_Status_2& tMSeries::tJoint_Status_2::setG1_Output_St(tG1_Output_St fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tJoint_Status_2::tG1_Output_St tMSeries::tJoint_Status_2::getG1_Output_St(nMDBG::tStatus2*) const
{
   return (tG1_Output_St)((_softCopy & ~0xfffd) >> 0x1);
}

inline tMSeries::tJoint_Status_2::tG1_Output_St tMSeries::tJoint_Status_2::readG1_Output_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Output_St(s);
}

inline tMSeries::tJoint_Status_2& tMSeries::tJoint_Status_2::setAO_STOP_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_2::getAO_STOP_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline u16 tMSeries::tJoint_Status_2::readAO_STOP_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_STOP_St(s);
}

inline tMSeries::tJoint_Status_2& tMSeries::tJoint_Status_2::setAI_EOC_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_2::getAI_EOC_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline u16 tMSeries::tJoint_Status_2::readAI_EOC_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_EOC_St(s);
}

inline tMSeries::tJoint_Status_2& tMSeries::tJoint_Status_2::setAO_TMRDACWRs_In_Progress_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tJoint_Status_2::getAO_TMRDACWRs_In_Progress_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline tBoolean tMSeries::tJoint_Status_2::readAO_TMRDACWRs_In_Progress_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_TMRDACWRs_In_Progress_St(s);
}

inline tMSeries::tJoint_Status_2& tMSeries::tJoint_Status_2::setAI_Config_Memory_Empty_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_2::getAI_Config_Memory_Empty_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline u16 tMSeries::tJoint_Status_2::readAI_Config_Memory_Empty_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_Config_Memory_Empty_St(s);
}

inline tMSeries::tJoint_Status_2& tMSeries::tJoint_Status_2::setAI_Scan_In_Progress_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_2::getAI_Scan_In_Progress_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline u16 tMSeries::tJoint_Status_2::readAI_Scan_In_Progress_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_Scan_In_Progress_St(s);
}

inline tMSeries::tJoint_Status_2& tMSeries::tJoint_Status_2::setGeneric_Status(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf0ff)) | (((u16)fieldValue << 0x8) & ~0xf0ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_2::getGeneric_Status(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf0ff) >> 0x8);
}

inline u16 tMSeries::tJoint_Status_2::readGeneric_Status(nMDBG::tStatus2* s)
{
   refresh(s);
   return getGeneric_Status(s);
}

inline tMSeries::tJoint_Status_2& tMSeries::tJoint_Status_2::setG0_HW_Save_St(tG0_HW_Save_St fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tJoint_Status_2::tG0_HW_Save_St tMSeries::tJoint_Status_2::getG0_HW_Save_St(nMDBG::tStatus2*) const
{
   return (tG0_HW_Save_St)((_softCopy & ~0xefff) >> 0xc);
}

inline tMSeries::tJoint_Status_2::tG0_HW_Save_St tMSeries::tJoint_Status_2::readG0_HW_Save_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_HW_Save_St(s);
}

inline tMSeries::tJoint_Status_2& tMSeries::tJoint_Status_2::setG1_HW_Save_St(tG1_HW_Save_St fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tJoint_Status_2::tG1_HW_Save_St tMSeries::tJoint_Status_2::getG1_HW_Save_St(nMDBG::tStatus2*) const
{
   return (tG1_HW_Save_St)((_softCopy & ~0xdfff) >> 0xd);
}

inline tMSeries::tJoint_Status_2::tG1_HW_Save_St tMSeries::tJoint_Status_2::readG1_HW_Save_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_HW_Save_St(s);
}

inline tMSeries::tJoint_Status_2& tMSeries::tJoint_Status_2::setG0_Permanent_Stale_Data_St(tG0_Permanent_Stale_Data_St fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tJoint_Status_2::tG0_Permanent_Stale_Data_St tMSeries::tJoint_Status_2::getG0_Permanent_Stale_Data_St(nMDBG::tStatus2*) const
{
   return (tG0_Permanent_Stale_Data_St)((_softCopy & ~0xbfff) >> 0xe);
}

inline tMSeries::tJoint_Status_2::tG0_Permanent_Stale_Data_St tMSeries::tJoint_Status_2::readG0_Permanent_Stale_Data_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Permanent_Stale_Data_St(s);
}

inline tMSeries::tJoint_Status_2& tMSeries::tJoint_Status_2::setG1_Permanent_Stale_Data_St(tG1_Permanent_Stale_Data_St fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tJoint_Status_2::tG1_Permanent_Stale_Data_St tMSeries::tJoint_Status_2::getG1_Permanent_Stale_Data_St(nMDBG::tStatus2*) const
{
   return (tG1_Permanent_Stale_Data_St)((_softCopy & ~0x7fff) >> 0xf);
}

inline tMSeries::tJoint_Status_2::tG1_Permanent_Stale_Data_St tMSeries::tJoint_Status_2::readG1_Permanent_Stale_Data_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Permanent_Stale_Data_St(s);
}

inline void tMSeries::tJoint_Status_2::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tJoint_Status_1::tJoint_Status_1()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tJoint_Status_1::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tJoint_Status_1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tJoint_Status_1::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u16 tMSeries::tJoint_Status_1::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setG0_Bank_St(tG0_Bank_St fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tJoint_Status_1::tG0_Bank_St tMSeries::tJoint_Status_1::getG0_Bank_St(nMDBG::tStatus2*) const
{
   return (tG0_Bank_St)((_softCopy & ~0xfffe) >> 0x0);
}

inline tMSeries::tJoint_Status_1::tG0_Bank_St tMSeries::tJoint_Status_1::readG0_Bank_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Bank_St(s);
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setG1_Bank_St(tG1_Bank_St fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tJoint_Status_1::tG1_Bank_St tMSeries::tJoint_Status_1::getG1_Bank_St(nMDBG::tStatus2*) const
{
   return (tG1_Bank_St)((_softCopy & ~0xfffd) >> 0x1);
}

inline tMSeries::tJoint_Status_1::tG1_Bank_St tMSeries::tJoint_Status_1::readG1_Bank_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Bank_St(s);
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setG0_Gate_St(tG0_Gate_St fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tJoint_Status_1::tG0_Gate_St tMSeries::tJoint_Status_1::getG0_Gate_St(nMDBG::tStatus2*) const
{
   return (tG0_Gate_St)((_softCopy & ~0xfffb) >> 0x2);
}

inline tMSeries::tJoint_Status_1::tG0_Gate_St tMSeries::tJoint_Status_1::readG0_Gate_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Gate_St(s);
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setG1_Gate_St(tG1_Gate_St fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tJoint_Status_1::tG1_Gate_St tMSeries::tJoint_Status_1::getG1_Gate_St(nMDBG::tStatus2*) const
{
   return (tG1_Gate_St)((_softCopy & ~0xfff7) >> 0x3);
}

inline tMSeries::tJoint_Status_1::tG1_Gate_St tMSeries::tJoint_Status_1::readG1_Gate_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Gate_St(s);
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setAI_SC_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_1::getAI_SC_Gate_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline u16 tMSeries::tJoint_Status_1::readAI_SC_Gate_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_SC_Gate_St(s);
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setAI_Start_Stop_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_1::getAI_Start_Stop_Gate_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline u16 tMSeries::tJoint_Status_1::readAI_Start_Stop_Gate_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_Start_Stop_Gate_St(s);
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setAO_BC_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_1::getAO_BC_Gate_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline u16 tMSeries::tJoint_Status_1::readAO_BC_Gate_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_BC_Gate_St(s);
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setAO_Start_Stop_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_1::getAO_Start_Stop_Gate_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline u16 tMSeries::tJoint_Status_1::readAO_Start_Stop_Gate_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_Start_Stop_Gate_St(s);
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setAI_SI2_Q_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfcff)) | (((u16)fieldValue << 0x8) & ~0xfcff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_1::getAI_SI2_Q_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfcff) >> 0x8);
}

inline u16 tMSeries::tJoint_Status_1::readAI_SI2_Q_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_SI2_Q_St(s);
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setAI_External_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_1::getAI_External_Gate_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline u16 tMSeries::tJoint_Status_1::readAI_External_Gate_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_External_Gate_St(s);
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setAO_External_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_1::getAO_External_Gate_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline u16 tMSeries::tJoint_Status_1::readAO_External_Gate_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_External_Gate_St(s);
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setDIO_Serial_IO_In_Progress_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_1::getDIO_Serial_IO_In_Progress_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline u16 tMSeries::tJoint_Status_1::readDIO_Serial_IO_In_Progress_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getDIO_Serial_IO_In_Progress_St(s);
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setAO_UC_Q_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_1::getAO_UC_Q_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tMSeries::tJoint_Status_1::readAO_UC_Q_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_UC_Q_St(s);
}

inline tMSeries::tJoint_Status_1& tMSeries::tJoint_Status_1::setAI_Last_Shiftin_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tJoint_Status_1::getAI_Last_Shiftin_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tMSeries::tJoint_Status_1::readAI_Last_Shiftin_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAI_Last_Shiftin_St(s);
}

inline void tMSeries::tJoint_Status_1::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tRTSI_Shared_MUX::tRTSI_Shared_MUX()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tRTSI_Shared_MUX::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tRTSI_Shared_MUX::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tRTSI_Shared_MUX& tMSeries::tRTSI_Shared_MUX::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tRTSI_Shared_MUX::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tRTSI_Shared_MUX::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tRTSI_Shared_MUX::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tRTSI_Shared_MUX::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tRTSI_Shared_MUX& tMSeries::tRTSI_Shared_MUX::setRTSI_Shared_MUX_0_Output_Select(tRTSI_Shared_MUX_0_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff0)) | (((u16)fieldValue << 0x0) & ~0xfff0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Shared_MUX::tRTSI_Shared_MUX_0_Output_Select tMSeries::tRTSI_Shared_MUX::getRTSI_Shared_MUX_0_Output_Select(nMDBG::tStatus2*) const
{
   return (tRTSI_Shared_MUX_0_Output_Select)((_softCopy & ~0xfff0) >> 0x0);
}

inline void tMSeries::tRTSI_Shared_MUX::writeRTSI_Shared_MUX_0_Output_Select(tRTSI_Shared_MUX_0_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI_Shared_MUX_0_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Shared_MUX::tRTSI_Shared_MUX_0_Output_Select tMSeries::tRTSI_Shared_MUX::readRTSI_Shared_MUX_0_Output_Select(nMDBG::tStatus2* s)
{
   return getRTSI_Shared_MUX_0_Output_Select(s);
}

inline tMSeries::tRTSI_Shared_MUX& tMSeries::tRTSI_Shared_MUX::setRTSI_Shared_MUX_1_Output_Select(tRTSI_Shared_MUX_1_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff0f)) | (((u16)fieldValue << 0x4) & ~0xff0f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Shared_MUX::tRTSI_Shared_MUX_1_Output_Select tMSeries::tRTSI_Shared_MUX::getRTSI_Shared_MUX_1_Output_Select(nMDBG::tStatus2*) const
{
   return (tRTSI_Shared_MUX_1_Output_Select)((_softCopy & ~0xff0f) >> 0x4);
}

inline void tMSeries::tRTSI_Shared_MUX::writeRTSI_Shared_MUX_1_Output_Select(tRTSI_Shared_MUX_1_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI_Shared_MUX_1_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Shared_MUX::tRTSI_Shared_MUX_1_Output_Select tMSeries::tRTSI_Shared_MUX::readRTSI_Shared_MUX_1_Output_Select(nMDBG::tStatus2* s)
{
   return getRTSI_Shared_MUX_1_Output_Select(s);
}

inline tMSeries::tRTSI_Shared_MUX& tMSeries::tRTSI_Shared_MUX::setRTSI_Shared_MUX_2_Output_Select(tRTSI_Shared_MUX_2_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf0ff)) | (((u16)fieldValue << 0x8) & ~0xf0ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Shared_MUX::tRTSI_Shared_MUX_2_Output_Select tMSeries::tRTSI_Shared_MUX::getRTSI_Shared_MUX_2_Output_Select(nMDBG::tStatus2*) const
{
   return (tRTSI_Shared_MUX_2_Output_Select)((_softCopy & ~0xf0ff) >> 0x8);
}

inline void tMSeries::tRTSI_Shared_MUX::writeRTSI_Shared_MUX_2_Output_Select(tRTSI_Shared_MUX_2_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI_Shared_MUX_2_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Shared_MUX::tRTSI_Shared_MUX_2_Output_Select tMSeries::tRTSI_Shared_MUX::readRTSI_Shared_MUX_2_Output_Select(nMDBG::tStatus2* s)
{
   return getRTSI_Shared_MUX_2_Output_Select(s);
}

inline tMSeries::tRTSI_Shared_MUX& tMSeries::tRTSI_Shared_MUX::setRTSI_Shared_MUX_3_Output_Select(tRTSI_Shared_MUX_3_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff)) | (((u16)fieldValue << 0xc) & ~0xfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Shared_MUX::tRTSI_Shared_MUX_3_Output_Select tMSeries::tRTSI_Shared_MUX::getRTSI_Shared_MUX_3_Output_Select(nMDBG::tStatus2*) const
{
   return (tRTSI_Shared_MUX_3_Output_Select)((_softCopy & ~0xfff) >> 0xc);
}

inline void tMSeries::tRTSI_Shared_MUX::writeRTSI_Shared_MUX_3_Output_Select(tRTSI_Shared_MUX_3_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI_Shared_MUX_3_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Shared_MUX::tRTSI_Shared_MUX_3_Output_Select tMSeries::tRTSI_Shared_MUX::readRTSI_Shared_MUX_3_Output_Select(nMDBG::tStatus2* s)
{
   return getRTSI_Shared_MUX_3_Output_Select(s);
}

inline void tMSeries::tRTSI_Shared_MUX::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tRTSI_Trig_A_Output::tRTSI_Trig_A_Output()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tRTSI_Trig_A_Output::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tRTSI_Trig_A_Output::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tRTSI_Trig_A_Output& tMSeries::tRTSI_Trig_A_Output::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tRTSI_Trig_A_Output::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tRTSI_Trig_A_Output::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tRTSI_Trig_A_Output::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tRTSI_Trig_A_Output::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tRTSI_Trig_A_Output& tMSeries::tRTSI_Trig_A_Output::setRTSI0_Output_Select(tRTSI0_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff0)) | (((u16)fieldValue << 0x0) & ~0xfff0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_A_Output::tRTSI0_Output_Select tMSeries::tRTSI_Trig_A_Output::getRTSI0_Output_Select(nMDBG::tStatus2*) const
{
   return (tRTSI0_Output_Select)((_softCopy & ~0xfff0) >> 0x0);
}

inline void tMSeries::tRTSI_Trig_A_Output::writeRTSI0_Output_Select(tRTSI0_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI0_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_A_Output::tRTSI0_Output_Select tMSeries::tRTSI_Trig_A_Output::readRTSI0_Output_Select(nMDBG::tStatus2* s)
{
   return getRTSI0_Output_Select(s);
}

inline tMSeries::tRTSI_Trig_A_Output& tMSeries::tRTSI_Trig_A_Output::setRTSI1_Output_Select(tRTSI1_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff0f)) | (((u16)fieldValue << 0x4) & ~0xff0f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_A_Output::tRTSI1_Output_Select tMSeries::tRTSI_Trig_A_Output::getRTSI1_Output_Select(nMDBG::tStatus2*) const
{
   return (tRTSI1_Output_Select)((_softCopy & ~0xff0f) >> 0x4);
}

inline void tMSeries::tRTSI_Trig_A_Output::writeRTSI1_Output_Select(tRTSI1_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI1_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_A_Output::tRTSI1_Output_Select tMSeries::tRTSI_Trig_A_Output::readRTSI1_Output_Select(nMDBG::tStatus2* s)
{
   return getRTSI1_Output_Select(s);
}

inline tMSeries::tRTSI_Trig_A_Output& tMSeries::tRTSI_Trig_A_Output::setRTSI2_Output_Select(tRTSI2_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf0ff)) | (((u16)fieldValue << 0x8) & ~0xf0ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_A_Output::tRTSI2_Output_Select tMSeries::tRTSI_Trig_A_Output::getRTSI2_Output_Select(nMDBG::tStatus2*) const
{
   return (tRTSI2_Output_Select)((_softCopy & ~0xf0ff) >> 0x8);
}

inline void tMSeries::tRTSI_Trig_A_Output::writeRTSI2_Output_Select(tRTSI2_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI2_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_A_Output::tRTSI2_Output_Select tMSeries::tRTSI_Trig_A_Output::readRTSI2_Output_Select(nMDBG::tStatus2* s)
{
   return getRTSI2_Output_Select(s);
}

inline tMSeries::tRTSI_Trig_A_Output& tMSeries::tRTSI_Trig_A_Output::setRTSI3_Output_Select(tRTSI3_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff)) | (((u16)fieldValue << 0xc) & ~0xfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_A_Output::tRTSI3_Output_Select tMSeries::tRTSI_Trig_A_Output::getRTSI3_Output_Select(nMDBG::tStatus2*) const
{
   return (tRTSI3_Output_Select)((_softCopy & ~0xfff) >> 0xc);
}

inline void tMSeries::tRTSI_Trig_A_Output::writeRTSI3_Output_Select(tRTSI3_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI3_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_A_Output::tRTSI3_Output_Select tMSeries::tRTSI_Trig_A_Output::readRTSI3_Output_Select(nMDBG::tStatus2* s)
{
   return getRTSI3_Output_Select(s);
}

inline void tMSeries::tRTSI_Trig_A_Output::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tRTSI_Trig_Direction::tRTSI_Trig_Direction()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tRTSI_Trig_Direction::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tRTSI_Trig_Direction::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tRTSI_Trig_Direction& tMSeries::tRTSI_Trig_Direction::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tRTSI_Trig_Direction::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tRTSI_Trig_Direction::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tRTSI_Trig_Direction::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tRTSI_Trig_Direction::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tRTSI_Trig_Direction& tMSeries::tRTSI_Trig_Direction::setDrive_RTSI_OSC(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tRTSI_Trig_Direction::getDrive_RTSI_OSC(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tRTSI_Trig_Direction::writeDrive_RTSI_OSC(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setDrive_RTSI_OSC(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tRTSI_Trig_Direction::readDrive_RTSI_OSC(nMDBG::tStatus2* s)
{
   return getDrive_RTSI_OSC(s);
}

inline tMSeries::tRTSI_Trig_Direction& tMSeries::tRTSI_Trig_Direction::setUse_RTSI_OSC(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tRTSI_Trig_Direction::getUse_RTSI_OSC(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tRTSI_Trig_Direction::writeUse_RTSI_OSC(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setUse_RTSI_OSC(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tRTSI_Trig_Direction::readUse_RTSI_OSC(nMDBG::tStatus2* s)
{
   return getUse_RTSI_OSC(s);
}

inline tMSeries::tRTSI_Trig_Direction& tMSeries::tRTSI_Trig_Direction::setRTSI_Sub_Selection_1(tRTSI_Sub_Selection_1 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_Direction::tRTSI_Sub_Selection_1 tMSeries::tRTSI_Trig_Direction::getRTSI_Sub_Selection_1(nMDBG::tStatus2*) const
{
   return (tRTSI_Sub_Selection_1)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tRTSI_Trig_Direction::writeRTSI_Sub_Selection_1(tRTSI_Sub_Selection_1 fieldValue, nMDBG::tStatus2* s)
{
   setRTSI_Sub_Selection_1(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_Direction::tRTSI_Sub_Selection_1 tMSeries::tRTSI_Trig_Direction::readRTSI_Sub_Selection_1(nMDBG::tStatus2* s)
{
   return getRTSI_Sub_Selection_1(s);
}

inline tMSeries::tRTSI_Trig_Direction& tMSeries::tRTSI_Trig_Direction::setRTSI0_Pin_Dir(tRTSI0_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfeff)) | (((u16)fieldValue << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_Direction::tRTSI0_Pin_Dir tMSeries::tRTSI_Trig_Direction::getRTSI0_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tRTSI0_Pin_Dir)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tMSeries::tRTSI_Trig_Direction::writeRTSI0_Pin_Dir(tRTSI0_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setRTSI0_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_Direction::tRTSI0_Pin_Dir tMSeries::tRTSI_Trig_Direction::readRTSI0_Pin_Dir(nMDBG::tStatus2* s)
{
   return getRTSI0_Pin_Dir(s);
}

inline tMSeries::tRTSI_Trig_Direction& tMSeries::tRTSI_Trig_Direction::setRTSI1_Pin_Dir(tRTSI1_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfdff)) | (((u16)fieldValue << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_Direction::tRTSI1_Pin_Dir tMSeries::tRTSI_Trig_Direction::getRTSI1_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tRTSI1_Pin_Dir)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tMSeries::tRTSI_Trig_Direction::writeRTSI1_Pin_Dir(tRTSI1_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setRTSI1_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_Direction::tRTSI1_Pin_Dir tMSeries::tRTSI_Trig_Direction::readRTSI1_Pin_Dir(nMDBG::tStatus2* s)
{
   return getRTSI1_Pin_Dir(s);
}

inline tMSeries::tRTSI_Trig_Direction& tMSeries::tRTSI_Trig_Direction::setRTSI2_Pin_Dir(tRTSI2_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfbff)) | (((u16)fieldValue << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_Direction::tRTSI2_Pin_Dir tMSeries::tRTSI_Trig_Direction::getRTSI2_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tRTSI2_Pin_Dir)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tMSeries::tRTSI_Trig_Direction::writeRTSI2_Pin_Dir(tRTSI2_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setRTSI2_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_Direction::tRTSI2_Pin_Dir tMSeries::tRTSI_Trig_Direction::readRTSI2_Pin_Dir(nMDBG::tStatus2* s)
{
   return getRTSI2_Pin_Dir(s);
}

inline tMSeries::tRTSI_Trig_Direction& tMSeries::tRTSI_Trig_Direction::setRTSI3_Pin_Dir(tRTSI3_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf7ff)) | (((u16)fieldValue << 0xb) & ~0xf7ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_Direction::tRTSI3_Pin_Dir tMSeries::tRTSI_Trig_Direction::getRTSI3_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tRTSI3_Pin_Dir)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tMSeries::tRTSI_Trig_Direction::writeRTSI3_Pin_Dir(tRTSI3_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setRTSI3_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_Direction::tRTSI3_Pin_Dir tMSeries::tRTSI_Trig_Direction::readRTSI3_Pin_Dir(nMDBG::tStatus2* s)
{
   return getRTSI3_Pin_Dir(s);
}

inline tMSeries::tRTSI_Trig_Direction& tMSeries::tRTSI_Trig_Direction::setRTSI4_Pin_Dir(tRTSI4_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_Direction::tRTSI4_Pin_Dir tMSeries::tRTSI_Trig_Direction::getRTSI4_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tRTSI4_Pin_Dir)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tRTSI_Trig_Direction::writeRTSI4_Pin_Dir(tRTSI4_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setRTSI4_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_Direction::tRTSI4_Pin_Dir tMSeries::tRTSI_Trig_Direction::readRTSI4_Pin_Dir(nMDBG::tStatus2* s)
{
   return getRTSI4_Pin_Dir(s);
}

inline tMSeries::tRTSI_Trig_Direction& tMSeries::tRTSI_Trig_Direction::setRTSI5_Pin_Dir(tRTSI5_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_Direction::tRTSI5_Pin_Dir tMSeries::tRTSI_Trig_Direction::getRTSI5_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tRTSI5_Pin_Dir)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tRTSI_Trig_Direction::writeRTSI5_Pin_Dir(tRTSI5_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setRTSI5_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_Direction::tRTSI5_Pin_Dir tMSeries::tRTSI_Trig_Direction::readRTSI5_Pin_Dir(nMDBG::tStatus2* s)
{
   return getRTSI5_Pin_Dir(s);
}

inline tMSeries::tRTSI_Trig_Direction& tMSeries::tRTSI_Trig_Direction::setRTSI6_Pin_Dir(tRTSI6_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_Direction::tRTSI6_Pin_Dir tMSeries::tRTSI_Trig_Direction::getRTSI6_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tRTSI6_Pin_Dir)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tRTSI_Trig_Direction::writeRTSI6_Pin_Dir(tRTSI6_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setRTSI6_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_Direction::tRTSI6_Pin_Dir tMSeries::tRTSI_Trig_Direction::readRTSI6_Pin_Dir(nMDBG::tStatus2* s)
{
   return getRTSI6_Pin_Dir(s);
}

inline tMSeries::tRTSI_Trig_Direction& tMSeries::tRTSI_Trig_Direction::setRTSI7_Pin_Dir(tRTSI7_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_Direction::tRTSI7_Pin_Dir tMSeries::tRTSI_Trig_Direction::getRTSI7_Pin_Dir(nMDBG::tStatus2*) const
{
   return (tRTSI7_Pin_Dir)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tMSeries::tRTSI_Trig_Direction::writeRTSI7_Pin_Dir(tRTSI7_Pin_Dir fieldValue, nMDBG::tStatus2* s)
{
   setRTSI7_Pin_Dir(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_Direction::tRTSI7_Pin_Dir tMSeries::tRTSI_Trig_Direction::readRTSI7_Pin_Dir(nMDBG::tStatus2* s)
{
   return getRTSI7_Pin_Dir(s);
}

inline void tMSeries::tRTSI_Trig_Direction::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tRTSI_Trig_B_Output::tRTSI_Trig_B_Output()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tRTSI_Trig_B_Output::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tRTSI_Trig_B_Output::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tRTSI_Trig_B_Output& tMSeries::tRTSI_Trig_B_Output::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tRTSI_Trig_B_Output::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tRTSI_Trig_B_Output::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tRTSI_Trig_B_Output::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tRTSI_Trig_B_Output::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tRTSI_Trig_B_Output& tMSeries::tRTSI_Trig_B_Output::setRTSI4_Output_Select(tRTSI4_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff0)) | (((u16)fieldValue << 0x0) & ~0xfff0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_B_Output::tRTSI4_Output_Select tMSeries::tRTSI_Trig_B_Output::getRTSI4_Output_Select(nMDBG::tStatus2*) const
{
   return (tRTSI4_Output_Select)((_softCopy & ~0xfff0) >> 0x0);
}

inline void tMSeries::tRTSI_Trig_B_Output::writeRTSI4_Output_Select(tRTSI4_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI4_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_B_Output::tRTSI4_Output_Select tMSeries::tRTSI_Trig_B_Output::readRTSI4_Output_Select(nMDBG::tStatus2* s)
{
   return getRTSI4_Output_Select(s);
}

inline tMSeries::tRTSI_Trig_B_Output& tMSeries::tRTSI_Trig_B_Output::setRTSI5_Output_Select(tRTSI5_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff0f)) | (((u16)fieldValue << 0x4) & ~0xff0f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_B_Output::tRTSI5_Output_Select tMSeries::tRTSI_Trig_B_Output::getRTSI5_Output_Select(nMDBG::tStatus2*) const
{
   return (tRTSI5_Output_Select)((_softCopy & ~0xff0f) >> 0x4);
}

inline void tMSeries::tRTSI_Trig_B_Output::writeRTSI5_Output_Select(tRTSI5_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI5_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_B_Output::tRTSI5_Output_Select tMSeries::tRTSI_Trig_B_Output::readRTSI5_Output_Select(nMDBG::tStatus2* s)
{
   return getRTSI5_Output_Select(s);
}

inline tMSeries::tRTSI_Trig_B_Output& tMSeries::tRTSI_Trig_B_Output::setRTSI6_Output_Select(tRTSI6_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf0ff)) | (((u16)fieldValue << 0x8) & ~0xf0ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_B_Output::tRTSI6_Output_Select tMSeries::tRTSI_Trig_B_Output::getRTSI6_Output_Select(nMDBG::tStatus2*) const
{
   return (tRTSI6_Output_Select)((_softCopy & ~0xf0ff) >> 0x8);
}

inline void tMSeries::tRTSI_Trig_B_Output::writeRTSI6_Output_Select(tRTSI6_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI6_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_B_Output::tRTSI6_Output_Select tMSeries::tRTSI_Trig_B_Output::readRTSI6_Output_Select(nMDBG::tStatus2* s)
{
   return getRTSI6_Output_Select(s);
}

inline tMSeries::tRTSI_Trig_B_Output& tMSeries::tRTSI_Trig_B_Output::setRTSI7_Output_Select(tRTSI7_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff)) | (((u16)fieldValue << 0xc) & ~0xfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Trig_B_Output::tRTSI7_Output_Select tMSeries::tRTSI_Trig_B_Output::getRTSI7_Output_Select(nMDBG::tStatus2*) const
{
   return (tRTSI7_Output_Select)((_softCopy & ~0xfff) >> 0xc);
}

inline void tMSeries::tRTSI_Trig_B_Output::writeRTSI7_Output_Select(tRTSI7_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI7_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Trig_B_Output::tRTSI7_Output_Select tMSeries::tRTSI_Trig_B_Output::readRTSI7_Output_Select(nMDBG::tStatus2* s)
{
   return getRTSI7_Output_Select(s);
}

inline void tMSeries::tRTSI_Trig_B_Output::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tG0_DMA_Config::tG0_DMA_Config()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tG0_DMA_Config::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tG0_DMA_Config::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tG0_DMA_Config& tMSeries::tG0_DMA_Config::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tG0_DMA_Config::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tG0_DMA_Config::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xfffffff7);
}

inline void tMSeries::tG0_DMA_Config::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tG0_DMA_Config::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tG0_DMA_Config& tMSeries::tG0_DMA_Config::setG0_DMA_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG0_DMA_Config::getG0_DMA_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tG0_DMA_Config::writeG0_DMA_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_DMA_Enable(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tG0_DMA_Config::readG0_DMA_Enable(nMDBG::tStatus2* s)
{
   return getG0_DMA_Enable(s);
}

inline tMSeries::tG0_DMA_Config& tMSeries::tG0_DMA_Config::setG0_DMA_Write(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG0_DMA_Config::getG0_DMA_Write(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tG0_DMA_Config::writeG0_DMA_Write(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_DMA_Write(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tG0_DMA_Config::readG0_DMA_Write(nMDBG::tStatus2* s)
{
   return getG0_DMA_Write(s);
}

inline tMSeries::tG0_DMA_Config& tMSeries::tG0_DMA_Config::setG0_DMA_Int_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG0_DMA_Config::getG0_DMA_Int_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tG0_DMA_Config::writeG0_DMA_Int_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_DMA_Int_Enable(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tG0_DMA_Config::readG0_DMA_Int_Enable(nMDBG::tStatus2* s)
{
   return getG0_DMA_Int_Enable(s);
}

inline tMSeries::tG0_DMA_Config& tMSeries::tG0_DMA_Config::setG0_DMA_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG0_DMA_Config::getG0_DMA_Reset(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tG0_DMA_Config::writeG0_DMA_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_DMA_Reset(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tG0_DMA_Config::readG0_DMA_Reset(nMDBG::tStatus2* s)
{
   return getG0_DMA_Reset(s);
}

inline tMSeries::tG0_DMA_Config& tMSeries::tG0_DMA_Config::setG0_DMA_BankSW_Error(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG0_DMA_Config::getG0_DMA_BankSW_Error(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tG0_DMA_Config::writeG0_DMA_BankSW_Error(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG0_DMA_BankSW_Error(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tG0_DMA_Config::readG0_DMA_BankSW_Error(nMDBG::tStatus2* s)
{
   return getG0_DMA_BankSW_Error(s);
}

inline void tMSeries::tG0_DMA_Config::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tG1_DMA_Config::tG1_DMA_Config()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tG1_DMA_Config::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tG1_DMA_Config::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tG1_DMA_Config& tMSeries::tG1_DMA_Config::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tG1_DMA_Config::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tG1_DMA_Config::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xfffffff7);
}

inline void tMSeries::tG1_DMA_Config::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tG1_DMA_Config::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tG1_DMA_Config& tMSeries::tG1_DMA_Config::setG1_DMA_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG1_DMA_Config::getG1_DMA_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tG1_DMA_Config::writeG1_DMA_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_DMA_Enable(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tG1_DMA_Config::readG1_DMA_Enable(nMDBG::tStatus2* s)
{
   return getG1_DMA_Enable(s);
}

inline tMSeries::tG1_DMA_Config& tMSeries::tG1_DMA_Config::setG1_DMA_Write(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG1_DMA_Config::getG1_DMA_Write(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tG1_DMA_Config::writeG1_DMA_Write(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_DMA_Write(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tG1_DMA_Config::readG1_DMA_Write(nMDBG::tStatus2* s)
{
   return getG1_DMA_Write(s);
}

inline tMSeries::tG1_DMA_Config& tMSeries::tG1_DMA_Config::setG1_DMA_Int_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffb)) | (((u16)fieldValue << 0x2) & ~0xfffb);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG1_DMA_Config::getG1_DMA_Int_Enable(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tMSeries::tG1_DMA_Config::writeG1_DMA_Int_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_DMA_Int_Enable(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tG1_DMA_Config::readG1_DMA_Int_Enable(nMDBG::tStatus2* s)
{
   return getG1_DMA_Int_Enable(s);
}

inline tMSeries::tG1_DMA_Config& tMSeries::tG1_DMA_Config::setG1_DMA_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG1_DMA_Config::getG1_DMA_Reset(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tG1_DMA_Config::writeG1_DMA_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_DMA_Reset(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tG1_DMA_Config::readG1_DMA_Reset(nMDBG::tStatus2* s)
{
   return getG1_DMA_Reset(s);
}

inline tMSeries::tG1_DMA_Config& tMSeries::tG1_DMA_Config::setG1_DMA_BankSW_Error(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG1_DMA_Config::getG1_DMA_BankSW_Error(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tG1_DMA_Config::writeG1_DMA_BankSW_Error(u16 fieldValue, nMDBG::tStatus2* s)
{
   setG1_DMA_BankSW_Error(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tG1_DMA_Config::readG1_DMA_BankSW_Error(nMDBG::tStatus2* s)
{
   return getG1_DMA_BankSW_Error(s);
}

inline void tMSeries::tG1_DMA_Config::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tG0_DMA_Status::tG0_DMA_Status()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tG0_DMA_Status::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tG0_DMA_Status& tMSeries::tG0_DMA_Status::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tG0_DMA_Status::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tG0_DMA_Status::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u16 tMSeries::tG0_DMA_Status::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tG0_DMA_Status& tMSeries::tG0_DMA_Status::setG0_Pstat(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff00)) | (((u16)fieldValue << 0x0) & ~0xff00);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG0_DMA_Status::getG0_Pstat(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff00) >> 0x0);
}

inline u16 tMSeries::tG0_DMA_Status::readG0_Pstat(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_Pstat(s);
}

inline tMSeries::tG0_DMA_Status& tMSeries::tG0_DMA_Status::setG0_DMA_Readbank(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG0_DMA_Status::getG0_DMA_Readbank(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline u16 tMSeries::tG0_DMA_Status::readG0_DMA_Readbank(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_DMA_Readbank(s);
}

inline tMSeries::tG0_DMA_Status& tMSeries::tG0_DMA_Status::setG0_DRQ_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG0_DMA_Status::getG0_DRQ_Error_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tMSeries::tG0_DMA_Status::readG0_DRQ_Error_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_DRQ_Error_St(s);
}

inline tMSeries::tG0_DMA_Status& tMSeries::tG0_DMA_Status::setG0_DRQ_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG0_DMA_Status::getG0_DRQ_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tMSeries::tG0_DMA_Status::readG0_DRQ_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG0_DRQ_St(s);
}

inline void tMSeries::tG0_DMA_Status::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tG1_DMA_Status::tG1_DMA_Status()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tG1_DMA_Status::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tG1_DMA_Status& tMSeries::tG1_DMA_Status::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tG1_DMA_Status::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tG1_DMA_Status::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u16 tMSeries::tG1_DMA_Status::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tG1_DMA_Status& tMSeries::tG1_DMA_Status::setG1_Pstat(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff00)) | (((u16)fieldValue << 0x0) & ~0xff00);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG1_DMA_Status::getG1_Pstat(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff00) >> 0x0);
}

inline u16 tMSeries::tG1_DMA_Status::readG1_Pstat(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_Pstat(s);
}

inline tMSeries::tG1_DMA_Status& tMSeries::tG1_DMA_Status::setG1_DMA_Readbank(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG1_DMA_Status::getG1_DMA_Readbank(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline u16 tMSeries::tG1_DMA_Status::readG1_DMA_Readbank(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_DMA_Readbank(s);
}

inline tMSeries::tG1_DMA_Status& tMSeries::tG1_DMA_Status::setG1_DRQ_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG1_DMA_Status::getG1_DRQ_Error_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tMSeries::tG1_DMA_Status::readG1_DRQ_Error_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_DRQ_Error_St(s);
}

inline tMSeries::tG1_DMA_Status& tMSeries::tG1_DMA_Status::setG1_DRQ_St(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7fff)) | (((u16)fieldValue << 0xf) & ~0x7fff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tG1_DMA_Status::getG1_DRQ_St(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tMSeries::tG1_DMA_Status::readG1_DRQ_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getG1_DRQ_St(s);
}

inline void tMSeries::tG1_DMA_Status::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tCDIO_DMA_Select::tCDIO_DMA_Select()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tCDIO_DMA_Select::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tCDIO_DMA_Select::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tCDIO_DMA_Select& tMSeries::tCDIO_DMA_Select::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tCDIO_DMA_Select::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tCDIO_DMA_Select::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tCDIO_DMA_Select::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tCDIO_DMA_Select::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tCDIO_DMA_Select& tMSeries::tCDIO_DMA_Select::setCDI_DMA_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xf0)) | (((u8)fieldValue << 0x0) & ~0xf0);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tCDIO_DMA_Select::getCDI_DMA_Select(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xf0) >> 0x0);
}

inline void tMSeries::tCDIO_DMA_Select::writeCDI_DMA_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   setCDI_DMA_Select(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tCDIO_DMA_Select::readCDI_DMA_Select(nMDBG::tStatus2* s)
{
   return getCDI_DMA_Select(s);
}

inline tMSeries::tCDIO_DMA_Select& tMSeries::tCDIO_DMA_Select::setCDO_DMA_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xf)) | (((u8)fieldValue << 0x4) & ~0xf);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tCDIO_DMA_Select::getCDO_DMA_Select(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xf) >> 0x4);
}

inline void tMSeries::tCDIO_DMA_Select::writeCDO_DMA_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   setCDO_DMA_Select(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tCDIO_DMA_Select::readCDO_DMA_Select(nMDBG::tStatus2* s)
{
   return getCDO_DMA_Select(s);
}

inline void tMSeries::tCDIO_DMA_Select::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tSCXI_Control::tSCXI_Control()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tSCXI_Control::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tSCXI_Control::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tSCXI_Control& tMSeries::tSCXI_Control::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tSCXI_Control::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tSCXI_Control::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffbf);
}

inline void tMSeries::tSCXI_Control::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tSCXI_Control::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tSCXI_Control& tMSeries::tSCXI_Control::setSCXI_SW_SPIClk(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfe)) | (((u8)fieldValue << 0x0) & ~0xfe);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tSCXI_Control::getSCXI_SW_SPIClk(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xfe) >> 0x0);
}

inline void tMSeries::tSCXI_Control::writeSCXI_SW_SPIClk(u8 fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_SW_SPIClk(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tSCXI_Control::readSCXI_SW_SPIClk(nMDBG::tStatus2* s)
{
   return getSCXI_SW_SPIClk(s);
}

inline tMSeries::tSCXI_Control& tMSeries::tSCXI_Control::setSCXI_Back_Plane_MISO_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfd)) | (((u8)fieldValue << 0x1) & ~0xfd);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tSCXI_Control::getSCXI_Back_Plane_MISO_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfd) >> 0x1);
}

inline void tMSeries::tSCXI_Control::writeSCXI_Back_Plane_MISO_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_Back_Plane_MISO_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tSCXI_Control::readSCXI_Back_Plane_MISO_Enable(nMDBG::tStatus2* s)
{
   return getSCXI_Back_Plane_MISO_Enable(s);
}

inline tMSeries::tSCXI_Control& tMSeries::tSCXI_Control::setSCXI_Front_Panel_MISO_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfb)) | (((u8)fieldValue << 0x2) & ~0xfb);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tSCXI_Control::getSCXI_Front_Panel_MISO_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfb) >> 0x2);
}

inline void tMSeries::tSCXI_Control::writeSCXI_Front_Panel_MISO_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_Front_Panel_MISO_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tSCXI_Control::readSCXI_Front_Panel_MISO_Enable(nMDBG::tStatus2* s)
{
   return getSCXI_Front_Panel_MISO_Enable(s);
}

inline tMSeries::tSCXI_Control& tMSeries::tSCXI_Control::setSCXI_Intr(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xf7)) | (((u8)fieldValue << 0x3) & ~0xf7);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tSCXI_Control::getSCXI_Intr(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xf7) >> 0x3);
}

inline void tMSeries::tSCXI_Control::writeSCXI_Intr(u8 fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_Intr(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tSCXI_Control::readSCXI_Intr(nMDBG::tStatus2* s)
{
   return getSCXI_Intr(s);
}

inline tMSeries::tSCXI_Control& tMSeries::tSCXI_Control::setSCXI_D_A(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xef)) | (((u8)fieldValue << 0x4) & ~0xef);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tSCXI_Control::getSCXI_D_A(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xef) >> 0x4);
}

inline void tMSeries::tSCXI_Control::writeSCXI_D_A(u8 fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_D_A(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tSCXI_Control::readSCXI_D_A(nMDBG::tStatus2* s)
{
   return getSCXI_D_A(s);
}

inline tMSeries::tSCXI_Control& tMSeries::tSCXI_Control::setSCXI_HW_Serial_Timebase(tSCXI_HW_Serial_Timebase fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xdf)) | (((u8)fieldValue << 0x5) & ~0xdf);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tSCXI_Control::tSCXI_HW_Serial_Timebase tMSeries::tSCXI_Control::getSCXI_HW_Serial_Timebase(nMDBG::tStatus2*) const
{
   return (tSCXI_HW_Serial_Timebase)((_softCopy & ~0xdf) >> 0x5);
}

inline void tMSeries::tSCXI_Control::writeSCXI_HW_Serial_Timebase(tSCXI_HW_Serial_Timebase fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_HW_Serial_Timebase(fieldValue, s);
   flush(s);
}
inline tMSeries::tSCXI_Control::tSCXI_HW_Serial_Timebase tMSeries::tSCXI_Control::readSCXI_HW_Serial_Timebase(nMDBG::tStatus2* s)
{
   return getSCXI_HW_Serial_Timebase(s);
}

inline tMSeries::tSCXI_Control& tMSeries::tSCXI_Control::setSCXI_HW_Serial_Start(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xbf)) | (((u8)fieldValue << 0x6) & ~0xbf);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tSCXI_Control::getSCXI_HW_Serial_Start(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xbf) >> 0x6);
}

inline void tMSeries::tSCXI_Control::writeSCXI_HW_Serial_Start(u8 fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_HW_Serial_Start(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tSCXI_Control::readSCXI_HW_Serial_Start(nMDBG::tStatus2* s)
{
   return getSCXI_HW_Serial_Start(s);
}

inline tMSeries::tSCXI_Control& tMSeries::tSCXI_Control::setSCXI_HW_Serial_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0x7f)) | (((u8)fieldValue << 0x7) & ~0x7f);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tSCXI_Control::getSCXI_HW_Serial_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0x7f) >> 0x7);
}

inline void tMSeries::tSCXI_Control::writeSCXI_HW_Serial_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_HW_Serial_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tSCXI_Control::readSCXI_HW_Serial_Enable(nMDBG::tStatus2* s)
{
   return getSCXI_HW_Serial_Enable(s);
}

inline void tMSeries::tSCXI_Control::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_Mode_1::tAI_Mode_1()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_Mode_1::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_Mode_1::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_Mode_1& tMSeries::tAI_Mode_1::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAI_Mode_1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_Mode_1::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAI_Mode_1::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAI_Mode_1::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_Mode_1& tMSeries::tAI_Mode_1::setAI_Trigger_Once(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Mode_1::getAI_Trigger_Once(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tAI_Mode_1::writeAI_Trigger_Once(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_Trigger_Once(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Mode_1::readAI_Trigger_Once(nMDBG::tStatus2* s)
{
   return getAI_Trigger_Once(s);
}

inline tMSeries::tAI_Mode_1& tMSeries::tAI_Mode_1::setAI_Continuous(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffd)) | (((u16)fieldValue << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Mode_1::getAI_Continuous(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tMSeries::tAI_Mode_1::writeAI_Continuous(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_Continuous(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Mode_1::readAI_Continuous(nMDBG::tStatus2* s)
{
   return getAI_Continuous(s);
}

inline tMSeries::tAI_Mode_1& tMSeries::tAI_Mode_1::setAI_Start_Stop(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff7)) | (((u16)fieldValue << 0x3) & ~0xfff7);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Mode_1::getAI_Start_Stop(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tMSeries::tAI_Mode_1::writeAI_Start_Stop(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_Start_Stop(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Mode_1::readAI_Start_Stop(nMDBG::tStatus2* s)
{
   return getAI_Start_Stop(s);
}

inline tMSeries::tAI_Mode_1& tMSeries::tAI_Mode_1::setAI_SI_Source_Polarity(tAI_SI_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffef)) | (((u16)fieldValue << 0x4) & ~0xffef);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_1::tAI_SI_Source_Polarity tMSeries::tAI_Mode_1::getAI_SI_Source_Polarity(nMDBG::tStatus2*) const
{
   return (tAI_SI_Source_Polarity)((_softCopy & ~0xffef) >> 0x4);
}

inline void tMSeries::tAI_Mode_1::writeAI_SI_Source_Polarity(tAI_SI_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI_Source_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_1::tAI_SI_Source_Polarity tMSeries::tAI_Mode_1::readAI_SI_Source_Polarity(nMDBG::tStatus2* s)
{
   return getAI_SI_Source_Polarity(s);
}

inline tMSeries::tAI_Mode_1& tMSeries::tAI_Mode_1::setAI_CONVERT_Source_Polarity(tAI_CONVERT_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_1::tAI_CONVERT_Source_Polarity tMSeries::tAI_Mode_1::getAI_CONVERT_Source_Polarity(nMDBG::tStatus2*) const
{
   return (tAI_CONVERT_Source_Polarity)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tAI_Mode_1::writeAI_CONVERT_Source_Polarity(tAI_CONVERT_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAI_CONVERT_Source_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_1::tAI_CONVERT_Source_Polarity tMSeries::tAI_Mode_1::readAI_CONVERT_Source_Polarity(nMDBG::tStatus2* s)
{
   return getAI_CONVERT_Source_Polarity(s);
}

inline tMSeries::tAI_Mode_1& tMSeries::tAI_Mode_1::setAI_SI_Source_Select(tAI_SI_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf83f)) | (((u16)fieldValue << 0x6) & ~0xf83f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_1::tAI_SI_Source_Select tMSeries::tAI_Mode_1::getAI_SI_Source_Select(nMDBG::tStatus2*) const
{
   return (tAI_SI_Source_Select)((_softCopy & ~0xf83f) >> 0x6);
}

inline void tMSeries::tAI_Mode_1::writeAI_SI_Source_Select(tAI_SI_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   setAI_SI_Source_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_1::tAI_SI_Source_Select tMSeries::tAI_Mode_1::readAI_SI_Source_Select(nMDBG::tStatus2* s)
{
   return getAI_SI_Source_Select(s);
}

inline tMSeries::tAI_Mode_1& tMSeries::tAI_Mode_1::setAI_CONVERT_Source_Select(tAI_CONVERT_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x7ff)) | (((u16)fieldValue << 0xb) & ~0x7ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Mode_1::tAI_CONVERT_Source_Select tMSeries::tAI_Mode_1::getAI_CONVERT_Source_Select(nMDBG::tStatus2*) const
{
   return (tAI_CONVERT_Source_Select)((_softCopy & ~0x7ff) >> 0xb);
}

inline void tMSeries::tAI_Mode_1::writeAI_CONVERT_Source_Select(tAI_CONVERT_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   setAI_CONVERT_Source_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Mode_1::tAI_CONVERT_Source_Select tMSeries::tAI_Mode_1::readAI_CONVERT_Source_Select(nMDBG::tStatus2* s)
{
   return getAI_CONVERT_Source_Select(s);
}

inline void tMSeries::tAI_Mode_1::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_DIV_Load_A::tAI_DIV_Load_A()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_DIV_Load_A::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_DIV_Load_A::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_DIV_Load_A& tMSeries::tAI_DIV_Load_A::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAI_DIV_Load_A::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_DIV_Load_A::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAI_DIV_Load_A::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAI_DIV_Load_A::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_DIV_Load_A& tMSeries::tAI_DIV_Load_A::set(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x0)) | (((u16)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_DIV_Load_A::get(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAI_DIV_Load_A::write(u16 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_DIV_Load_A::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAI_DIV_Load_A::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tSCXI_Serial_Data_In::tSCXI_Serial_Data_In()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tSCXI_Serial_Data_In::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tSCXI_Serial_Data_In& tMSeries::tSCXI_Serial_Data_In::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tSCXI_Serial_Data_In::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tSCXI_Serial_Data_In::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u8 tMSeries::tSCXI_Serial_Data_In::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tSCXI_Serial_Data_In& tMSeries::tSCXI_Serial_Data_In::set(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0x0)) | (((u8)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tSCXI_Serial_Data_In::get(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0x0) >> 0x0);
}

inline u8 tMSeries::tSCXI_Serial_Data_In::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void tMSeries::tSCXI_Serial_Data_In::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tSCXI_Serial_Data_Out::tSCXI_Serial_Data_Out()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tSCXI_Serial_Data_Out::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tSCXI_Serial_Data_Out::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tSCXI_Serial_Data_Out& tMSeries::tSCXI_Serial_Data_Out::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tSCXI_Serial_Data_Out::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tSCXI_Serial_Data_Out::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tSCXI_Serial_Data_Out::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tSCXI_Serial_Data_Out::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tSCXI_Serial_Data_Out& tMSeries::tSCXI_Serial_Data_Out::set(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0x0)) | (((u8)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tSCXI_Serial_Data_Out::get(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tSCXI_Serial_Data_Out::write(u8 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tSCXI_Serial_Data_Out::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tSCXI_Serial_Data_Out::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tSCXI_Status::tSCXI_Status()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tSCXI_Status::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tSCXI_Status& tMSeries::tSCXI_Status::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tSCXI_Status::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tSCXI_Status::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u8 tMSeries::tSCXI_Status::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tSCXI_Status& tMSeries::tSCXI_Status::setSCXI_Shift_In_Prog(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfe)) | (((u8)fieldValue << 0x0) & ~0xfe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tSCXI_Status::getSCXI_Shift_In_Prog(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfe) >> 0x0);
}

inline tBoolean tMSeries::tSCXI_Status::readSCXI_Shift_In_Prog(nMDBG::tStatus2* s)
{
   refresh(s);
   return getSCXI_Shift_In_Prog(s);
}

inline void tMSeries::tSCXI_Status::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tSCXI_Output_Enable::tSCXI_Output_Enable()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tSCXI_Output_Enable::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tSCXI_Output_Enable::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tSCXI_Output_Enable& tMSeries::tSCXI_Output_Enable::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tSCXI_Output_Enable::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tSCXI_Output_Enable::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tSCXI_Output_Enable::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tSCXI_Output_Enable::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tSCXI_Output_Enable& tMSeries::tSCXI_Output_Enable::setSCXI_Dedicated_Output_Enable(tSCXI_Dedicated_Output_Enable fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfe)) | (((u8)fieldValue << 0x0) & ~0xfe);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tSCXI_Output_Enable::tSCXI_Dedicated_Output_Enable tMSeries::tSCXI_Output_Enable::getSCXI_Dedicated_Output_Enable(nMDBG::tStatus2*) const
{
   return (tSCXI_Dedicated_Output_Enable)((_softCopy & ~0xfe) >> 0x0);
}

inline void tMSeries::tSCXI_Output_Enable::writeSCXI_Dedicated_Output_Enable(tSCXI_Dedicated_Output_Enable fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_Dedicated_Output_Enable(fieldValue, s);
   flush(s);
}
inline tMSeries::tSCXI_Output_Enable::tSCXI_Dedicated_Output_Enable tMSeries::tSCXI_Output_Enable::readSCXI_Dedicated_Output_Enable(nMDBG::tStatus2* s)
{
   return getSCXI_Dedicated_Output_Enable(s);
}

inline tMSeries::tSCXI_Output_Enable& tMSeries::tSCXI_Output_Enable::setSCXI_Trig1_Output_Enable(tSCXI_Trig1_Output_Enable fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfd)) | (((u8)fieldValue << 0x1) & ~0xfd);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tSCXI_Output_Enable::tSCXI_Trig1_Output_Enable tMSeries::tSCXI_Output_Enable::getSCXI_Trig1_Output_Enable(nMDBG::tStatus2*) const
{
   return (tSCXI_Trig1_Output_Enable)((_softCopy & ~0xfd) >> 0x1);
}

inline void tMSeries::tSCXI_Output_Enable::writeSCXI_Trig1_Output_Enable(tSCXI_Trig1_Output_Enable fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_Trig1_Output_Enable(fieldValue, s);
   flush(s);
}
inline tMSeries::tSCXI_Output_Enable::tSCXI_Trig1_Output_Enable tMSeries::tSCXI_Output_Enable::readSCXI_Trig1_Output_Enable(nMDBG::tStatus2* s)
{
   return getSCXI_Trig1_Output_Enable(s);
}

inline tMSeries::tSCXI_Output_Enable& tMSeries::tSCXI_Output_Enable::setSCXI_Trig0_Output_Enable(tSCXI_Trig0_Output_Enable fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfb)) | (((u8)fieldValue << 0x2) & ~0xfb);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tSCXI_Output_Enable::tSCXI_Trig0_Output_Enable tMSeries::tSCXI_Output_Enable::getSCXI_Trig0_Output_Enable(nMDBG::tStatus2*) const
{
   return (tSCXI_Trig0_Output_Enable)((_softCopy & ~0xfb) >> 0x2);
}

inline void tMSeries::tSCXI_Output_Enable::writeSCXI_Trig0_Output_Enable(tSCXI_Trig0_Output_Enable fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_Trig0_Output_Enable(fieldValue, s);
   flush(s);
}
inline tMSeries::tSCXI_Output_Enable::tSCXI_Trig0_Output_Enable tMSeries::tSCXI_Output_Enable::readSCXI_Trig0_Output_Enable(nMDBG::tStatus2* s)
{
   return getSCXI_Trig0_Output_Enable(s);
}

inline tMSeries::tSCXI_Output_Enable& tMSeries::tSCXI_Output_Enable::setSCXI_Trig1_Output_Select(tSCXI_Trig1_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0x7)) | (((u8)fieldValue << 0x3) & ~0x7);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tSCXI_Output_Enable::tSCXI_Trig1_Output_Select tMSeries::tSCXI_Output_Enable::getSCXI_Trig1_Output_Select(nMDBG::tStatus2*) const
{
   return (tSCXI_Trig1_Output_Select)((_softCopy & ~0x7) >> 0x3);
}

inline void tMSeries::tSCXI_Output_Enable::writeSCXI_Trig1_Output_Select(tSCXI_Trig1_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_Trig1_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tSCXI_Output_Enable::tSCXI_Trig1_Output_Select tMSeries::tSCXI_Output_Enable::readSCXI_Trig1_Output_Select(nMDBG::tStatus2* s)
{
   return getSCXI_Trig1_Output_Select(s);
}

inline void tMSeries::tSCXI_Output_Enable::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tSCXI_DIO_Enable::tSCXI_DIO_Enable()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tSCXI_DIO_Enable::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tSCXI_DIO_Enable::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tSCXI_DIO_Enable& tMSeries::tSCXI_DIO_Enable::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tSCXI_DIO_Enable::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tSCXI_DIO_Enable::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tSCXI_DIO_Enable::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tSCXI_DIO_Enable::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tSCXI_DIO_Enable& tMSeries::tSCXI_DIO_Enable::setSCXI_DIO_MOSI_Enable(tSCXI_DIO_MOSI_Enable fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfe)) | (((u8)fieldValue << 0x0) & ~0xfe);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tSCXI_DIO_Enable::tSCXI_DIO_MOSI_Enable tMSeries::tSCXI_DIO_Enable::getSCXI_DIO_MOSI_Enable(nMDBG::tStatus2*) const
{
   return (tSCXI_DIO_MOSI_Enable)((_softCopy & ~0xfe) >> 0x0);
}

inline void tMSeries::tSCXI_DIO_Enable::writeSCXI_DIO_MOSI_Enable(tSCXI_DIO_MOSI_Enable fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_DIO_MOSI_Enable(fieldValue, s);
   flush(s);
}
inline tMSeries::tSCXI_DIO_Enable::tSCXI_DIO_MOSI_Enable tMSeries::tSCXI_DIO_Enable::readSCXI_DIO_MOSI_Enable(nMDBG::tStatus2* s)
{
   return getSCXI_DIO_MOSI_Enable(s);
}

inline tMSeries::tSCXI_DIO_Enable& tMSeries::tSCXI_DIO_Enable::setSCXI_DIO_D_A_Enable(tSCXI_DIO_D_A_Enable fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfd)) | (((u8)fieldValue << 0x1) & ~0xfd);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tSCXI_DIO_Enable::tSCXI_DIO_D_A_Enable tMSeries::tSCXI_DIO_Enable::getSCXI_DIO_D_A_Enable(nMDBG::tStatus2*) const
{
   return (tSCXI_DIO_D_A_Enable)((_softCopy & ~0xfd) >> 0x1);
}

inline void tMSeries::tSCXI_DIO_Enable::writeSCXI_DIO_D_A_Enable(tSCXI_DIO_D_A_Enable fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_DIO_D_A_Enable(fieldValue, s);
   flush(s);
}
inline tMSeries::tSCXI_DIO_Enable::tSCXI_DIO_D_A_Enable tMSeries::tSCXI_DIO_Enable::readSCXI_DIO_D_A_Enable(nMDBG::tStatus2* s)
{
   return getSCXI_DIO_D_A_Enable(s);
}

inline tMSeries::tSCXI_DIO_Enable& tMSeries::tSCXI_DIO_Enable::setSCXI_DIO_Intr_Enable(tSCXI_DIO_Intr_Enable fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfb)) | (((u8)fieldValue << 0x2) & ~0xfb);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tSCXI_DIO_Enable::tSCXI_DIO_Intr_Enable tMSeries::tSCXI_DIO_Enable::getSCXI_DIO_Intr_Enable(nMDBG::tStatus2*) const
{
   return (tSCXI_DIO_Intr_Enable)((_softCopy & ~0xfb) >> 0x2);
}

inline void tMSeries::tSCXI_DIO_Enable::writeSCXI_DIO_Intr_Enable(tSCXI_DIO_Intr_Enable fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_DIO_Intr_Enable(fieldValue, s);
   flush(s);
}
inline tMSeries::tSCXI_DIO_Enable::tSCXI_DIO_Intr_Enable tMSeries::tSCXI_DIO_Enable::readSCXI_DIO_Intr_Enable(nMDBG::tStatus2* s)
{
   return getSCXI_DIO_Intr_Enable(s);
}

inline void tMSeries::tSCXI_DIO_Enable::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tStatic_Digital_Output::tStatic_Digital_Output()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tStatic_Digital_Output::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tStatic_Digital_Output::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tStatic_Digital_Output& tMSeries::tStatic_Digital_Output::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tStatic_Digital_Output::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tStatic_Digital_Output::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tStatic_Digital_Output::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tStatic_Digital_Output::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tStatic_Digital_Output& tMSeries::tStatic_Digital_Output::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tStatic_Digital_Output::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tStatic_Digital_Output::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tStatic_Digital_Output::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tStatic_Digital_Output::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tStatic_Digital_Input::tStatic_Digital_Input()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tStatic_Digital_Input::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tStatic_Digital_Input& tMSeries::tStatic_Digital_Input::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tStatic_Digital_Input::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tStatic_Digital_Input::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u32 tMSeries::tStatic_Digital_Input::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tStatic_Digital_Input& tMSeries::tStatic_Digital_Input::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tStatic_Digital_Input::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tMSeries::tStatic_Digital_Input::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void tMSeries::tStatic_Digital_Input::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tDIO_Direction::tDIO_Direction()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tDIO_Direction::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tDIO_Direction::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tDIO_Direction& tMSeries::tDIO_Direction::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tDIO_Direction::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tDIO_Direction::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tDIO_Direction::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tDIO_Direction::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tDIO_Direction& tMSeries::tDIO_Direction::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tDIO_Direction::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tDIO_Direction::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tDIO_Direction::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tDIO_Direction::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Serial_Interrupt_Enable::tAO_Serial_Interrupt_Enable()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Serial_Interrupt_Enable::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_Serial_Interrupt_Enable::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_Serial_Interrupt_Enable& tMSeries::tAO_Serial_Interrupt_Enable::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tAO_Serial_Interrupt_Enable::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Serial_Interrupt_Enable::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tAO_Serial_Interrupt_Enable::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tAO_Serial_Interrupt_Enable::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_Serial_Interrupt_Enable& tMSeries::tAO_Serial_Interrupt_Enable::setAO_MUDS_0_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfe)) | (((u8)fieldValue << 0x0) & ~0xfe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Serial_Interrupt_Enable::getAO_MUDS_0_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfe) >> 0x0);
}

inline void tMSeries::tAO_Serial_Interrupt_Enable::writeAO_MUDS_0_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_MUDS_0_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Serial_Interrupt_Enable::readAO_MUDS_0_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAO_MUDS_0_Interrupt_Enable(s);
}

inline tMSeries::tAO_Serial_Interrupt_Enable& tMSeries::tAO_Serial_Interrupt_Enable::setAO_MUDS_1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfd)) | (((u8)fieldValue << 0x1) & ~0xfd);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Serial_Interrupt_Enable::getAO_MUDS_1_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfd) >> 0x1);
}

inline void tMSeries::tAO_Serial_Interrupt_Enable::writeAO_MUDS_1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_MUDS_1_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Serial_Interrupt_Enable::readAO_MUDS_1_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAO_MUDS_1_Interrupt_Enable(s);
}

inline tMSeries::tAO_Serial_Interrupt_Enable& tMSeries::tAO_Serial_Interrupt_Enable::setAO_MUDS_2_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfb)) | (((u8)fieldValue << 0x2) & ~0xfb);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Serial_Interrupt_Enable::getAO_MUDS_2_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfb) >> 0x2);
}

inline void tMSeries::tAO_Serial_Interrupt_Enable::writeAO_MUDS_2_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_MUDS_2_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Serial_Interrupt_Enable::readAO_MUDS_2_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAO_MUDS_2_Interrupt_Enable(s);
}

inline tMSeries::tAO_Serial_Interrupt_Enable& tMSeries::tAO_Serial_Interrupt_Enable::setAO_MUDS_3_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xf7)) | (((u8)fieldValue << 0x3) & ~0xf7);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Serial_Interrupt_Enable::getAO_MUDS_3_Interrupt_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xf7) >> 0x3);
}

inline void tMSeries::tAO_Serial_Interrupt_Enable::writeAO_MUDS_3_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_MUDS_3_Interrupt_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Serial_Interrupt_Enable::readAO_MUDS_3_Interrupt_Enable(nMDBG::tStatus2* s)
{
   return getAO_MUDS_3_Interrupt_Enable(s);
}

inline void tMSeries::tAO_Serial_Interrupt_Enable::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Serial_Interrupt_Ack::tAO_Serial_Interrupt_Ack()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Serial_Interrupt_Ack::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_Serial_Interrupt_Ack::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_Serial_Interrupt_Ack& tMSeries::tAO_Serial_Interrupt_Ack::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tAO_Serial_Interrupt_Ack::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Serial_Interrupt_Ack::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xfffffff0);
}

inline void tMSeries::tAO_Serial_Interrupt_Ack::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tAO_Serial_Interrupt_Ack::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_Serial_Interrupt_Ack& tMSeries::tAO_Serial_Interrupt_Ack::setAO_MUDS_0_Interrupt_Ack(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfe)) | (((u8)fieldValue << 0x0) & ~0xfe);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tAO_Serial_Interrupt_Ack::getAO_MUDS_0_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xfe) >> 0x0);
}

inline void tMSeries::tAO_Serial_Interrupt_Ack::writeAO_MUDS_0_Interrupt_Ack(u8 fieldValue, nMDBG::tStatus2* s)
{
   setAO_MUDS_0_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tAO_Serial_Interrupt_Ack::readAO_MUDS_0_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAO_MUDS_0_Interrupt_Ack(s);
}

inline tMSeries::tAO_Serial_Interrupt_Ack& tMSeries::tAO_Serial_Interrupt_Ack::setAO_MUDS_1_Interrupt_Ack(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfd)) | (((u8)fieldValue << 0x1) & ~0xfd);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tAO_Serial_Interrupt_Ack::getAO_MUDS_1_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xfd) >> 0x1);
}

inline void tMSeries::tAO_Serial_Interrupt_Ack::writeAO_MUDS_1_Interrupt_Ack(u8 fieldValue, nMDBG::tStatus2* s)
{
   setAO_MUDS_1_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tAO_Serial_Interrupt_Ack::readAO_MUDS_1_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAO_MUDS_1_Interrupt_Ack(s);
}

inline tMSeries::tAO_Serial_Interrupt_Ack& tMSeries::tAO_Serial_Interrupt_Ack::setAO_MUDS_2_Interrupt_Ack(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfb)) | (((u8)fieldValue << 0x2) & ~0xfb);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tAO_Serial_Interrupt_Ack::getAO_MUDS_2_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xfb) >> 0x2);
}

inline void tMSeries::tAO_Serial_Interrupt_Ack::writeAO_MUDS_2_Interrupt_Ack(u8 fieldValue, nMDBG::tStatus2* s)
{
   setAO_MUDS_2_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tAO_Serial_Interrupt_Ack::readAO_MUDS_2_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAO_MUDS_2_Interrupt_Ack(s);
}

inline tMSeries::tAO_Serial_Interrupt_Ack& tMSeries::tAO_Serial_Interrupt_Ack::setAO_MUDS_3_Interrupt_Ack(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xf7)) | (((u8)fieldValue << 0x3) & ~0xf7);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tAO_Serial_Interrupt_Ack::getAO_MUDS_3_Interrupt_Ack(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xf7) >> 0x3);
}

inline void tMSeries::tAO_Serial_Interrupt_Ack::writeAO_MUDS_3_Interrupt_Ack(u8 fieldValue, nMDBG::tStatus2* s)
{
   setAO_MUDS_3_Interrupt_Ack(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tAO_Serial_Interrupt_Ack::readAO_MUDS_3_Interrupt_Ack(nMDBG::tStatus2* s)
{
   return getAO_MUDS_3_Interrupt_Ack(s);
}

inline void tMSeries::tAO_Serial_Interrupt_Ack::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Serial_Interrupt_Status::tAO_Serial_Interrupt_Status()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Serial_Interrupt_Status::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tAO_Serial_Interrupt_Status& tMSeries::tAO_Serial_Interrupt_Status::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tAO_Serial_Interrupt_Status::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Serial_Interrupt_Status::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u8 tMSeries::tAO_Serial_Interrupt_Status::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tAO_Serial_Interrupt_Status& tMSeries::tAO_Serial_Interrupt_Status::setAO_MUDS_0_Interrupt_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfe)) | (((u8)fieldValue << 0x0) & ~0xfe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Serial_Interrupt_Status::getAO_MUDS_0_Interrupt_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfe) >> 0x0);
}

inline tBoolean tMSeries::tAO_Serial_Interrupt_Status::readAO_MUDS_0_Interrupt_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_MUDS_0_Interrupt_St(s);
}

inline tMSeries::tAO_Serial_Interrupt_Status& tMSeries::tAO_Serial_Interrupt_Status::setAO_MUDS_1_Interrupt_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfd)) | (((u8)fieldValue << 0x1) & ~0xfd);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Serial_Interrupt_Status::getAO_MUDS_1_Interrupt_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfd) >> 0x1);
}

inline tBoolean tMSeries::tAO_Serial_Interrupt_Status::readAO_MUDS_1_Interrupt_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_MUDS_1_Interrupt_St(s);
}

inline tMSeries::tAO_Serial_Interrupt_Status& tMSeries::tAO_Serial_Interrupt_Status::setAO_MUDS_2_Interrupt_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfb)) | (((u8)fieldValue << 0x2) & ~0xfb);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Serial_Interrupt_Status::getAO_MUDS_2_Interrupt_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfb) >> 0x2);
}

inline tBoolean tMSeries::tAO_Serial_Interrupt_Status::readAO_MUDS_2_Interrupt_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_MUDS_2_Interrupt_St(s);
}

inline tMSeries::tAO_Serial_Interrupt_Status& tMSeries::tAO_Serial_Interrupt_Status::setAO_MUDS_3_Interrupt_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xf7)) | (((u8)fieldValue << 0x3) & ~0xf7);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Serial_Interrupt_Status::getAO_MUDS_3_Interrupt_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xf7) >> 0x3);
}

inline tBoolean tMSeries::tAO_Serial_Interrupt_Status::readAO_MUDS_3_Interrupt_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getAO_MUDS_3_Interrupt_St(s);
}

inline void tMSeries::tAO_Serial_Interrupt_Status::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tInterrupt_C_Enable::tInterrupt_C_Enable()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tInterrupt_C_Enable::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tInterrupt_C_Enable::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tInterrupt_C_Enable& tMSeries::tInterrupt_C_Enable::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tInterrupt_C_Enable::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tInterrupt_C_Enable::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tInterrupt_C_Enable::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tInterrupt_C_Enable::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tInterrupt_C_Enable& tMSeries::tInterrupt_C_Enable::setInterrupt_Group_C_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfe)) | (((u8)fieldValue << 0x0) & ~0xfe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_C_Enable::getInterrupt_Group_C_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfe) >> 0x0);
}

inline void tMSeries::tInterrupt_C_Enable::writeInterrupt_Group_C_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setInterrupt_Group_C_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tInterrupt_C_Enable::readInterrupt_Group_C_Enable(nMDBG::tStatus2* s)
{
   return getInterrupt_Group_C_Enable(s);
}

inline void tMSeries::tInterrupt_C_Enable::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tInterrupt_C_Status::tInterrupt_C_Status()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tInterrupt_C_Status::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tInterrupt_C_Status& tMSeries::tInterrupt_C_Status::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tInterrupt_C_Status::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tInterrupt_C_Status::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u8 tMSeries::tInterrupt_C_Status::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tInterrupt_C_Status& tMSeries::tInterrupt_C_Status::setInterrupt_Group_C_Status(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfe)) | (((u8)fieldValue << 0x0) & ~0xfe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tInterrupt_C_Status::getInterrupt_Group_C_Status(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfe) >> 0x0);
}

inline tBoolean tMSeries::tInterrupt_C_Status::readInterrupt_Group_C_Status(nMDBG::tStatus2* s)
{
   refresh(s);
   return getInterrupt_Group_C_Status(s);
}

inline void tMSeries::tInterrupt_C_Status::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAnalog_Trigger_Control::tAnalog_Trigger_Control()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAnalog_Trigger_Control::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAnalog_Trigger_Control::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAnalog_Trigger_Control& tMSeries::tAnalog_Trigger_Control::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tAnalog_Trigger_Control::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAnalog_Trigger_Control::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tAnalog_Trigger_Control::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tAnalog_Trigger_Control::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAnalog_Trigger_Control& tMSeries::tAnalog_Trigger_Control::setAnalog_Trigger_Select(tAnalog_Trigger_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfc)) | (((u8)fieldValue << 0x0) & ~0xfc);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAnalog_Trigger_Control::tAnalog_Trigger_Select tMSeries::tAnalog_Trigger_Control::getAnalog_Trigger_Select(nMDBG::tStatus2*) const
{
   return (tAnalog_Trigger_Select)((_softCopy & ~0xfc) >> 0x0);
}

inline void tMSeries::tAnalog_Trigger_Control::writeAnalog_Trigger_Select(tAnalog_Trigger_Select fieldValue, nMDBG::tStatus2* s)
{
   setAnalog_Trigger_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tAnalog_Trigger_Control::tAnalog_Trigger_Select tMSeries::tAnalog_Trigger_Control::readAnalog_Trigger_Select(nMDBG::tStatus2* s)
{
   return getAnalog_Trigger_Select(s);
}

inline void tMSeries::tAnalog_Trigger_Control::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_FIFO_Data::tAI_FIFO_Data()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_FIFO_Data::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tAI_FIFO_Data& tMSeries::tAI_FIFO_Data::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAI_FIFO_Data::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_FIFO_Data::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u32 tMSeries::tAI_FIFO_Data::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tAI_FIFO_Data& tMSeries::tAI_FIFO_Data::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_FIFO_Data::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tMSeries::tAI_FIFO_Data::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void tMSeries::tAI_FIFO_Data::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_FIFO_Clear::tAI_FIFO_Clear()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_FIFO_Clear::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_FIFO_Clear::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_FIFO_Clear& tMSeries::tAI_FIFO_Clear::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAI_FIFO_Clear::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_FIFO_Clear::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xfffffffe);
}

inline void tMSeries::tAI_FIFO_Clear::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAI_FIFO_Clear::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_FIFO_Clear& tMSeries::tAI_FIFO_Clear::set(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_FIFO_Clear::get(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tAI_FIFO_Clear::write(u16 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_FIFO_Clear::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAI_FIFO_Clear::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_AO_Select::tAI_AO_Select()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_AO_Select::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_AO_Select::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_AO_Select& tMSeries::tAI_AO_Select::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tAI_AO_Select::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_AO_Select::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tAI_AO_Select::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tAI_AO_Select::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_AO_Select& tMSeries::tAI_AO_Select::setAI_DMA_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xf0)) | (((u8)fieldValue << 0x0) & ~0xf0);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tAI_AO_Select::getAI_DMA_Select(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xf0) >> 0x0);
}

inline void tMSeries::tAI_AO_Select::writeAI_DMA_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   setAI_DMA_Select(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tAI_AO_Select::readAI_DMA_Select(nMDBG::tStatus2* s)
{
   return getAI_DMA_Select(s);
}

inline tMSeries::tAI_AO_Select& tMSeries::tAI_AO_Select::setAO_DMA_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xf)) | (((u8)fieldValue << 0x4) & ~0xf);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tAI_AO_Select::getAO_DMA_Select(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xf) >> 0x4);
}

inline void tMSeries::tAI_AO_Select::writeAO_DMA_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   setAO_DMA_Select(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tAI_AO_Select::readAO_DMA_Select(nMDBG::tStatus2* s)
{
   return getAO_DMA_Select(s);
}

inline void tMSeries::tAI_AO_Select::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_Config_FIFO_Data::tAI_Config_FIFO_Data()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_Config_FIFO_Data::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_Config_FIFO_Data::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_Config_FIFO_Data& tMSeries::tAI_Config_FIFO_Data::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAI_Config_FIFO_Data::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_Config_FIFO_Data::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tAI_Config_FIFO_Data::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAI_Config_FIFO_Data::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_Config_FIFO_Data& tMSeries::tAI_Config_FIFO_Data::setAI_Config_Channel(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff0)) | (((u16)fieldValue << 0x0) & ~0xfff0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Config_FIFO_Data::getAI_Config_Channel(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff0) >> 0x0);
}

inline void tMSeries::tAI_Config_FIFO_Data::writeAI_Config_Channel(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Config_Channel(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Config_FIFO_Data::readAI_Config_Channel(nMDBG::tStatus2* s)
{
   return getAI_Config_Channel(s);
}

inline tMSeries::tAI_Config_FIFO_Data& tMSeries::tAI_Config_FIFO_Data::setAI_Config_Bank(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffcf)) | (((u16)fieldValue << 0x4) & ~0xffcf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Config_FIFO_Data::getAI_Config_Bank(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xffcf) >> 0x4);
}

inline void tMSeries::tAI_Config_FIFO_Data::writeAI_Config_Bank(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Config_Bank(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Config_FIFO_Data::readAI_Config_Bank(nMDBG::tStatus2* s)
{
   return getAI_Config_Bank(s);
}

inline tMSeries::tAI_Config_FIFO_Data& tMSeries::tAI_Config_FIFO_Data::setAI_Config_Channel_Type(tAI_Config_Channel_Type fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfe3f)) | (((u16)fieldValue << 0x6) & ~0xfe3f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Config_FIFO_Data::tAI_Config_Channel_Type tMSeries::tAI_Config_FIFO_Data::getAI_Config_Channel_Type(nMDBG::tStatus2*) const
{
   return (tAI_Config_Channel_Type)((_softCopy & ~0xfe3f) >> 0x6);
}

inline void tMSeries::tAI_Config_FIFO_Data::writeAI_Config_Channel_Type(tAI_Config_Channel_Type fieldValue, nMDBG::tStatus2* s)
{
   setAI_Config_Channel_Type(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Config_FIFO_Data::tAI_Config_Channel_Type tMSeries::tAI_Config_FIFO_Data::readAI_Config_Channel_Type(nMDBG::tStatus2* s)
{
   return getAI_Config_Channel_Type(s);
}

inline tMSeries::tAI_Config_FIFO_Data& tMSeries::tAI_Config_FIFO_Data::setAI_Config_Gain(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf1ff)) | (((u16)fieldValue << 0x9) & ~0xf1ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAI_Config_FIFO_Data::getAI_Config_Gain(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf1ff) >> 0x9);
}

inline void tMSeries::tAI_Config_FIFO_Data::writeAI_Config_Gain(u16 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Config_Gain(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAI_Config_FIFO_Data::readAI_Config_Gain(nMDBG::tStatus2* s)
{
   return getAI_Config_Gain(s);
}

inline tMSeries::tAI_Config_FIFO_Data& tMSeries::tAI_Config_FIFO_Data::setAI_Config_Polarity(tAI_Config_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAI_Config_FIFO_Data::tAI_Config_Polarity tMSeries::tAI_Config_FIFO_Data::getAI_Config_Polarity(nMDBG::tStatus2*) const
{
   return (tAI_Config_Polarity)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tAI_Config_FIFO_Data::writeAI_Config_Polarity(tAI_Config_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAI_Config_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAI_Config_FIFO_Data::tAI_Config_Polarity tMSeries::tAI_Config_FIFO_Data::readAI_Config_Polarity(nMDBG::tStatus2* s)
{
   return getAI_Config_Polarity(s);
}

inline tMSeries::tAI_Config_FIFO_Data& tMSeries::tAI_Config_FIFO_Data::setAI_Config_Dither(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xdfff)) | (((u16)fieldValue << 0xd) & ~0xdfff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Config_FIFO_Data::getAI_Config_Dither(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tMSeries::tAI_Config_FIFO_Data::writeAI_Config_Dither(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_Config_Dither(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Config_FIFO_Data::readAI_Config_Dither(nMDBG::tStatus2* s)
{
   return getAI_Config_Dither(s);
}

inline tMSeries::tAI_Config_FIFO_Data& tMSeries::tAI_Config_FIFO_Data::setAI_Config_Last_Channel(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xbfff)) | (((u16)fieldValue << 0xe) & ~0xbfff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Config_FIFO_Data::getAI_Config_Last_Channel(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tMSeries::tAI_Config_FIFO_Data::writeAI_Config_Last_Channel(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_Config_Last_Channel(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Config_FIFO_Data::readAI_Config_Last_Channel(nMDBG::tStatus2* s)
{
   return getAI_Config_Last_Channel(s);
}

inline void tMSeries::tAI_Config_FIFO_Data::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tConfiguration_Memory_Clear::tConfiguration_Memory_Clear()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tConfiguration_Memory_Clear::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tConfiguration_Memory_Clear::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tConfiguration_Memory_Clear& tMSeries::tConfiguration_Memory_Clear::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tConfiguration_Memory_Clear::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tConfiguration_Memory_Clear::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xfffffffe);
}

inline void tMSeries::tConfiguration_Memory_Clear::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tConfiguration_Memory_Clear::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tConfiguration_Memory_Clear& tMSeries::tConfiguration_Memory_Clear::set(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tConfiguration_Memory_Clear::get(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tConfiguration_Memory_Clear::write(u16 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tConfiguration_Memory_Clear::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tConfiguration_Memory_Clear::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_FIFO_Data::tAO_FIFO_Data()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_FIFO_Data::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_FIFO_Data::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_FIFO_Data& tMSeries::tAO_FIFO_Data::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAO_FIFO_Data::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_FIFO_Data::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0x0);
}

inline void tMSeries::tAO_FIFO_Data::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAO_FIFO_Data::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_FIFO_Data& tMSeries::tAO_FIFO_Data::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAO_FIFO_Data::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tAO_FIFO_Data::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAO_FIFO_Data::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAO_FIFO_Data::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_FIFO_Clear::tAO_FIFO_Clear()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_FIFO_Clear::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_FIFO_Clear::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_FIFO_Clear& tMSeries::tAO_FIFO_Clear::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tAO_FIFO_Clear::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_FIFO_Clear::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xfffffffe);
}

inline void tMSeries::tAO_FIFO_Clear::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tAO_FIFO_Clear::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_FIFO_Clear& tMSeries::tAO_FIFO_Clear::set(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tAO_FIFO_Clear::get(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tMSeries::tAO_FIFO_Clear::write(u16 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tAO_FIFO_Clear::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAO_FIFO_Clear::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tG0_G1_Select::tG0_G1_Select()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tG0_G1_Select::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tG0_G1_Select::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tG0_G1_Select& tMSeries::tG0_G1_Select::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tG0_G1_Select::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tG0_G1_Select::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tG0_G1_Select::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tG0_G1_Select::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tG0_G1_Select& tMSeries::tG0_G1_Select::setG0_DMA_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xf0)) | (((u8)fieldValue << 0x0) & ~0xf0);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tG0_G1_Select::getG0_DMA_Select(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xf0) >> 0x0);
}

inline void tMSeries::tG0_G1_Select::writeG0_DMA_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   setG0_DMA_Select(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tG0_G1_Select::readG0_DMA_Select(nMDBG::tStatus2* s)
{
   return getG0_DMA_Select(s);
}

inline tMSeries::tG0_G1_Select& tMSeries::tG0_G1_Select::setG1_DMA_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xf)) | (((u8)fieldValue << 0x4) & ~0xf);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tG0_G1_Select::getG1_DMA_Select(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xf) >> 0x4);
}

inline void tMSeries::tG0_G1_Select::writeG1_DMA_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   setG1_DMA_Select(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tG0_G1_Select::readG1_DMA_Select(nMDBG::tStatus2* s)
{
   return getG1_DMA_Select(s);
}

inline void tMSeries::tG0_G1_Select::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tMisc_Command::tMisc_Command()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tMisc_Command::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tMisc_Command::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tMisc_Command& tMSeries::tMisc_Command::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tMisc_Command::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tMisc_Command::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tMisc_Command::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tMisc_Command::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tMisc_Command& tMSeries::tMisc_Command::setIntExtTrig(tIntExtTrig fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0x7f)) | (((u8)fieldValue << 0x7) & ~0x7f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tMisc_Command::tIntExtTrig tMSeries::tMisc_Command::getIntExtTrig(nMDBG::tStatus2*) const
{
   return (tIntExtTrig)((_softCopy & ~0x7f) >> 0x7);
}

inline void tMSeries::tMisc_Command::writeIntExtTrig(tIntExtTrig fieldValue, nMDBG::tStatus2* s)
{
   setIntExtTrig(fieldValue, s);
   flush(s);
}
inline tMSeries::tMisc_Command::tIntExtTrig tMSeries::tMisc_Command::readIntExtTrig(nMDBG::tStatus2* s)
{
   return getIntExtTrig(s);
}

inline void tMSeries::tMisc_Command::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Calibration::tAO_Calibration()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAO_Calibration::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_Calibration::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_Calibration& tMSeries::tAO_Calibration::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tAO_Calibration::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Calibration::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tAO_Calibration::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tAO_Calibration::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_Calibration& tMSeries::tAO_Calibration::setAO_RefGround(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfe)) | (((u8)fieldValue << 0x0) & ~0xfe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAO_Calibration::getAO_RefGround(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfe) >> 0x0);
}

inline void tMSeries::tAO_Calibration::writeAO_RefGround(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAO_RefGround(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAO_Calibration::readAO_RefGround(nMDBG::tStatus2* s)
{
   return getAO_RefGround(s);
}

inline void tMSeries::tAO_Calibration::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tPFI_Output_Select_1::tPFI_Output_Select_1()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tPFI_Output_Select_1::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tPFI_Output_Select_1::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tPFI_Output_Select_1& tMSeries::tPFI_Output_Select_1::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tPFI_Output_Select_1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tPFI_Output_Select_1::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tPFI_Output_Select_1::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tPFI_Output_Select_1::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tPFI_Output_Select_1& tMSeries::tPFI_Output_Select_1::setPFI0_Output_Select(tPFI0_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_1::tPFI0_Output_Select tMSeries::tPFI_Output_Select_1::getPFI0_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI0_Output_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tMSeries::tPFI_Output_Select_1::writePFI0_Output_Select(tPFI0_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI0_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_1::tPFI0_Output_Select tMSeries::tPFI_Output_Select_1::readPFI0_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI0_Output_Select(s);
}

inline tMSeries::tPFI_Output_Select_1& tMSeries::tPFI_Output_Select_1::setPFI1_Output_Select(tPFI1_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfc1f)) | (((u16)fieldValue << 0x5) & ~0xfc1f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_1::tPFI1_Output_Select tMSeries::tPFI_Output_Select_1::getPFI1_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI1_Output_Select)((_softCopy & ~0xfc1f) >> 0x5);
}

inline void tMSeries::tPFI_Output_Select_1::writePFI1_Output_Select(tPFI1_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI1_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_1::tPFI1_Output_Select tMSeries::tPFI_Output_Select_1::readPFI1_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI1_Output_Select(s);
}

inline tMSeries::tPFI_Output_Select_1& tMSeries::tPFI_Output_Select_1::setPFI2_Output_Select(tPFI2_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x83ff)) | (((u16)fieldValue << 0xa) & ~0x83ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_1::tPFI2_Output_Select tMSeries::tPFI_Output_Select_1::getPFI2_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI2_Output_Select)((_softCopy & ~0x83ff) >> 0xa);
}

inline void tMSeries::tPFI_Output_Select_1::writePFI2_Output_Select(tPFI2_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI2_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_1::tPFI2_Output_Select tMSeries::tPFI_Output_Select_1::readPFI2_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI2_Output_Select(s);
}

inline void tMSeries::tPFI_Output_Select_1::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tPFI_Output_Select_2::tPFI_Output_Select_2()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tPFI_Output_Select_2::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tPFI_Output_Select_2::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tPFI_Output_Select_2& tMSeries::tPFI_Output_Select_2::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tPFI_Output_Select_2::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tPFI_Output_Select_2::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tPFI_Output_Select_2::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tPFI_Output_Select_2::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tPFI_Output_Select_2& tMSeries::tPFI_Output_Select_2::setPFI3_Output_Select(tPFI3_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_2::tPFI3_Output_Select tMSeries::tPFI_Output_Select_2::getPFI3_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI3_Output_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tMSeries::tPFI_Output_Select_2::writePFI3_Output_Select(tPFI3_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI3_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_2::tPFI3_Output_Select tMSeries::tPFI_Output_Select_2::readPFI3_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI3_Output_Select(s);
}

inline tMSeries::tPFI_Output_Select_2& tMSeries::tPFI_Output_Select_2::setPFI4_Output_Select(tPFI4_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfc1f)) | (((u16)fieldValue << 0x5) & ~0xfc1f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_2::tPFI4_Output_Select tMSeries::tPFI_Output_Select_2::getPFI4_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI4_Output_Select)((_softCopy & ~0xfc1f) >> 0x5);
}

inline void tMSeries::tPFI_Output_Select_2::writePFI4_Output_Select(tPFI4_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI4_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_2::tPFI4_Output_Select tMSeries::tPFI_Output_Select_2::readPFI4_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI4_Output_Select(s);
}

inline tMSeries::tPFI_Output_Select_2& tMSeries::tPFI_Output_Select_2::setPFI5_Output_Select(tPFI5_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x83ff)) | (((u16)fieldValue << 0xa) & ~0x83ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_2::tPFI5_Output_Select tMSeries::tPFI_Output_Select_2::getPFI5_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI5_Output_Select)((_softCopy & ~0x83ff) >> 0xa);
}

inline void tMSeries::tPFI_Output_Select_2::writePFI5_Output_Select(tPFI5_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI5_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_2::tPFI5_Output_Select tMSeries::tPFI_Output_Select_2::readPFI5_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI5_Output_Select(s);
}

inline void tMSeries::tPFI_Output_Select_2::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tPFI_Output_Select_3::tPFI_Output_Select_3()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tPFI_Output_Select_3::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tPFI_Output_Select_3::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tPFI_Output_Select_3& tMSeries::tPFI_Output_Select_3::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tPFI_Output_Select_3::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tPFI_Output_Select_3::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tPFI_Output_Select_3::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tPFI_Output_Select_3::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tPFI_Output_Select_3& tMSeries::tPFI_Output_Select_3::setPFI6_Output_Select(tPFI6_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_3::tPFI6_Output_Select tMSeries::tPFI_Output_Select_3::getPFI6_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI6_Output_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tMSeries::tPFI_Output_Select_3::writePFI6_Output_Select(tPFI6_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI6_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_3::tPFI6_Output_Select tMSeries::tPFI_Output_Select_3::readPFI6_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI6_Output_Select(s);
}

inline tMSeries::tPFI_Output_Select_3& tMSeries::tPFI_Output_Select_3::setPFI7_Output_Select(tPFI7_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfc1f)) | (((u16)fieldValue << 0x5) & ~0xfc1f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_3::tPFI7_Output_Select tMSeries::tPFI_Output_Select_3::getPFI7_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI7_Output_Select)((_softCopy & ~0xfc1f) >> 0x5);
}

inline void tMSeries::tPFI_Output_Select_3::writePFI7_Output_Select(tPFI7_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI7_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_3::tPFI7_Output_Select tMSeries::tPFI_Output_Select_3::readPFI7_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI7_Output_Select(s);
}

inline tMSeries::tPFI_Output_Select_3& tMSeries::tPFI_Output_Select_3::setPFI8_Output_Select(tPFI8_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x83ff)) | (((u16)fieldValue << 0xa) & ~0x83ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_3::tPFI8_Output_Select tMSeries::tPFI_Output_Select_3::getPFI8_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI8_Output_Select)((_softCopy & ~0x83ff) >> 0xa);
}

inline void tMSeries::tPFI_Output_Select_3::writePFI8_Output_Select(tPFI8_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI8_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_3::tPFI8_Output_Select tMSeries::tPFI_Output_Select_3::readPFI8_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI8_Output_Select(s);
}

inline void tMSeries::tPFI_Output_Select_3::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tPFI_Output_Select_4::tPFI_Output_Select_4()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tPFI_Output_Select_4::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tPFI_Output_Select_4::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tPFI_Output_Select_4& tMSeries::tPFI_Output_Select_4::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tPFI_Output_Select_4::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tPFI_Output_Select_4::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tPFI_Output_Select_4::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tPFI_Output_Select_4::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tPFI_Output_Select_4& tMSeries::tPFI_Output_Select_4::setPFI9_Output_Select(tPFI9_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_4::tPFI9_Output_Select tMSeries::tPFI_Output_Select_4::getPFI9_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI9_Output_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tMSeries::tPFI_Output_Select_4::writePFI9_Output_Select(tPFI9_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI9_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_4::tPFI9_Output_Select tMSeries::tPFI_Output_Select_4::readPFI9_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI9_Output_Select(s);
}

inline tMSeries::tPFI_Output_Select_4& tMSeries::tPFI_Output_Select_4::setPFI10_Output_Select(tPFI10_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfc1f)) | (((u16)fieldValue << 0x5) & ~0xfc1f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_4::tPFI10_Output_Select tMSeries::tPFI_Output_Select_4::getPFI10_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI10_Output_Select)((_softCopy & ~0xfc1f) >> 0x5);
}

inline void tMSeries::tPFI_Output_Select_4::writePFI10_Output_Select(tPFI10_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI10_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_4::tPFI10_Output_Select tMSeries::tPFI_Output_Select_4::readPFI10_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI10_Output_Select(s);
}

inline tMSeries::tPFI_Output_Select_4& tMSeries::tPFI_Output_Select_4::setPFI11_Output_Select(tPFI11_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x83ff)) | (((u16)fieldValue << 0xa) & ~0x83ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_4::tPFI11_Output_Select tMSeries::tPFI_Output_Select_4::getPFI11_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI11_Output_Select)((_softCopy & ~0x83ff) >> 0xa);
}

inline void tMSeries::tPFI_Output_Select_4::writePFI11_Output_Select(tPFI11_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI11_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_4::tPFI11_Output_Select tMSeries::tPFI_Output_Select_4::readPFI11_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI11_Output_Select(s);
}

inline void tMSeries::tPFI_Output_Select_4::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tPFI_Output_Select_5::tPFI_Output_Select_5()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tPFI_Output_Select_5::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tPFI_Output_Select_5::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tPFI_Output_Select_5& tMSeries::tPFI_Output_Select_5::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tPFI_Output_Select_5::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tPFI_Output_Select_5::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tPFI_Output_Select_5::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tPFI_Output_Select_5::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tPFI_Output_Select_5& tMSeries::tPFI_Output_Select_5::setPFI12_Output_Select(tPFI12_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_5::tPFI12_Output_Select tMSeries::tPFI_Output_Select_5::getPFI12_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI12_Output_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tMSeries::tPFI_Output_Select_5::writePFI12_Output_Select(tPFI12_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI12_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_5::tPFI12_Output_Select tMSeries::tPFI_Output_Select_5::readPFI12_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI12_Output_Select(s);
}

inline tMSeries::tPFI_Output_Select_5& tMSeries::tPFI_Output_Select_5::setPFI13_Output_Select(tPFI13_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfc1f)) | (((u16)fieldValue << 0x5) & ~0xfc1f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_5::tPFI13_Output_Select tMSeries::tPFI_Output_Select_5::getPFI13_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI13_Output_Select)((_softCopy & ~0xfc1f) >> 0x5);
}

inline void tMSeries::tPFI_Output_Select_5::writePFI13_Output_Select(tPFI13_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI13_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_5::tPFI13_Output_Select tMSeries::tPFI_Output_Select_5::readPFI13_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI13_Output_Select(s);
}

inline tMSeries::tPFI_Output_Select_5& tMSeries::tPFI_Output_Select_5::setPFI14_Output_Select(tPFI14_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x83ff)) | (((u16)fieldValue << 0xa) & ~0x83ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_5::tPFI14_Output_Select tMSeries::tPFI_Output_Select_5::getPFI14_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI14_Output_Select)((_softCopy & ~0x83ff) >> 0xa);
}

inline void tMSeries::tPFI_Output_Select_5::writePFI14_Output_Select(tPFI14_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI14_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_5::tPFI14_Output_Select tMSeries::tPFI_Output_Select_5::readPFI14_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI14_Output_Select(s);
}

inline void tMSeries::tPFI_Output_Select_5::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tPFI_Output_Select_6::tPFI_Output_Select_6()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tPFI_Output_Select_6::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tPFI_Output_Select_6::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tPFI_Output_Select_6& tMSeries::tPFI_Output_Select_6::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tPFI_Output_Select_6::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tPFI_Output_Select_6::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tPFI_Output_Select_6::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tPFI_Output_Select_6::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tPFI_Output_Select_6& tMSeries::tPFI_Output_Select_6::setPFI15_Output_Select(tPFI15_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Output_Select_6::tPFI15_Output_Select tMSeries::tPFI_Output_Select_6::getPFI15_Output_Select(nMDBG::tStatus2*) const
{
   return (tPFI15_Output_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tMSeries::tPFI_Output_Select_6::writePFI15_Output_Select(tPFI15_Output_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI15_Output_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Output_Select_6::tPFI15_Output_Select tMSeries::tPFI_Output_Select_6::readPFI15_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI15_Output_Select(s);
}

inline void tMSeries::tPFI_Output_Select_6::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tPFI_DI::tPFI_DI()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tPFI_DI::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tPFI_DI& tMSeries::tPFI_DI::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tPFI_DI::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tPFI_DI::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u16 tMSeries::tPFI_DI::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tPFI_DI& tMSeries::tPFI_DI::set(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x0)) | (((u16)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tPFI_DI::get(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 tMSeries::tPFI_DI::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void tMSeries::tPFI_DI::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tPFI_DO::tPFI_DO()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tPFI_DO::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tPFI_DO::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tPFI_DO& tMSeries::tPFI_DO::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tPFI_DO::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tPFI_DO::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tPFI_DO::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tPFI_DO::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tPFI_DO& tMSeries::tPFI_DO::setLowerPort(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff00)) | (((u16)fieldValue << 0x0) & ~0xff00);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tPFI_DO::getLowerPort(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff00) >> 0x0);
}

inline void tMSeries::tPFI_DO::writeLowerPort(u16 fieldValue, nMDBG::tStatus2* s)
{
   setLowerPort(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tPFI_DO::readLowerPort(nMDBG::tStatus2* s)
{
   return getLowerPort(s);
}

inline tMSeries::tPFI_DO& tMSeries::tPFI_DO::setUpperPort(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff)) | (((u16)fieldValue << 0x8) & ~0xff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tPFI_DO::getUpperPort(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff) >> 0x8);
}

inline void tMSeries::tPFI_DO::writeUpperPort(u16 fieldValue, nMDBG::tStatus2* s)
{
   setUpperPort(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tPFI_DO::readUpperPort(nMDBG::tStatus2* s)
{
   return getUpperPort(s);
}

inline void tMSeries::tPFI_DO::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tPFI_Filter::tPFI_Filter()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tPFI_Filter::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tPFI_Filter::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tPFI_Filter::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tPFI_Filter::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tPFI_Filter::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tPFI_Filter::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI0_Filter_Select(tPFI0_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffffc)) | (((u32)fieldValue << 0x0) & ~0xfffffffc);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI0_Filter_Select tMSeries::tPFI_Filter::getPFI0_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI0_Filter_Select)((_softCopy & ~0xfffffffc) >> 0x0);
}

inline void tMSeries::tPFI_Filter::writePFI0_Filter_Select(tPFI0_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI0_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI0_Filter_Select tMSeries::tPFI_Filter::readPFI0_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI0_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI1_Filter_Select(tPFI1_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffff3)) | (((u32)fieldValue << 0x2) & ~0xfffffff3);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI1_Filter_Select tMSeries::tPFI_Filter::getPFI1_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI1_Filter_Select)((_softCopy & ~0xfffffff3) >> 0x2);
}

inline void tMSeries::tPFI_Filter::writePFI1_Filter_Select(tPFI1_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI1_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI1_Filter_Select tMSeries::tPFI_Filter::readPFI1_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI1_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI2_Filter_Select(tPFI2_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffffcf)) | (((u32)fieldValue << 0x4) & ~0xffffffcf);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI2_Filter_Select tMSeries::tPFI_Filter::getPFI2_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI2_Filter_Select)((_softCopy & ~0xffffffcf) >> 0x4);
}

inline void tMSeries::tPFI_Filter::writePFI2_Filter_Select(tPFI2_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI2_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI2_Filter_Select tMSeries::tPFI_Filter::readPFI2_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI2_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI3_Filter_Select(tPFI3_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffff3f)) | (((u32)fieldValue << 0x6) & ~0xffffff3f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI3_Filter_Select tMSeries::tPFI_Filter::getPFI3_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI3_Filter_Select)((_softCopy & ~0xffffff3f) >> 0x6);
}

inline void tMSeries::tPFI_Filter::writePFI3_Filter_Select(tPFI3_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI3_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI3_Filter_Select tMSeries::tPFI_Filter::readPFI3_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI3_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI4_Filter_Select(tPFI4_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffcff)) | (((u32)fieldValue << 0x8) & ~0xfffffcff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI4_Filter_Select tMSeries::tPFI_Filter::getPFI4_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI4_Filter_Select)((_softCopy & ~0xfffffcff) >> 0x8);
}

inline void tMSeries::tPFI_Filter::writePFI4_Filter_Select(tPFI4_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI4_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI4_Filter_Select tMSeries::tPFI_Filter::readPFI4_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI4_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI5_Filter_Select(tPFI5_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffff3ff)) | (((u32)fieldValue << 0xa) & ~0xfffff3ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI5_Filter_Select tMSeries::tPFI_Filter::getPFI5_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI5_Filter_Select)((_softCopy & ~0xfffff3ff) >> 0xa);
}

inline void tMSeries::tPFI_Filter::writePFI5_Filter_Select(tPFI5_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI5_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI5_Filter_Select tMSeries::tPFI_Filter::readPFI5_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI5_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI6_Filter_Select(tPFI6_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffcfff)) | (((u32)fieldValue << 0xc) & ~0xffffcfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI6_Filter_Select tMSeries::tPFI_Filter::getPFI6_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI6_Filter_Select)((_softCopy & ~0xffffcfff) >> 0xc);
}

inline void tMSeries::tPFI_Filter::writePFI6_Filter_Select(tPFI6_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI6_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI6_Filter_Select tMSeries::tPFI_Filter::readPFI6_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI6_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI7_Filter_Select(tPFI7_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffff3fff)) | (((u32)fieldValue << 0xe) & ~0xffff3fff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI7_Filter_Select tMSeries::tPFI_Filter::getPFI7_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI7_Filter_Select)((_softCopy & ~0xffff3fff) >> 0xe);
}

inline void tMSeries::tPFI_Filter::writePFI7_Filter_Select(tPFI7_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI7_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI7_Filter_Select tMSeries::tPFI_Filter::readPFI7_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI7_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI8_Filter_Select(tPFI8_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffcffff)) | (((u32)fieldValue << 0x10) & ~0xfffcffff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI8_Filter_Select tMSeries::tPFI_Filter::getPFI8_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI8_Filter_Select)((_softCopy & ~0xfffcffff) >> 0x10);
}

inline void tMSeries::tPFI_Filter::writePFI8_Filter_Select(tPFI8_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI8_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI8_Filter_Select tMSeries::tPFI_Filter::readPFI8_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI8_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI9_Filter_Select(tPFI9_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfff3ffff)) | (((u32)fieldValue << 0x12) & ~0xfff3ffff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI9_Filter_Select tMSeries::tPFI_Filter::getPFI9_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI9_Filter_Select)((_softCopy & ~0xfff3ffff) >> 0x12);
}

inline void tMSeries::tPFI_Filter::writePFI9_Filter_Select(tPFI9_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI9_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI9_Filter_Select tMSeries::tPFI_Filter::readPFI9_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI9_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI10_Filter_Select(tPFI10_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffcfffff)) | (((u32)fieldValue << 0x14) & ~0xffcfffff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI10_Filter_Select tMSeries::tPFI_Filter::getPFI10_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI10_Filter_Select)((_softCopy & ~0xffcfffff) >> 0x14);
}

inline void tMSeries::tPFI_Filter::writePFI10_Filter_Select(tPFI10_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI10_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI10_Filter_Select tMSeries::tPFI_Filter::readPFI10_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI10_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI11_Filter_Select(tPFI11_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xff3fffff)) | (((u32)fieldValue << 0x16) & ~0xff3fffff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI11_Filter_Select tMSeries::tPFI_Filter::getPFI11_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI11_Filter_Select)((_softCopy & ~0xff3fffff) >> 0x16);
}

inline void tMSeries::tPFI_Filter::writePFI11_Filter_Select(tPFI11_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI11_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI11_Filter_Select tMSeries::tPFI_Filter::readPFI11_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI11_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI12_Filter_Select(tPFI12_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfcffffff)) | (((u32)fieldValue << 0x18) & ~0xfcffffff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI12_Filter_Select tMSeries::tPFI_Filter::getPFI12_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI12_Filter_Select)((_softCopy & ~0xfcffffff) >> 0x18);
}

inline void tMSeries::tPFI_Filter::writePFI12_Filter_Select(tPFI12_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI12_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI12_Filter_Select tMSeries::tPFI_Filter::readPFI12_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI12_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI13_Filter_Select(tPFI13_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xf3ffffff)) | (((u32)fieldValue << 0x1a) & ~0xf3ffffff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI13_Filter_Select tMSeries::tPFI_Filter::getPFI13_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI13_Filter_Select)((_softCopy & ~0xf3ffffff) >> 0x1a);
}

inline void tMSeries::tPFI_Filter::writePFI13_Filter_Select(tPFI13_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI13_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI13_Filter_Select tMSeries::tPFI_Filter::readPFI13_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI13_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI14_Filter_Select(tPFI14_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xcfffffff)) | (((u32)fieldValue << 0x1c) & ~0xcfffffff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI14_Filter_Select tMSeries::tPFI_Filter::getPFI14_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI14_Filter_Select)((_softCopy & ~0xcfffffff) >> 0x1c);
}

inline void tMSeries::tPFI_Filter::writePFI14_Filter_Select(tPFI14_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI14_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI14_Filter_Select tMSeries::tPFI_Filter::readPFI14_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI14_Filter_Select(s);
}

inline tMSeries::tPFI_Filter& tMSeries::tPFI_Filter::setPFI15_Filter_Select(tPFI15_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x3fffffff)) | (((u32)fieldValue << 0x1e) & ~0x3fffffff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPFI_Filter::tPFI15_Filter_Select tMSeries::tPFI_Filter::getPFI15_Filter_Select(nMDBG::tStatus2*) const
{
   return (tPFI15_Filter_Select)((_softCopy & ~0x3fffffff) >> 0x1e);
}

inline void tMSeries::tPFI_Filter::writePFI15_Filter_Select(tPFI15_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setPFI15_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tPFI_Filter::tPFI15_Filter_Select tMSeries::tPFI_Filter::readPFI15_Filter_Select(nMDBG::tStatus2* s)
{
   return getPFI15_Filter_Select(s);
}

inline void tMSeries::tPFI_Filter::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tRTSI_Filter::tRTSI_Filter()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tRTSI_Filter::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tRTSI_Filter::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tRTSI_Filter& tMSeries::tRTSI_Filter::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tRTSI_Filter::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tRTSI_Filter::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tRTSI_Filter::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tRTSI_Filter::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tRTSI_Filter& tMSeries::tRTSI_Filter::setRTSI0_Filter_Select(tRTSI0_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffffc)) | (((u32)fieldValue << 0x0) & ~0xfffffffc);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Filter::tRTSI0_Filter_Select tMSeries::tRTSI_Filter::getRTSI0_Filter_Select(nMDBG::tStatus2*) const
{
   return (tRTSI0_Filter_Select)((_softCopy & ~0xfffffffc) >> 0x0);
}

inline void tMSeries::tRTSI_Filter::writeRTSI0_Filter_Select(tRTSI0_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI0_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Filter::tRTSI0_Filter_Select tMSeries::tRTSI_Filter::readRTSI0_Filter_Select(nMDBG::tStatus2* s)
{
   return getRTSI0_Filter_Select(s);
}

inline tMSeries::tRTSI_Filter& tMSeries::tRTSI_Filter::setRTSI1_Filter_Select(tRTSI1_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffff3)) | (((u32)fieldValue << 0x2) & ~0xfffffff3);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Filter::tRTSI1_Filter_Select tMSeries::tRTSI_Filter::getRTSI1_Filter_Select(nMDBG::tStatus2*) const
{
   return (tRTSI1_Filter_Select)((_softCopy & ~0xfffffff3) >> 0x2);
}

inline void tMSeries::tRTSI_Filter::writeRTSI1_Filter_Select(tRTSI1_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI1_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Filter::tRTSI1_Filter_Select tMSeries::tRTSI_Filter::readRTSI1_Filter_Select(nMDBG::tStatus2* s)
{
   return getRTSI1_Filter_Select(s);
}

inline tMSeries::tRTSI_Filter& tMSeries::tRTSI_Filter::setRTSI2_Filter_Select(tRTSI2_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffffcf)) | (((u32)fieldValue << 0x4) & ~0xffffffcf);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Filter::tRTSI2_Filter_Select tMSeries::tRTSI_Filter::getRTSI2_Filter_Select(nMDBG::tStatus2*) const
{
   return (tRTSI2_Filter_Select)((_softCopy & ~0xffffffcf) >> 0x4);
}

inline void tMSeries::tRTSI_Filter::writeRTSI2_Filter_Select(tRTSI2_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI2_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Filter::tRTSI2_Filter_Select tMSeries::tRTSI_Filter::readRTSI2_Filter_Select(nMDBG::tStatus2* s)
{
   return getRTSI2_Filter_Select(s);
}

inline tMSeries::tRTSI_Filter& tMSeries::tRTSI_Filter::setRTSI3_Filter_Select(tRTSI3_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffff3f)) | (((u32)fieldValue << 0x6) & ~0xffffff3f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Filter::tRTSI3_Filter_Select tMSeries::tRTSI_Filter::getRTSI3_Filter_Select(nMDBG::tStatus2*) const
{
   return (tRTSI3_Filter_Select)((_softCopy & ~0xffffff3f) >> 0x6);
}

inline void tMSeries::tRTSI_Filter::writeRTSI3_Filter_Select(tRTSI3_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI3_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Filter::tRTSI3_Filter_Select tMSeries::tRTSI_Filter::readRTSI3_Filter_Select(nMDBG::tStatus2* s)
{
   return getRTSI3_Filter_Select(s);
}

inline tMSeries::tRTSI_Filter& tMSeries::tRTSI_Filter::setRTSI4_Filter_Select(tRTSI4_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffcff)) | (((u32)fieldValue << 0x8) & ~0xfffffcff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Filter::tRTSI4_Filter_Select tMSeries::tRTSI_Filter::getRTSI4_Filter_Select(nMDBG::tStatus2*) const
{
   return (tRTSI4_Filter_Select)((_softCopy & ~0xfffffcff) >> 0x8);
}

inline void tMSeries::tRTSI_Filter::writeRTSI4_Filter_Select(tRTSI4_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI4_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Filter::tRTSI4_Filter_Select tMSeries::tRTSI_Filter::readRTSI4_Filter_Select(nMDBG::tStatus2* s)
{
   return getRTSI4_Filter_Select(s);
}

inline tMSeries::tRTSI_Filter& tMSeries::tRTSI_Filter::setRTSI5_Filter_Select(tRTSI5_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffff3ff)) | (((u32)fieldValue << 0xa) & ~0xfffff3ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Filter::tRTSI5_Filter_Select tMSeries::tRTSI_Filter::getRTSI5_Filter_Select(nMDBG::tStatus2*) const
{
   return (tRTSI5_Filter_Select)((_softCopy & ~0xfffff3ff) >> 0xa);
}

inline void tMSeries::tRTSI_Filter::writeRTSI5_Filter_Select(tRTSI5_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI5_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Filter::tRTSI5_Filter_Select tMSeries::tRTSI_Filter::readRTSI5_Filter_Select(nMDBG::tStatus2* s)
{
   return getRTSI5_Filter_Select(s);
}

inline tMSeries::tRTSI_Filter& tMSeries::tRTSI_Filter::setRTSI6_Filter_Select(tRTSI6_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffcfff)) | (((u32)fieldValue << 0xc) & ~0xffffcfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Filter::tRTSI6_Filter_Select tMSeries::tRTSI_Filter::getRTSI6_Filter_Select(nMDBG::tStatus2*) const
{
   return (tRTSI6_Filter_Select)((_softCopy & ~0xffffcfff) >> 0xc);
}

inline void tMSeries::tRTSI_Filter::writeRTSI6_Filter_Select(tRTSI6_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI6_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Filter::tRTSI6_Filter_Select tMSeries::tRTSI_Filter::readRTSI6_Filter_Select(nMDBG::tStatus2* s)
{
   return getRTSI6_Filter_Select(s);
}

inline tMSeries::tRTSI_Filter& tMSeries::tRTSI_Filter::setRTSI7_Filter_Select(tRTSI7_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffff3fff)) | (((u32)fieldValue << 0xe) & ~0xffff3fff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tRTSI_Filter::tRTSI7_Filter_Select tMSeries::tRTSI_Filter::getRTSI7_Filter_Select(nMDBG::tStatus2*) const
{
   return (tRTSI7_Filter_Select)((_softCopy & ~0xffff3fff) >> 0xe);
}

inline void tMSeries::tRTSI_Filter::writeRTSI7_Filter_Select(tRTSI7_Filter_Select fieldValue, nMDBG::tStatus2* s)
{
   setRTSI7_Filter_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tRTSI_Filter::tRTSI7_Filter_Select tMSeries::tRTSI_Filter::readRTSI7_Filter_Select(nMDBG::tStatus2* s)
{
   return getRTSI7_Filter_Select(s);
}

inline void tMSeries::tRTSI_Filter::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tClock_And_Fout2::tClock_And_Fout2()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tClock_And_Fout2::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tClock_And_Fout2::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tClock_And_Fout2& tMSeries::tClock_And_Fout2::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tClock_And_Fout2::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tClock_And_Fout2::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tClock_And_Fout2::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tClock_And_Fout2::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tClock_And_Fout2& tMSeries::tClock_And_Fout2::setPLL_In_Source_Select(tPLL_In_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffe0)) | (((u16)fieldValue << 0x0) & ~0xffe0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tClock_And_Fout2::tPLL_In_Source_Select tMSeries::tClock_And_Fout2::getPLL_In_Source_Select(nMDBG::tStatus2*) const
{
   return (tPLL_In_Source_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tMSeries::tClock_And_Fout2::writePLL_In_Source_Select(tPLL_In_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   setPLL_In_Source_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tClock_And_Fout2::tPLL_In_Source_Select tMSeries::tClock_And_Fout2::readPLL_In_Source_Select(nMDBG::tStatus2* s)
{
   return getPLL_In_Source_Select(s);
}

inline tMSeries::tClock_And_Fout2& tMSeries::tClock_And_Fout2::setTB1_Select(tTB1_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffdf)) | (((u16)fieldValue << 0x5) & ~0xffdf);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tClock_And_Fout2::tTB1_Select tMSeries::tClock_And_Fout2::getTB1_Select(nMDBG::tStatus2*) const
{
   return (tTB1_Select)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tMSeries::tClock_And_Fout2::writeTB1_Select(tTB1_Select fieldValue, nMDBG::tStatus2* s)
{
   setTB1_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tClock_And_Fout2::tTB1_Select tMSeries::tClock_And_Fout2::readTB1_Select(nMDBG::tStatus2* s)
{
   return getTB1_Select(s);
}

inline tMSeries::tClock_And_Fout2& tMSeries::tClock_And_Fout2::setTB3_Select(tTB3_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xffbf)) | (((u16)fieldValue << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tClock_And_Fout2::tTB3_Select tMSeries::tClock_And_Fout2::getTB3_Select(nMDBG::tStatus2*) const
{
   return (tTB3_Select)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tMSeries::tClock_And_Fout2::writeTB3_Select(tTB3_Select fieldValue, nMDBG::tStatus2* s)
{
   setTB3_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tClock_And_Fout2::tTB3_Select tMSeries::tClock_And_Fout2::readTB3_Select(nMDBG::tStatus2* s)
{
   return getTB3_Select(s);
}

inline tMSeries::tClock_And_Fout2& tMSeries::tClock_And_Fout2::setRTSI_Clock_Freq(tRTSI_Clock_Freq fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff7f)) | (((u16)fieldValue << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tClock_And_Fout2::tRTSI_Clock_Freq tMSeries::tClock_And_Fout2::getRTSI_Clock_Freq(nMDBG::tStatus2*) const
{
   return (tRTSI_Clock_Freq)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tMSeries::tClock_And_Fout2::writeRTSI_Clock_Freq(tRTSI_Clock_Freq fieldValue, nMDBG::tStatus2* s)
{
   setRTSI_Clock_Freq(fieldValue, s);
   flush(s);
}
inline tMSeries::tClock_And_Fout2::tRTSI_Clock_Freq tMSeries::tClock_And_Fout2::readRTSI_Clock_Freq(nMDBG::tStatus2* s)
{
   return getRTSI_Clock_Freq(s);
}

inline void tMSeries::tClock_And_Fout2::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tPLL_Control::tPLL_Control()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tPLL_Control::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tPLL_Control::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tPLL_Control& tMSeries::tPLL_Control::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tPLL_Control::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tPLL_Control::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tPLL_Control::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tPLL_Control::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tPLL_Control& tMSeries::tPLL_Control::setPLL_Multiplier(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xff00)) | (((u16)fieldValue << 0x0) & ~0xff00);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tPLL_Control::getPLL_Multiplier(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xff00) >> 0x0);
}

inline void tMSeries::tPLL_Control::writePLL_Multiplier(u16 fieldValue, nMDBG::tStatus2* s)
{
   setPLL_Multiplier(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tPLL_Control::readPLL_Multiplier(nMDBG::tStatus2* s)
{
   return getPLL_Multiplier(s);
}

inline tMSeries::tPLL_Control& tMSeries::tPLL_Control::setPLL_Divisor(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xf0ff)) | (((u16)fieldValue << 0x8) & ~0xf0ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tPLL_Control::getPLL_Divisor(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xf0ff) >> 0x8);
}

inline void tMSeries::tPLL_Control::writePLL_Divisor(u16 fieldValue, nMDBG::tStatus2* s)
{
   setPLL_Divisor(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tPLL_Control::readPLL_Divisor(nMDBG::tStatus2* s)
{
   return getPLL_Divisor(s);
}

inline tMSeries::tPLL_Control& tMSeries::tPLL_Control::setPLL_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xefff)) | (((u16)fieldValue << 0xc) & ~0xefff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tPLL_Control::getPLL_Enable(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xefff) >> 0xc);
}

inline void tMSeries::tPLL_Control::writePLL_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setPLL_Enable(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tPLL_Control::readPLL_Enable(nMDBG::tStatus2* s)
{
   return getPLL_Enable(s);
}

inline tMSeries::tPLL_Control& tMSeries::tPLL_Control::setPLL_VCO_Mode(tPLL_VCO_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0x9fff)) | (((u16)fieldValue << 0xd) & ~0x9fff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tPLL_Control::tPLL_VCO_Mode tMSeries::tPLL_Control::getPLL_VCO_Mode(nMDBG::tStatus2*) const
{
   return (tPLL_VCO_Mode)((_softCopy & ~0x9fff) >> 0xd);
}

inline void tMSeries::tPLL_Control::writePLL_VCO_Mode(tPLL_VCO_Mode fieldValue, nMDBG::tStatus2* s)
{
   setPLL_VCO_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tPLL_Control::tPLL_VCO_Mode tMSeries::tPLL_Control::readPLL_VCO_Mode(nMDBG::tStatus2* s)
{
   return getPLL_VCO_Mode(s);
}

inline void tMSeries::tPLL_Control::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tPLL_Status::tPLL_Status()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tPLL_Status::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tPLL_Status& tMSeries::tPLL_Status::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tPLL_Status::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tPLL_Status::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u16 tMSeries::tPLL_Status::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tPLL_Status& tMSeries::tPLL_Status::setPLL_Locked(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfffe)) | (((u16)fieldValue << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tPLL_Status::getPLL_Locked(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline tBoolean tMSeries::tPLL_Status::readPLL_Locked(nMDBG::tStatus2* s)
{
   refresh(s);
   return getPLL_Locked(s);
}

inline void tMSeries::tPLL_Status::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAI_Config_FIFO_Bypass::tAI_Config_FIFO_Bypass()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tAI_Config_FIFO_Bypass::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAI_Config_FIFO_Bypass::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAI_Config_FIFO_Bypass& tMSeries::tAI_Config_FIFO_Bypass::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tAI_Config_FIFO_Bypass::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAI_Config_FIFO_Bypass::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tAI_Config_FIFO_Bypass::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tAI_Config_FIFO_Bypass::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAI_Config_FIFO_Bypass& tMSeries::tAI_Config_FIFO_Bypass::setAI_Bypass_Channel(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffff8)) | (((u32)fieldValue << 0x0) & ~0xfffffff8);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_Config_FIFO_Bypass::getAI_Bypass_Channel(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfffffff8) >> 0x0);
}

inline void tMSeries::tAI_Config_FIFO_Bypass::writeAI_Bypass_Channel(u32 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Bypass_Channel(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_Config_FIFO_Bypass::readAI_Bypass_Channel(nMDBG::tStatus2* s)
{
   return getAI_Bypass_Channel(s);
}

inline tMSeries::tAI_Config_FIFO_Bypass& tMSeries::tAI_Config_FIFO_Bypass::setAI_Bypass_Bank(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffff87)) | (((u32)fieldValue << 0x3) & ~0xffffff87);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_Config_FIFO_Bypass::getAI_Bypass_Bank(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffffff87) >> 0x3);
}

inline void tMSeries::tAI_Config_FIFO_Bypass::writeAI_Bypass_Bank(u32 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Bypass_Bank(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_Config_FIFO_Bypass::readAI_Bypass_Bank(nMDBG::tStatus2* s)
{
   return getAI_Bypass_Bank(s);
}

inline tMSeries::tAI_Config_FIFO_Bypass& tMSeries::tAI_Config_FIFO_Bypass::setAI_Bypass_Cal_Sel_Pos(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffc7f)) | (((u32)fieldValue << 0x7) & ~0xfffffc7f);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_Config_FIFO_Bypass::getAI_Bypass_Cal_Sel_Pos(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfffffc7f) >> 0x7);
}

inline void tMSeries::tAI_Config_FIFO_Bypass::writeAI_Bypass_Cal_Sel_Pos(u32 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Bypass_Cal_Sel_Pos(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_Config_FIFO_Bypass::readAI_Bypass_Cal_Sel_Pos(nMDBG::tStatus2* s)
{
   return getAI_Bypass_Cal_Sel_Pos(s);
}

inline tMSeries::tAI_Config_FIFO_Bypass& tMSeries::tAI_Config_FIFO_Bypass::setAI_Bypass_Cal_Sel_Neg(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffe3ff)) | (((u32)fieldValue << 0xa) & ~0xffffe3ff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_Config_FIFO_Bypass::getAI_Bypass_Cal_Sel_Neg(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffffe3ff) >> 0xa);
}

inline void tMSeries::tAI_Config_FIFO_Bypass::writeAI_Bypass_Cal_Sel_Neg(u32 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Bypass_Cal_Sel_Neg(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_Config_FIFO_Bypass::readAI_Bypass_Cal_Sel_Neg(nMDBG::tStatus2* s)
{
   return getAI_Bypass_Cal_Sel_Neg(s);
}

inline tMSeries::tAI_Config_FIFO_Bypass& tMSeries::tAI_Config_FIFO_Bypass::setAI_Bypass_Mode_Mux(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffff9fff)) | (((u32)fieldValue << 0xd) & ~0xffff9fff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_Config_FIFO_Bypass::getAI_Bypass_Mode_Mux(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffff9fff) >> 0xd);
}

inline void tMSeries::tAI_Config_FIFO_Bypass::writeAI_Bypass_Mode_Mux(u32 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Bypass_Mode_Mux(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_Config_FIFO_Bypass::readAI_Bypass_Mode_Mux(nMDBG::tStatus2* s)
{
   return getAI_Bypass_Mode_Mux(s);
}

inline tMSeries::tAI_Config_FIFO_Bypass& tMSeries::tAI_Config_FIFO_Bypass::setAO_Bypass_AO_Cal_Sel(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffc7fff)) | (((u32)fieldValue << 0xf) & ~0xfffc7fff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_Config_FIFO_Bypass::getAO_Bypass_AO_Cal_Sel(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfffc7fff) >> 0xf);
}

inline void tMSeries::tAI_Config_FIFO_Bypass::writeAO_Bypass_AO_Cal_Sel(u32 fieldValue, nMDBG::tStatus2* s)
{
   setAO_Bypass_AO_Cal_Sel(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_Config_FIFO_Bypass::readAO_Bypass_AO_Cal_Sel(nMDBG::tStatus2* s)
{
   return getAO_Bypass_AO_Cal_Sel(s);
}

inline tMSeries::tAI_Config_FIFO_Bypass& tMSeries::tAI_Config_FIFO_Bypass::setAI_Bypass_Gain(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffe3ffff)) | (((u32)fieldValue << 0x12) & ~0xffe3ffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_Config_FIFO_Bypass::getAI_Bypass_Gain(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffe3ffff) >> 0x12);
}

inline void tMSeries::tAI_Config_FIFO_Bypass::writeAI_Bypass_Gain(u32 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Bypass_Gain(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_Config_FIFO_Bypass::readAI_Bypass_Gain(nMDBG::tStatus2* s)
{
   return getAI_Bypass_Gain(s);
}

inline tMSeries::tAI_Config_FIFO_Bypass& tMSeries::tAI_Config_FIFO_Bypass::setAI_Bypass_Dither(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffdfffff)) | (((u32)fieldValue << 0x15) & ~0xffdfffff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Config_FIFO_Bypass::getAI_Bypass_Dither(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffdfffff) >> 0x15);
}

inline void tMSeries::tAI_Config_FIFO_Bypass::writeAI_Bypass_Dither(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_Bypass_Dither(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Config_FIFO_Bypass::readAI_Bypass_Dither(nMDBG::tStatus2* s)
{
   return getAI_Bypass_Dither(s);
}

inline tMSeries::tAI_Config_FIFO_Bypass& tMSeries::tAI_Config_FIFO_Bypass::setAI_Bypass_Polarity(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffbfffff)) | (((u32)fieldValue << 0x16) & ~0xffbfffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tAI_Config_FIFO_Bypass::getAI_Bypass_Polarity(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffbfffff) >> 0x16);
}

inline void tMSeries::tAI_Config_FIFO_Bypass::writeAI_Bypass_Polarity(u32 fieldValue, nMDBG::tStatus2* s)
{
   setAI_Bypass_Polarity(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tAI_Config_FIFO_Bypass::readAI_Bypass_Polarity(nMDBG::tStatus2* s)
{
   return getAI_Bypass_Polarity(s);
}

inline tMSeries::tAI_Config_FIFO_Bypass& tMSeries::tAI_Config_FIFO_Bypass::setAI_Bypass_Config_FIFO(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x7fffffff)) | (((u32)fieldValue << 0x1f) & ~0x7fffffff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tAI_Config_FIFO_Bypass::getAI_Bypass_Config_FIFO(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0x7fffffff) >> 0x1f);
}

inline void tMSeries::tAI_Config_FIFO_Bypass::writeAI_Bypass_Config_FIFO(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setAI_Bypass_Config_FIFO(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tAI_Config_FIFO_Bypass::readAI_Bypass_Config_FIFO(nMDBG::tStatus2* s)
{
   return getAI_Bypass_Config_FIFO(s);
}

inline void tMSeries::tAI_Config_FIFO_Bypass::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tCDI_FIFO_Data::tCDI_FIFO_Data()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tCDI_FIFO_Data::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tCDI_FIFO_Data& tMSeries::tCDI_FIFO_Data::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tCDI_FIFO_Data::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tCDI_FIFO_Data::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u32 tMSeries::tCDI_FIFO_Data::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tCDI_FIFO_Data& tMSeries::tCDI_FIFO_Data::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDI_FIFO_Data::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tMSeries::tCDI_FIFO_Data::read(nMDBG::tStatus2* s)
{
   refresh(s);
   return get(s);
}

inline void tMSeries::tCDI_FIFO_Data::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tCDO_FIFO_Data::tCDO_FIFO_Data()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tCDO_FIFO_Data::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tCDO_FIFO_Data::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tCDO_FIFO_Data& tMSeries::tCDO_FIFO_Data::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tCDO_FIFO_Data::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tCDO_FIFO_Data::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0x0);
}

inline void tMSeries::tCDO_FIFO_Data::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tCDO_FIFO_Data::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tCDO_FIFO_Data& tMSeries::tCDO_FIFO_Data::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDO_FIFO_Data::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tCDO_FIFO_Data::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDO_FIFO_Data::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tCDO_FIFO_Data::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tCDIO_Status::tCDIO_Status()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tCDIO_Status::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tCDIO_Status& tMSeries::tCDIO_Status::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tCDIO_Status::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tCDIO_Status::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u32 tMSeries::tCDIO_Status::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tCDIO_Status& tMSeries::tCDIO_Status::setCDO_FIFO_Empty_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffffe)) | (((u32)fieldValue << 0x0) & ~0xfffffffe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tCDIO_Status::getCDO_FIFO_Empty_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffffffe) >> 0x0);
}

inline tBoolean tMSeries::tCDIO_Status::readCDO_FIFO_Empty_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getCDO_FIFO_Empty_St(s);
}

inline tMSeries::tCDIO_Status& tMSeries::tCDIO_Status::setCDO_FIFO_Full_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffffd)) | (((u32)fieldValue << 0x1) & ~0xfffffffd);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tCDIO_Status::getCDO_FIFO_Full_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffffffd) >> 0x1);
}

inline tBoolean tMSeries::tCDIO_Status::readCDO_FIFO_Full_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getCDO_FIFO_Full_St(s);
}

inline tMSeries::tCDIO_Status& tMSeries::tCDIO_Status::setCDO_FIFO_Request_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffffb)) | (((u32)fieldValue << 0x2) & ~0xfffffffb);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tCDIO_Status::getCDO_FIFO_Request_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffffffb) >> 0x2);
}

inline tBoolean tMSeries::tCDIO_Status::readCDO_FIFO_Request_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getCDO_FIFO_Request_St(s);
}

inline tMSeries::tCDIO_Status& tMSeries::tCDIO_Status::setCDO_Overrun_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffff7)) | (((u32)fieldValue << 0x3) & ~0xfffffff7);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tCDIO_Status::getCDO_Overrun_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffffff7) >> 0x3);
}

inline tBoolean tMSeries::tCDIO_Status::readCDO_Overrun_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getCDO_Overrun_St(s);
}

inline tMSeries::tCDIO_Status& tMSeries::tCDIO_Status::setCDO_Underflow_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffffef)) | (((u32)fieldValue << 0x4) & ~0xffffffef);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tCDIO_Status::getCDO_Underflow_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffffffef) >> 0x4);
}

inline tBoolean tMSeries::tCDIO_Status::readCDO_Underflow_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getCDO_Underflow_St(s);
}

inline tMSeries::tCDIO_Status& tMSeries::tCDIO_Status::setCDI_FIFO_Empty_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffeffff)) | (((u32)fieldValue << 0x10) & ~0xfffeffff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tCDIO_Status::getCDI_FIFO_Empty_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffeffff) >> 0x10);
}

inline tBoolean tMSeries::tCDIO_Status::readCDI_FIFO_Empty_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getCDI_FIFO_Empty_St(s);
}

inline tMSeries::tCDIO_Status& tMSeries::tCDIO_Status::setCDI_FIFO_Full_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffdffff)) | (((u32)fieldValue << 0x11) & ~0xfffdffff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tCDIO_Status::getCDI_FIFO_Full_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffdffff) >> 0x11);
}

inline tBoolean tMSeries::tCDIO_Status::readCDI_FIFO_Full_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getCDI_FIFO_Full_St(s);
}

inline tMSeries::tCDIO_Status& tMSeries::tCDIO_Status::setCDI_FIFO_Request_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffbffff)) | (((u32)fieldValue << 0x12) & ~0xfffbffff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tCDIO_Status::getCDI_FIFO_Request_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffbffff) >> 0x12);
}

inline tBoolean tMSeries::tCDIO_Status::readCDI_FIFO_Request_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getCDI_FIFO_Request_St(s);
}

inline tMSeries::tCDIO_Status& tMSeries::tCDIO_Status::setCDI_Overrun_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfff7ffff)) | (((u32)fieldValue << 0x13) & ~0xfff7ffff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tCDIO_Status::getCDI_Overrun_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfff7ffff) >> 0x13);
}

inline tBoolean tMSeries::tCDIO_Status::readCDI_Overrun_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getCDI_Overrun_St(s);
}

inline tMSeries::tCDIO_Status& tMSeries::tCDIO_Status::setCDI_Overflow_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffefffff)) | (((u32)fieldValue << 0x14) & ~0xffefffff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tCDIO_Status::getCDI_Overflow_St(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xffefffff) >> 0x14);
}

inline tBoolean tMSeries::tCDIO_Status::readCDI_Overflow_St(nMDBG::tStatus2* s)
{
   refresh(s);
   return getCDI_Overflow_St(s);
}

inline void tMSeries::tCDIO_Status::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tCDIO_Command::tCDIO_Command()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tCDIO_Command::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tCDIO_Command::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tCDIO_Command::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffe40000);
}

inline void tMSeries::tCDIO_Command::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tCDIO_Command::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDO_Disarm(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffffe)) | (((u32)fieldValue << 0x0) & ~0xfffffffe);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDO_Disarm(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfffffffe) >> 0x0);
}

inline void tMSeries::tCDIO_Command::writeCDO_Disarm(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDO_Disarm(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDO_Disarm(nMDBG::tStatus2* s)
{
   return getCDO_Disarm(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDO_Arm(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffffd)) | (((u32)fieldValue << 0x1) & ~0xfffffffd);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDO_Arm(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfffffffd) >> 0x1);
}

inline void tMSeries::tCDIO_Command::writeCDO_Arm(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDO_Arm(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDO_Arm(nMDBG::tStatus2* s)
{
   return getCDO_Arm(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDI_Disarm(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffffb)) | (((u32)fieldValue << 0x2) & ~0xfffffffb);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDI_Disarm(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfffffffb) >> 0x2);
}

inline void tMSeries::tCDIO_Command::writeCDI_Disarm(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDI_Disarm(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDI_Disarm(nMDBG::tStatus2* s)
{
   return getCDI_Disarm(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDI_Arm(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffff7)) | (((u32)fieldValue << 0x3) & ~0xfffffff7);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDI_Arm(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfffffff7) >> 0x3);
}

inline void tMSeries::tCDIO_Command::writeCDI_Arm(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDI_Arm(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDI_Arm(nMDBG::tStatus2* s)
{
   return getCDI_Arm(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDO_Reset(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffffef)) | (((u32)fieldValue << 0x4) & ~0xffffffef);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDO_Reset(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffffffef) >> 0x4);
}

inline void tMSeries::tCDIO_Command::writeCDO_Reset(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDO_Reset(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDO_Reset(nMDBG::tStatus2* s)
{
   return getCDO_Reset(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDI_Reset(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffffdf)) | (((u32)fieldValue << 0x5) & ~0xffffffdf);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDI_Reset(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffffffdf) >> 0x5);
}

inline void tMSeries::tCDIO_Command::writeCDI_Reset(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDI_Reset(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDI_Reset(nMDBG::tStatus2* s)
{
   return getCDI_Reset(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDO_Error_Interrupt_Enable_Set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffffbf)) | (((u32)fieldValue << 0x6) & ~0xffffffbf);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDO_Error_Interrupt_Enable_Set(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffffffbf) >> 0x6);
}

inline void tMSeries::tCDIO_Command::writeCDO_Error_Interrupt_Enable_Set(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDO_Error_Interrupt_Enable_Set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDO_Error_Interrupt_Enable_Set(nMDBG::tStatus2* s)
{
   return getCDO_Error_Interrupt_Enable_Set(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDO_Error_Interrupt_Enable_Clear(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffff7f)) | (((u32)fieldValue << 0x7) & ~0xffffff7f);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDO_Error_Interrupt_Enable_Clear(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffffff7f) >> 0x7);
}

inline void tMSeries::tCDIO_Command::writeCDO_Error_Interrupt_Enable_Clear(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDO_Error_Interrupt_Enable_Clear(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDO_Error_Interrupt_Enable_Clear(nMDBG::tStatus2* s)
{
   return getCDO_Error_Interrupt_Enable_Clear(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDI_Error_Interrupt_Enable_Set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffeff)) | (((u32)fieldValue << 0x8) & ~0xfffffeff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDI_Error_Interrupt_Enable_Set(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfffffeff) >> 0x8);
}

inline void tMSeries::tCDIO_Command::writeCDI_Error_Interrupt_Enable_Set(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDI_Error_Interrupt_Enable_Set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDI_Error_Interrupt_Enable_Set(nMDBG::tStatus2* s)
{
   return getCDI_Error_Interrupt_Enable_Set(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDI_Error_Interrupt_Enable_Clear(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffdff)) | (((u32)fieldValue << 0x9) & ~0xfffffdff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDI_Error_Interrupt_Enable_Clear(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfffffdff) >> 0x9);
}

inline void tMSeries::tCDIO_Command::writeCDI_Error_Interrupt_Enable_Clear(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDI_Error_Interrupt_Enable_Clear(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDI_Error_Interrupt_Enable_Clear(nMDBG::tStatus2* s)
{
   return getCDI_Error_Interrupt_Enable_Clear(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDO_FIFO_Request_Interrupt_Enable_Set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffbff)) | (((u32)fieldValue << 0xa) & ~0xfffffbff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDO_FIFO_Request_Interrupt_Enable_Set(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfffffbff) >> 0xa);
}

inline void tMSeries::tCDIO_Command::writeCDO_FIFO_Request_Interrupt_Enable_Set(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDO_FIFO_Request_Interrupt_Enable_Set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDO_FIFO_Request_Interrupt_Enable_Set(nMDBG::tStatus2* s)
{
   return getCDO_FIFO_Request_Interrupt_Enable_Set(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDO_FIFO_Request_Interrupt_Enable_Clear(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffff7ff)) | (((u32)fieldValue << 0xb) & ~0xfffff7ff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDO_FIFO_Request_Interrupt_Enable_Clear(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfffff7ff) >> 0xb);
}

inline void tMSeries::tCDIO_Command::writeCDO_FIFO_Request_Interrupt_Enable_Clear(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDO_FIFO_Request_Interrupt_Enable_Clear(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDO_FIFO_Request_Interrupt_Enable_Clear(nMDBG::tStatus2* s)
{
   return getCDO_FIFO_Request_Interrupt_Enable_Clear(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDI_FIFO_Request_Interrupt_Enable_Set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffefff)) | (((u32)fieldValue << 0xc) & ~0xffffefff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDI_FIFO_Request_Interrupt_Enable_Set(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffffefff) >> 0xc);
}

inline void tMSeries::tCDIO_Command::writeCDI_FIFO_Request_Interrupt_Enable_Set(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDI_FIFO_Request_Interrupt_Enable_Set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDI_FIFO_Request_Interrupt_Enable_Set(nMDBG::tStatus2* s)
{
   return getCDI_FIFO_Request_Interrupt_Enable_Set(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDI_FIFO_Request_Interrupt_Enable_Clear(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffdfff)) | (((u32)fieldValue << 0xd) & ~0xffffdfff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDI_FIFO_Request_Interrupt_Enable_Clear(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffffdfff) >> 0xd);
}

inline void tMSeries::tCDIO_Command::writeCDI_FIFO_Request_Interrupt_Enable_Clear(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDI_FIFO_Request_Interrupt_Enable_Clear(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDI_FIFO_Request_Interrupt_Enable_Clear(nMDBG::tStatus2* s)
{
   return getCDI_FIFO_Request_Interrupt_Enable_Clear(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDO_Error_Interrupt_Confirm(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffbfff)) | (((u32)fieldValue << 0xe) & ~0xffffbfff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDO_Error_Interrupt_Confirm(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffffbfff) >> 0xe);
}

inline void tMSeries::tCDIO_Command::writeCDO_Error_Interrupt_Confirm(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDO_Error_Interrupt_Confirm(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDO_Error_Interrupt_Confirm(nMDBG::tStatus2* s)
{
   return getCDO_Error_Interrupt_Confirm(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDI_Error_Interrupt_Confirm(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffff7fff)) | (((u32)fieldValue << 0xf) & ~0xffff7fff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDI_Error_Interrupt_Confirm(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffff7fff) >> 0xf);
}

inline void tMSeries::tCDIO_Command::writeCDI_Error_Interrupt_Confirm(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDI_Error_Interrupt_Confirm(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDI_Error_Interrupt_Confirm(nMDBG::tStatus2* s)
{
   return getCDI_Error_Interrupt_Confirm(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDO_Empty_FIFO_Interrupt_Enable_Set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffeffff)) | (((u32)fieldValue << 0x10) & ~0xfffeffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDO_Empty_FIFO_Interrupt_Enable_Set(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfffeffff) >> 0x10);
}

inline void tMSeries::tCDIO_Command::writeCDO_Empty_FIFO_Interrupt_Enable_Set(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDO_Empty_FIFO_Interrupt_Enable_Set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDO_Empty_FIFO_Interrupt_Enable_Set(nMDBG::tStatus2* s)
{
   return getCDO_Empty_FIFO_Interrupt_Enable_Set(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDO_Empty_FIFO_Interrupt_Enable_Clear(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffdffff)) | (((u32)fieldValue << 0x11) & ~0xfffdffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDO_Empty_FIFO_Interrupt_Enable_Clear(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfffdffff) >> 0x11);
}

inline void tMSeries::tCDIO_Command::writeCDO_Empty_FIFO_Interrupt_Enable_Clear(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDO_Empty_FIFO_Interrupt_Enable_Clear(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDO_Empty_FIFO_Interrupt_Enable_Clear(nMDBG::tStatus2* s)
{
   return getCDO_Empty_FIFO_Interrupt_Enable_Clear(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDO_SW_Update(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfff7ffff)) | (((u32)fieldValue << 0x13) & ~0xfff7ffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDO_SW_Update(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xfff7ffff) >> 0x13);
}

inline void tMSeries::tCDIO_Command::writeCDO_SW_Update(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDO_SW_Update(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDO_SW_Update(nMDBG::tStatus2* s)
{
   return getCDO_SW_Update(s);
}

inline tMSeries::tCDIO_Command& tMSeries::tCDIO_Command::setCDI_SW_Sample(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffefffff)) | (((u32)fieldValue << 0x14) & ~0xffefffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDIO_Command::getCDI_SW_Sample(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffefffff) >> 0x14);
}

inline void tMSeries::tCDIO_Command::writeCDI_SW_Sample(u32 fieldValue, nMDBG::tStatus2* s)
{
   setCDI_SW_Sample(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDIO_Command::readCDI_SW_Sample(nMDBG::tStatus2* s)
{
   return getCDI_SW_Sample(s);
}

inline void tMSeries::tCDIO_Command::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tCDI_Mode::tCDI_Mode()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tCDI_Mode::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tCDI_Mode::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tCDI_Mode& tMSeries::tCDI_Mode::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tCDI_Mode::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tCDI_Mode::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tCDI_Mode::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tCDI_Mode::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tCDI_Mode& tMSeries::tCDI_Mode::setCDI_Sample_Source_Select(tCDI_Sample_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffffc0)) | (((u32)fieldValue << 0x0) & ~0xffffffc0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tCDI_Mode::tCDI_Sample_Source_Select tMSeries::tCDI_Mode::getCDI_Sample_Source_Select(nMDBG::tStatus2*) const
{
   return (tCDI_Sample_Source_Select)((_softCopy & ~0xffffffc0) >> 0x0);
}

inline void tMSeries::tCDI_Mode::writeCDI_Sample_Source_Select(tCDI_Sample_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   setCDI_Sample_Source_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tCDI_Mode::tCDI_Sample_Source_Select tMSeries::tCDI_Mode::readCDI_Sample_Source_Select(nMDBG::tStatus2* s)
{
   return getCDI_Sample_Source_Select(s);
}

inline tMSeries::tCDI_Mode& tMSeries::tCDI_Mode::setCDI_Halt_On_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffdff)) | (((u32)fieldValue << 0x9) & ~0xfffffdff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tCDI_Mode::getCDI_Halt_On_Error(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffffdff) >> 0x9);
}

inline void tMSeries::tCDI_Mode::writeCDI_Halt_On_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setCDI_Halt_On_Error(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tCDI_Mode::readCDI_Halt_On_Error(nMDBG::tStatus2* s)
{
   return getCDI_Halt_On_Error(s);
}

inline tMSeries::tCDI_Mode& tMSeries::tCDI_Mode::setCDI_Polarity(tCDI_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffbff)) | (((u32)fieldValue << 0xa) & ~0xfffffbff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tCDI_Mode::tCDI_Polarity tMSeries::tCDI_Mode::getCDI_Polarity(nMDBG::tStatus2*) const
{
   return (tCDI_Polarity)((_softCopy & ~0xfffffbff) >> 0xa);
}

inline void tMSeries::tCDI_Mode::writeCDI_Polarity(tCDI_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setCDI_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tCDI_Mode::tCDI_Polarity tMSeries::tCDI_Mode::readCDI_Polarity(nMDBG::tStatus2* s)
{
   return getCDI_Polarity(s);
}

inline tMSeries::tCDI_Mode& tMSeries::tCDI_Mode::setCDI_FIFO_Mode(tCDI_FIFO_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffff7ff)) | (((u32)fieldValue << 0xb) & ~0xfffff7ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tCDI_Mode::tCDI_FIFO_Mode tMSeries::tCDI_Mode::getCDI_FIFO_Mode(nMDBG::tStatus2*) const
{
   return (tCDI_FIFO_Mode)((_softCopy & ~0xfffff7ff) >> 0xb);
}

inline void tMSeries::tCDI_Mode::writeCDI_FIFO_Mode(tCDI_FIFO_Mode fieldValue, nMDBG::tStatus2* s)
{
   setCDI_FIFO_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tCDI_Mode::tCDI_FIFO_Mode tMSeries::tCDI_Mode::readCDI_FIFO_Mode(nMDBG::tStatus2* s)
{
   return getCDI_FIFO_Mode(s);
}

inline tMSeries::tCDI_Mode& tMSeries::tCDI_Mode::setCDI_Data_Lane(tCDI_Data_Lane fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffcfff)) | (((u32)fieldValue << 0xc) & ~0xffffcfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tCDI_Mode::tCDI_Data_Lane tMSeries::tCDI_Mode::getCDI_Data_Lane(nMDBG::tStatus2*) const
{
   return (tCDI_Data_Lane)((_softCopy & ~0xffffcfff) >> 0xc);
}

inline void tMSeries::tCDI_Mode::writeCDI_Data_Lane(tCDI_Data_Lane fieldValue, nMDBG::tStatus2* s)
{
   setCDI_Data_Lane(fieldValue, s);
   flush(s);
}
inline tMSeries::tCDI_Mode::tCDI_Data_Lane tMSeries::tCDI_Mode::readCDI_Data_Lane(nMDBG::tStatus2* s)
{
   return getCDI_Data_Lane(s);
}

inline void tMSeries::tCDI_Mode::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tCDO_Mode::tCDO_Mode()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tCDO_Mode::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tCDO_Mode::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tCDO_Mode& tMSeries::tCDO_Mode::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tCDO_Mode::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tCDO_Mode::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tCDO_Mode::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tCDO_Mode::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tCDO_Mode& tMSeries::tCDO_Mode::setCDO_Update_Source_Select(tCDO_Update_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffffc0)) | (((u32)fieldValue << 0x0) & ~0xffffffc0);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tCDO_Mode::tCDO_Update_Source_Select tMSeries::tCDO_Mode::getCDO_Update_Source_Select(nMDBG::tStatus2*) const
{
   return (tCDO_Update_Source_Select)((_softCopy & ~0xffffffc0) >> 0x0);
}

inline void tMSeries::tCDO_Mode::writeCDO_Update_Source_Select(tCDO_Update_Source_Select fieldValue, nMDBG::tStatus2* s)
{
   setCDO_Update_Source_Select(fieldValue, s);
   flush(s);
}
inline tMSeries::tCDO_Mode::tCDO_Update_Source_Select tMSeries::tCDO_Mode::readCDO_Update_Source_Select(nMDBG::tStatus2* s)
{
   return getCDO_Update_Source_Select(s);
}

inline tMSeries::tCDO_Mode& tMSeries::tCDO_Mode::setCDO_Retransmit(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffeff)) | (((u32)fieldValue << 0x8) & ~0xfffffeff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tCDO_Mode::getCDO_Retransmit(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffffeff) >> 0x8);
}

inline void tMSeries::tCDO_Mode::writeCDO_Retransmit(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setCDO_Retransmit(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tCDO_Mode::readCDO_Retransmit(nMDBG::tStatus2* s)
{
   return getCDO_Retransmit(s);
}

inline tMSeries::tCDO_Mode& tMSeries::tCDO_Mode::setCDO_Halt_On_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffdff)) | (((u32)fieldValue << 0x9) & ~0xfffffdff);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tCDO_Mode::getCDO_Halt_On_Error(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfffffdff) >> 0x9);
}

inline void tMSeries::tCDO_Mode::writeCDO_Halt_On_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   setCDO_Halt_On_Error(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tCDO_Mode::readCDO_Halt_On_Error(nMDBG::tStatus2* s)
{
   return getCDO_Halt_On_Error(s);
}

inline tMSeries::tCDO_Mode& tMSeries::tCDO_Mode::setCDO_Polarity(tCDO_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffffbff)) | (((u32)fieldValue << 0xa) & ~0xfffffbff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tCDO_Mode::tCDO_Polarity tMSeries::tCDO_Mode::getCDO_Polarity(nMDBG::tStatus2*) const
{
   return (tCDO_Polarity)((_softCopy & ~0xfffffbff) >> 0xa);
}

inline void tMSeries::tCDO_Mode::writeCDO_Polarity(tCDO_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setCDO_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tCDO_Mode::tCDO_Polarity tMSeries::tCDO_Mode::readCDO_Polarity(nMDBG::tStatus2* s)
{
   return getCDO_Polarity(s);
}

inline tMSeries::tCDO_Mode& tMSeries::tCDO_Mode::setCDO_FIFO_Mode(tCDO_FIFO_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xfffff7ff)) | (((u32)fieldValue << 0xb) & ~0xfffff7ff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tCDO_Mode::tCDO_FIFO_Mode tMSeries::tCDO_Mode::getCDO_FIFO_Mode(nMDBG::tStatus2*) const
{
   return (tCDO_FIFO_Mode)((_softCopy & ~0xfffff7ff) >> 0xb);
}

inline void tMSeries::tCDO_Mode::writeCDO_FIFO_Mode(tCDO_FIFO_Mode fieldValue, nMDBG::tStatus2* s)
{
   setCDO_FIFO_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tCDO_Mode::tCDO_FIFO_Mode tMSeries::tCDO_Mode::readCDO_FIFO_Mode(nMDBG::tStatus2* s)
{
   return getCDO_FIFO_Mode(s);
}

inline tMSeries::tCDO_Mode& tMSeries::tCDO_Mode::setCDO_Data_Lane(tCDO_Data_Lane fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffffcfff)) | (((u32)fieldValue << 0xc) & ~0xffffcfff);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tCDO_Mode::tCDO_Data_Lane tMSeries::tCDO_Mode::getCDO_Data_Lane(nMDBG::tStatus2*) const
{
   return (tCDO_Data_Lane)((_softCopy & ~0xffffcfff) >> 0xc);
}

inline void tMSeries::tCDO_Mode::writeCDO_Data_Lane(tCDO_Data_Lane fieldValue, nMDBG::tStatus2* s)
{
   setCDO_Data_Lane(fieldValue, s);
   flush(s);
}
inline tMSeries::tCDO_Mode::tCDO_Data_Lane tMSeries::tCDO_Mode::readCDO_Data_Lane(nMDBG::tStatus2* s)
{
   return getCDO_Data_Lane(s);
}

inline void tMSeries::tCDO_Mode::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tCDI_Mask_Enable::tCDI_Mask_Enable()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tCDI_Mask_Enable::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tCDI_Mask_Enable::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tCDI_Mask_Enable& tMSeries::tCDI_Mask_Enable::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tCDI_Mask_Enable::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tCDI_Mask_Enable::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tCDI_Mask_Enable::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tCDI_Mask_Enable::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tCDI_Mask_Enable& tMSeries::tCDI_Mask_Enable::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDI_Mask_Enable::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tCDI_Mask_Enable::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDI_Mask_Enable::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tCDI_Mask_Enable::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tCDO_Mask_Enable::tCDO_Mask_Enable()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tCDO_Mask_Enable::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tCDO_Mask_Enable::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tCDO_Mask_Enable& tMSeries::tCDO_Mask_Enable::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tCDO_Mask_Enable::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tCDO_Mask_Enable::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tCDO_Mask_Enable::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tCDO_Mask_Enable::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tCDO_Mask_Enable& tMSeries::tCDO_Mask_Enable::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCDO_Mask_Enable::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tCDO_Mask_Enable::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCDO_Mask_Enable::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tCDO_Mask_Enable::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tSCXI_Legacy_Compatibility::tSCXI_Legacy_Compatibility()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tSCXI_Legacy_Compatibility::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tSCXI_Legacy_Compatibility::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tSCXI_Legacy_Compatibility& tMSeries::tSCXI_Legacy_Compatibility::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tSCXI_Legacy_Compatibility::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tSCXI_Legacy_Compatibility::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tSCXI_Legacy_Compatibility::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tSCXI_Legacy_Compatibility::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tSCXI_Legacy_Compatibility& tMSeries::tSCXI_Legacy_Compatibility::setSCXI_Force_AI_EXTMUX_CLK_Width(tSCXI_Force_AI_EXTMUX_CLK_Width fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfe)) | (((u8)fieldValue << 0x0) & ~0xfe);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tSCXI_Legacy_Compatibility::tSCXI_Force_AI_EXTMUX_CLK_Width tMSeries::tSCXI_Legacy_Compatibility::getSCXI_Force_AI_EXTMUX_CLK_Width(nMDBG::tStatus2*) const
{
   return (tSCXI_Force_AI_EXTMUX_CLK_Width)((_softCopy & ~0xfe) >> 0x0);
}

inline void tMSeries::tSCXI_Legacy_Compatibility::writeSCXI_Force_AI_EXTMUX_CLK_Width(tSCXI_Force_AI_EXTMUX_CLK_Width fieldValue, nMDBG::tStatus2* s)
{
   setSCXI_Force_AI_EXTMUX_CLK_Width(fieldValue, s);
   flush(s);
}
inline tMSeries::tSCXI_Legacy_Compatibility::tSCXI_Force_AI_EXTMUX_CLK_Width tMSeries::tSCXI_Legacy_Compatibility::readSCXI_Force_AI_EXTMUX_CLK_Width(nMDBG::tStatus2* s)
{
   return getSCXI_Force_AI_EXTMUX_CLK_Width(s);
}

inline void tMSeries::tSCXI_Legacy_Compatibility::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tDIO_Reserved_0::tDIO_Reserved_0()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tDIO_Reserved_0::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tDIO_Reserved_0::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tDIO_Reserved_0& tMSeries::tDIO_Reserved_0::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_0::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tDIO_Reserved_0::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tDIO_Reserved_0::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tDIO_Reserved_0::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tDIO_Reserved_0& tMSeries::tDIO_Reserved_0::setValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_0::getValue(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tDIO_Reserved_0::writeValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   setValue(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tDIO_Reserved_0::readValue(nMDBG::tStatus2* s)
{
   return getValue(s);
}

inline void tMSeries::tDIO_Reserved_0::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tDIO_Reserved_1::tDIO_Reserved_1()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tDIO_Reserved_1::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tDIO_Reserved_1::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tDIO_Reserved_1& tMSeries::tDIO_Reserved_1::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tDIO_Reserved_1::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tDIO_Reserved_1::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tDIO_Reserved_1::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tDIO_Reserved_1& tMSeries::tDIO_Reserved_1::setValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_1::getValue(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tDIO_Reserved_1::writeValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   setValue(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tDIO_Reserved_1::readValue(nMDBG::tStatus2* s)
{
   return getValue(s);
}

inline void tMSeries::tDIO_Reserved_1::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tDIO_Reserved_2::tDIO_Reserved_2()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tDIO_Reserved_2::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tDIO_Reserved_2& tMSeries::tDIO_Reserved_2::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_2::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tDIO_Reserved_2::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u32 tMSeries::tDIO_Reserved_2::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tDIO_Reserved_2& tMSeries::tDIO_Reserved_2::setValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_2::getValue(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tMSeries::tDIO_Reserved_2::readValue(nMDBG::tStatus2* s)
{
   refresh(s);
   return getValue(s);
}

inline void tMSeries::tDIO_Reserved_2::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tDIO_Reserved_3::tDIO_Reserved_3()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tDIO_Reserved_3::registerMap(void)
{
   return _MSeries;
}

inline tMSeries::tDIO_Reserved_3& tMSeries::tDIO_Reserved_3::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_3::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tDIO_Reserved_3::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u32 tMSeries::tDIO_Reserved_3::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tDIO_Reserved_3& tMSeries::tDIO_Reserved_3::setValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_3::getValue(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline u32 tMSeries::tDIO_Reserved_3::readValue(nMDBG::tStatus2* s)
{
   refresh(s);
   return getValue(s);
}

inline void tMSeries::tDIO_Reserved_3::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tDIO_Reserved_4::tDIO_Reserved_4()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tDIO_Reserved_4::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tDIO_Reserved_4::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tDIO_Reserved_4& tMSeries::tDIO_Reserved_4::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_4::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tDIO_Reserved_4::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tDIO_Reserved_4::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tDIO_Reserved_4::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tDIO_Reserved_4& tMSeries::tDIO_Reserved_4::setValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_4::getValue(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tDIO_Reserved_4::writeValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   setValue(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tDIO_Reserved_4::readValue(nMDBG::tStatus2* s)
{
   return getValue(s);
}

inline void tMSeries::tDIO_Reserved_4::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tDIO_Reserved_5::tDIO_Reserved_5()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tDIO_Reserved_5::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tDIO_Reserved_5::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tDIO_Reserved_5& tMSeries::tDIO_Reserved_5::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_5::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tDIO_Reserved_5::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tDIO_Reserved_5::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tDIO_Reserved_5::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tDIO_Reserved_5& tMSeries::tDIO_Reserved_5::setValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_5::getValue(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tDIO_Reserved_5::writeValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   setValue(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tDIO_Reserved_5::readValue(nMDBG::tStatus2* s)
{
   return getValue(s);
}

inline void tMSeries::tDIO_Reserved_5::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tDIO_Reserved_6::tDIO_Reserved_6()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tDIO_Reserved_6::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tDIO_Reserved_6::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tDIO_Reserved_6& tMSeries::tDIO_Reserved_6::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_6::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tDIO_Reserved_6::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tDIO_Reserved_6::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tDIO_Reserved_6::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tDIO_Reserved_6& tMSeries::tDIO_Reserved_6::setValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_6::getValue(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tDIO_Reserved_6::writeValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   setValue(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tDIO_Reserved_6::readValue(nMDBG::tStatus2* s)
{
   return getValue(s);
}

inline void tMSeries::tDIO_Reserved_6::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tDIO_Reserved_7::tDIO_Reserved_7()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tDIO_Reserved_7::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tDIO_Reserved_7::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tDIO_Reserved_7& tMSeries::tDIO_Reserved_7::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_7::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tDIO_Reserved_7::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tDIO_Reserved_7::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tDIO_Reserved_7::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tDIO_Reserved_7& tMSeries::tDIO_Reserved_7::setValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tDIO_Reserved_7::getValue(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tDIO_Reserved_7::writeValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   setValue(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tDIO_Reserved_7::readValue(nMDBG::tStatus2* s)
{
   return getValue(s);
}

inline void tMSeries::tDIO_Reserved_7::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tLB_Reserved_0::tLB_Reserved_0()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tLB_Reserved_0::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tLB_Reserved_0::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tLB_Reserved_0& tMSeries::tLB_Reserved_0::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tLB_Reserved_0::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tLB_Reserved_0::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tLB_Reserved_0::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tLB_Reserved_0::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tLB_Reserved_0& tMSeries::tLB_Reserved_0::setValue0(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfff8)) | (((u16)fieldValue << 0x0) & ~0xfff8);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tLB_Reserved_0::getValue0(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfff8) >> 0x0);
}

inline void tMSeries::tLB_Reserved_0::writeValue0(u16 fieldValue, nMDBG::tStatus2* s)
{
   setValue0(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tLB_Reserved_0::readValue0(nMDBG::tStatus2* s)
{
   return getValue0(s);
}

inline tMSeries::tLB_Reserved_0& tMSeries::tLB_Reserved_0::setValue1(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xe0ff)) | (((u16)fieldValue << 0x8) & ~0xe0ff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tLB_Reserved_0::getValue1(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xe0ff) >> 0x8);
}

inline void tMSeries::tLB_Reserved_0::writeValue1(u16 fieldValue, nMDBG::tStatus2* s)
{
   setValue1(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tLB_Reserved_0::readValue1(nMDBG::tStatus2* s)
{
   return getValue1(s);
}

inline void tMSeries::tLB_Reserved_0::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tLB_Reserved_1::tLB_Reserved_1()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tLB_Reserved_1::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tLB_Reserved_1::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tLB_Reserved_1& tMSeries::tLB_Reserved_1::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tLB_Reserved_1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tLB_Reserved_1::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tLB_Reserved_1::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline void tMSeries::tLB_Reserved_1::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), s);
}

inline u32 tMSeries::tLB_Reserved_1::readRegister(nMDBG::tStatus2* s) 
{
   refresh(s);
   return _softCopy;
}

inline tMSeries::tLB_Reserved_1& tMSeries::tLB_Reserved_1::setValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tLB_Reserved_1::getValue(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tLB_Reserved_1::writeValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   setValue(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tLB_Reserved_1::readValue(nMDBG::tStatus2* s)
{
   refresh(s);
   return getValue(s);
}

inline void tMSeries::tLB_Reserved_1::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Waveform_Order::tAO_Waveform_Order(u32 offset, u32 id)
 : kOffset(offset),
   kId(id)
{
   _softCopy = 0;
}

inline tMSeries::tAO_Waveform_Order::tAO_Waveform_Order()
 : kOffset(~0),
   kId(~0)
{
   _softCopy = 0;
}

inline void tMSeries::tAO_Waveform_Order::initialize(u32 offset, u32 id)
{
   u32* mutableOffset = const_cast<u32*>(&this->kOffset);
   u32* mutableId     = const_cast<u32*>(&this->kId);
   *mutableOffset = offset;
   *mutableId = id;
}

inline tMSeries* tMSeries::tAO_Waveform_Order::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_Waveform_Order::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_Waveform_Order& tMSeries::tAO_Waveform_Order::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tAO_Waveform_Order::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Waveform_Order::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tAO_Waveform_Order::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tAO_Waveform_Order::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_Waveform_Order& tMSeries::tAO_Waveform_Order::set(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xf0)) | (((u8)fieldValue << 0x0) & ~0xf0);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tAO_Waveform_Order::get(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xf0) >> 0x0);
}

inline void tMSeries::tAO_Waveform_Order::write(u8 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tAO_Waveform_Order::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tAO_Waveform_Order::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tAO_Config_Bank::tAO_Config_Bank(u32 offset, u32 id)
 : kOffset(offset),
   kId(id)
{
   _softCopy = 0;
}

inline tMSeries::tAO_Config_Bank::tAO_Config_Bank()
 : kOffset(~0),
   kId(~0)
{
   _softCopy = 0;
}

inline void tMSeries::tAO_Config_Bank::initialize(u32 offset, u32 id)
{
   u32* mutableOffset = const_cast<u32*>(&this->kOffset);
   u32* mutableId     = const_cast<u32*>(&this->kId);
   *mutableOffset = offset;
   *mutableId = id;
}

inline tMSeries* tMSeries::tAO_Config_Bank::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tAO_Config_Bank::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tAO_Config_Bank& tMSeries::tAO_Config_Bank::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tAO_Config_Bank::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tAO_Config_Bank::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tAO_Config_Bank::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tAO_Config_Bank::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tAO_Config_Bank& tMSeries::tAO_Config_Bank::setAO_DAC_Offset_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xf8)) | (((u8)fieldValue << 0x0) & ~0xf8);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tAO_Config_Bank::getAO_DAC_Offset_Select(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xf8) >> 0x0);
}

inline void tMSeries::tAO_Config_Bank::writeAO_DAC_Offset_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   setAO_DAC_Offset_Select(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tAO_Config_Bank::readAO_DAC_Offset_Select(nMDBG::tStatus2* s)
{
   return getAO_DAC_Offset_Select(s);
}

inline tMSeries::tAO_Config_Bank& tMSeries::tAO_Config_Bank::setAO_DAC_Reference_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xc7)) | (((u8)fieldValue << 0x3) & ~0xc7);
   setRegister(newValue, s);
   return *this;
}

inline u8 tMSeries::tAO_Config_Bank::getAO_DAC_Reference_Select(nMDBG::tStatus2*) const
{
   return (u8)((_softCopy & ~0xc7) >> 0x3);
}

inline void tMSeries::tAO_Config_Bank::writeAO_DAC_Reference_Select(u8 fieldValue, nMDBG::tStatus2* s)
{
   setAO_DAC_Reference_Select(fieldValue, s);
   flush(s);
}
inline u8 tMSeries::tAO_Config_Bank::readAO_DAC_Reference_Select(nMDBG::tStatus2* s)
{
   return getAO_DAC_Reference_Select(s);
}

inline tMSeries::tAO_Config_Bank& tMSeries::tAO_Config_Bank::setAO_Update_Mode(tAO_Update_Mode fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xbf)) | (((u8)fieldValue << 0x6) & ~0xbf);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Config_Bank::tAO_Update_Mode tMSeries::tAO_Config_Bank::getAO_Update_Mode(nMDBG::tStatus2*) const
{
   return (tAO_Update_Mode)((_softCopy & ~0xbf) >> 0x6);
}

inline void tMSeries::tAO_Config_Bank::writeAO_Update_Mode(tAO_Update_Mode fieldValue, nMDBG::tStatus2* s)
{
   setAO_Update_Mode(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Config_Bank::tAO_Update_Mode tMSeries::tAO_Config_Bank::readAO_Update_Mode(nMDBG::tStatus2* s)
{
   return getAO_Update_Mode(s);
}

inline tMSeries::tAO_Config_Bank& tMSeries::tAO_Config_Bank::setAO_DAC_Polarity(tAO_DAC_Polarity fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0x7f)) | (((u8)fieldValue << 0x7) & ~0x7f);
   setRegister(newValue, s);
   return *this;
}

inline tMSeries::tAO_Config_Bank::tAO_DAC_Polarity tMSeries::tAO_Config_Bank::getAO_DAC_Polarity(nMDBG::tStatus2*) const
{
   return (tAO_DAC_Polarity)((_softCopy & ~0x7f) >> 0x7);
}

inline void tMSeries::tAO_Config_Bank::writeAO_DAC_Polarity(tAO_DAC_Polarity fieldValue, nMDBG::tStatus2* s)
{
   setAO_DAC_Polarity(fieldValue, s);
   flush(s);
}
inline tMSeries::tAO_Config_Bank::tAO_DAC_Polarity tMSeries::tAO_Config_Bank::readAO_DAC_Polarity(nMDBG::tStatus2* s)
{
   return getAO_DAC_Polarity(s);
}

inline void tMSeries::tAO_Config_Bank::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tDAC_Direct_Data::tDAC_Direct_Data(u32 offset, u32 id)
 : kOffset(offset),
   kId(id)
{
   _softCopy = 0;
}

inline tMSeries::tDAC_Direct_Data::tDAC_Direct_Data()
 : kOffset(~0),
   kId(~0)
{
   _softCopy = 0;
}

inline void tMSeries::tDAC_Direct_Data::initialize(u32 offset, u32 id)
{
   u32* mutableOffset = const_cast<u32*>(&this->kOffset);
   u32* mutableId     = const_cast<u32*>(&this->kId);
   *mutableOffset = offset;
   *mutableId = id;
}

inline tMSeries* tMSeries::tDAC_Direct_Data::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tDAC_Direct_Data::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tDAC_Direct_Data& tMSeries::tDAC_Direct_Data::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tDAC_Direct_Data::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tDAC_Direct_Data::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0x0);
}

inline void tMSeries::tDAC_Direct_Data::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tDAC_Direct_Data::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tDAC_Direct_Data& tMSeries::tDAC_Direct_Data::set(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0x0)) | (((u32)fieldValue << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tDAC_Direct_Data::get(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0x0) >> 0x0);
}

inline void tMSeries::tDAC_Direct_Data::write(u32 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tDAC_Direct_Data::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tDAC_Direct_Data::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tCal_PWM::tCal_PWM()
{
   _softCopy = 0;
}

inline tMSeries* tMSeries::tCal_PWM::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tCal_PWM::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tCal_PWM& tMSeries::tCal_PWM::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tMSeries::tCal_PWM::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tCal_PWM::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u32)(0xffffffff);
}

inline void tMSeries::tCal_PWM::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u32 tMSeries::tCal_PWM::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tCal_PWM& tMSeries::tCal_PWM::setLow_Time(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffff0000)) | (((u32)fieldValue << 0x0) & ~0xffff0000);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCal_PWM::getLow_Time(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffff0000) >> 0x0);
}

inline void tMSeries::tCal_PWM::writeLow_Time(u32 fieldValue, nMDBG::tStatus2* s)
{
   setLow_Time(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCal_PWM::readLow_Time(nMDBG::tStatus2* s)
{
   return getLow_Time(s);
}

inline tMSeries::tCal_PWM& tMSeries::tCal_PWM::setHigh_Time(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = ((u32)(_softCopy & 0xffff)) | (((u32)fieldValue << 0x10) & ~0xffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tMSeries::tCal_PWM::getHigh_Time(nMDBG::tStatus2*) const
{
   return (u32)((_softCopy & ~0xffff) >> 0x10);
}

inline void tMSeries::tCal_PWM::writeHigh_Time(u32 fieldValue, nMDBG::tStatus2* s)
{
   setHigh_Time(fieldValue, s);
   flush(s);
}
inline u32 tMSeries::tCal_PWM::readHigh_Time(nMDBG::tStatus2* s)
{
   return getHigh_Time(s);
}

inline void tMSeries::tCal_PWM::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tGen_PWM::tGen_PWM(u32 offset, u32 id)
 : kOffset(offset),
   kId(id)
{
   _softCopy = 0;
}

inline tMSeries::tGen_PWM::tGen_PWM()
 : kOffset(~0),
   kId(~0)
{
   _softCopy = 0;
}

inline void tMSeries::tGen_PWM::initialize(u32 offset, u32 id)
{
   u32* mutableOffset = const_cast<u32*>(&this->kOffset);
   u32* mutableId     = const_cast<u32*>(&this->kId);
   *mutableOffset = offset;
   *mutableId = id;
}

inline tMSeries* tMSeries::tGen_PWM::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tGen_PWM::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tGen_PWM& tMSeries::tGen_PWM::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tMSeries::tGen_PWM::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tGen_PWM::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u16)(0xffffffff);
}

inline void tMSeries::tGen_PWM::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u16 tMSeries::tGen_PWM::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tGen_PWM& tMSeries::tGen_PWM::set(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = ((u16)(_softCopy & 0xfc00)) | (((u16)fieldValue << 0x0) & ~0xfc00);
   setRegister(newValue, s);
   return *this;
}

inline u16 tMSeries::tGen_PWM::get(nMDBG::tStatus2*) const
{
   return (u16)((_softCopy & ~0xfc00) >> 0x0);
}

inline void tMSeries::tGen_PWM::write(u16 fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline u16 tMSeries::tGen_PWM::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tGen_PWM::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

inline tMSeries::tStatic_AI_Control::tStatic_AI_Control(u32 offset, u32 id)
 : kOffset(offset),
   kId(id)
{
   _softCopy = 0;
}

inline tMSeries::tStatic_AI_Control::tStatic_AI_Control()
 : kOffset(~0),
   kId(~0)
{
   _softCopy = 0;
}

inline void tMSeries::tStatic_AI_Control::initialize(u32 offset, u32 id)
{
   u32* mutableOffset = const_cast<u32*>(&this->kOffset);
   u32* mutableId     = const_cast<u32*>(&this->kId);
   *mutableOffset = offset;
   *mutableId = id;
}

inline tMSeries* tMSeries::tStatic_AI_Control::registerMap(void)
{
   return _MSeries;
}

inline void tMSeries::tStatic_AI_Control::flushBus(nMDBG::tStatus2* s)
{
   _MSeries->flushBus(s);
}

inline tMSeries::tStatic_AI_Control& tMSeries::tStatic_AI_Control::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u8 tMSeries::tStatic_AI_Control::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tMSeries::tStatic_AI_Control::flush(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_MSeries->getBusSpaceReference(), kOffset + _MSeries->getAddressOffset(s), _softCopy, s);
   _softCopy &= (u8)(0xffffffff);
}

inline void tMSeries::tStatic_AI_Control::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _softCopy = fieldValue;
   flush(s);
}

inline u8 tMSeries::tStatic_AI_Control::readRegister(nMDBG::tStatus2*) 
{
   return _softCopy;
}


inline tMSeries::tStatic_AI_Control& tMSeries::tStatic_AI_Control::set(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = ((u8)(_softCopy & 0xfe)) | (((u8)fieldValue << 0x0) & ~0xfe);
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tMSeries::tStatic_AI_Control::get(nMDBG::tStatus2*) const
{
   return (tBoolean)((_softCopy & ~0xfe) >> 0x0);
}

inline void tMSeries::tStatic_AI_Control::write(tBoolean fieldValue, nMDBG::tStatus2* s)
{
   set(fieldValue, s);
   flush(s);
}
inline tBoolean tMSeries::tStatic_AI_Control::read(nMDBG::tStatus2* s)
{
   return get(s);
}

inline void tMSeries::tStatic_AI_Control::setRegisterMap(tMSeries* pMSeries)
{
   _MSeries = pMSeries;
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

