/****************************************************************************
** Form implementation generated from reading ui file 'CP_main_windowUI.ui'
**
** Created: Wed Sep 26 15:47:51 2012
**
** WARNING! All changes made in this file will be lost!
****************************************************************************/

#include "CP_main_windowUI.h"

#include <qvariant.h>
#include <qpushbutton.h>
#include <qbuttongroup.h>
#include <qframe.h>
#include <qlineedit.h>
#include <qgroupbox.h>
#include <qspinbox.h>
#include <qlabel.h>
#include <qcheckbox.h>
#include <qlayout.h>
#include <qtooltip.h>
#include <qwhatsthis.h>
#include <qimage.h>
#include <qpixmap.h>

static const unsigned char image0_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x01,
    0x22, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xc5, 0xd3, 0x3b, 0x4e, 0xc3,
    0x40, 0x10, 0x06, 0xe0, 0x7f, 0xd9, 0x4d, 0xb0, 0x63, 0x21, 0x51, 0xd1,
    0xe4, 0x18, 0xbe, 0x00, 0x15, 0x5c, 0x01, 0x4a, 0xaa, 0x9c, 0x87, 0x06,
    0x09, 0x1a, 0x4e, 0xc0, 0x19, 0xc8, 0x05, 0x7c, 0x0b, 0x94, 0x97, 0x1f,
    0xeb, 0xd8, 0x64, 0xd7, 0xfb, 0x88, 0x96, 0x26, 0x58, 0x5e, 0x62, 0x2b,
    0x45, 0x0a, 0xa6, 0x9b, 0x4f, 0x9a, 0x5f, 0xa3, 0x1d, 0x2d, 0x71, 0xce,
    0xe1, 0x9c, 0xba, 0x38, 0x6b, 0x1a, 0x00, 0xeb, 0x36, 0xb7, 0xef, 0x9b,
    0x57, 0x00, 0xf1, 0xa1, 0x4d, 0x9c, 0x73, 0x33, 0x42, 0x88, 0x67, 0xf3,
    0xa7, 0x9b, 0xd9, 0x60, 0x80, 0x35, 0x26, 0x7e, 0xbc, 0x9f, 0xc6, 0x5a,
    0x3b, 0x7c, 0x7c, 0x2e, 0x7e, 0x39, 0x7e, 0xb8, 0x9b, 0xc6, 0xc6, 0x78,
    0xd6, 0x1f, 0x60, 0x94, 0xc2, 0x6e, 0x67, 0xc1, 0xb9, 0x85, 0x51, 0xaa,
    0xf5, 0xba, 0xb6, 0xa8, 0x2a, 0xdf, 0x7a, 0x03, 0x74, 0xd3, 0x40, 0x08,
    0x8b, 0xaa, 0xd2, 0xd0, 0x4d, 0xd3, 0x7a, 0x96, 0x6d, 0xb1, 0x5c, 0x7e,
    0x7b, 0xd6, 0x1b, 0xa0, 0xa4, 0x84, 0xd6, 0x16, 0x9c, 0x97, 0x50, 0x52,
    0xb6, 0x9e, 0xe7, 0x5b, 0xa4, 0x29, 0x87, 0x92, 0x47, 0xf3, 0x7f, 0x02,
    0x84, 0xc0, 0xaa, 0x28, 0xb1, 0x28, 0x38, 0x94, 0x10, 0xad, 0xcb, 0xfd,
    0x35, 0x0c, 0x65, 0x50, 0xa2, 0x3a, 0xbd, 0x41, 0xee, 0x46, 0x28, 0xc2,
    0x2b, 0x28, 0xb9, 0x6e, 0xbd, 0xa0, 0x21, 0x8a, 0x90, 0x78, 0x36, 0xb8,
    0xc1, 0x9a, 0x4d, 0x90, 0x46, 0x23, 0xd8, 0xce, 0x06, 0xab, 0x71, 0x84,
    0x2c, 0x0a, 0x3c, 0x1b, 0xdc, 0x20, 0x65, 0x13, 0x14, 0x81, 0xc3, 0x65,
    0xe7, 0x0d, 0x36, 0x2c, 0x42, 0x19, 0xc0, 0xb3, 0xde, 0x00, 0xa3, 0x14,
    0xf6, 0x94, 0x22, 0x0a, 0x01, 0xd9, 0x39, 0x19, 0xa5, 0x0c, 0x74, 0x8c,
    0xd3, 0x67, 0xb4, 0xc6, 0x24, 0x5f, 0xcf, 0x6f, 0x00, 0x00, 0x42, 0x48,
    0x72, 0xe0, 0xa4, 0x7e, 0x39, 0xb2, 0xb6, 0xc8, 0xbf, 0x7f, 0xa6, 0xb3,
    0x03, 0x7e, 0x00, 0xeb, 0x07, 0xa6, 0xa5, 0x95, 0xbc, 0xb7, 0xc5, 0x00,
    0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image1_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x01,
    0x3a, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xa5, 0xd3, 0xbf, 0x4a, 0x03,
    0x41, 0x10, 0x06, 0xf0, 0x6f, 0xf5, 0xfe, 0x08, 0x67, 0x63, 0x25, 0x2a,
    0x12, 0x10, 0x4b, 0xad, 0x16, 0x4b, 0x0b, 0x0b, 0xb1, 0x10, 0x52, 0x58,
    0x1b, 0x7c, 0x85, 0x7b, 0x04, 0x1f, 0xe1, 0xc0, 0x2a, 0x8d, 0x5a, 0xa4,
    0xd0, 0x42, 0x04, 0x0b, 0x5b, 0x8b, 0x43, 0x53, 0x1d, 0x16, 0x29, 0xd2,
    0xd8, 0xa8, 0x04, 0x92, 0x10, 0x2e, 0xc1, 0xe6, 0x76, 0x77, 0x46, 0xd7,
    0x42, 0x2b, 0xef, 0x92, 0x33, 0x64, 0xba, 0x5d, 0xf8, 0x7e, 0xec, 0x30,
    0xb3, 0xc2, 0x5a, 0x8b, 0x59, 0xca, 0xf9, 0x7b, 0xb1, 0x77, 0xd1, 0xaf,
    0x03, 0x88, 0x99, 0xb9, 0xc1, 0x44, 0x20, 0xad, 0x41, 0x5a, 0xc3, 0x28,
    0x85, 0xf6, 0xe9, 0x4e, 0x39, 0xc0, 0xcc, 0x12, 0x80, 0xfc, 0x3d, 0x36,
    0xca, 0x5e, 0x30, 0x97, 0x03, 0x88, 0x50, 0x3b, 0x5c, 0x95, 0x4c, 0x14,
    0xc2, 0xda, 0xe3, 0xa9, 0x01, 0xd2, 0x1a, 0xc3, 0x21, 0xe3, 0xa4, 0x5a,
    0x91, 0x64, 0x4c, 0x29, 0x52, 0x08, 0x64, 0x19, 0xa3, 0xd5, 0xfa, 0x40,
    0xad, 0xba, 0x29, 0xc9, 0x98, 0xd0, 0x4e, 0x40, 0x72, 0x80, 0x51, 0x0a,
    0x44, 0x5f, 0xc8, 0x32, 0x85, 0x66, 0xf3, 0x0d, 0x47, 0xfb, 0x15, 0x49,
    0x5a, 0x8f, 0x45, 0x0a, 0x81, 0x41, 0x3a, 0xc2, 0x7b, 0xa7, 0x83, 0x41,
    0x9a, 0x22, 0x7e, 0x7c, 0xc1, 0xc1, 0xee, 0xba, 0x24, 0xad, 0xc3, 0x22,
    0x20, 0x37, 0x05, 0x93, 0x65, 0xe8, 0x1b, 0x8b, 0x91, 0x1f, 0x00, 0x00,
    0xb6, 0x36, 0x96, 0x70, 0x73, 0xf7, 0x9c, 0x08, 0x21, 0xa2, 0xff, 0x01,
    0x4a, 0xa1, 0xe7, 0x06, 0xe8, 0x05, 0x1e, 0xb6, 0x57, 0x16, 0x70, 0x7f,
    0xfd, 0x90, 0x08, 0x21, 0x22, 0xd7, 0xf7, 0x0b, 0x47, 0x9a, 0x07, 0xb4,
    0x46, 0xd7, 0x5d, 0xc4, 0xf2, 0x1a, 0xf0, 0x74, 0x79, 0xfb, 0x13, 0xf6,
    0xbc, 0xb1, 0xfb, 0x50, 0x38, 0x05, 0xc7, 0x77, 0xd0, 0xae, 0x5f, 0x25,
    0x6c, 0x4c, 0x64, 0xad, 0x9d, 0xb8, 0x4c, 0x79, 0xc0, 0x18, 0xbc, 0x9e,
    0x9d, 0x27, 0x4c, 0x54, 0x1a, 0x2e, 0x6c, 0xe1, 0x93, 0x39, 0x01, 0x10,
    0xcf, 0x3b, 0x4e, 0x69, 0x18, 0x00, 0xc4, 0xac, 0xbf, 0x31, 0xd7, 0xc2,
    0xb4, 0xf5, 0x0d, 0x41, 0x4a, 0xa4, 0x81, 0x95, 0xf2, 0xb2, 0xae, 0x00,
    0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image2_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x02,
    0xbf, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xa5, 0x93, 0xcb, 0x6b, 0x53,
    0x51, 0x10, 0xc6, 0xbf, 0xfb, 0x4a, 0x9a, 0x04, 0xd3, 0x58, 0x35, 0xd6,
    0x96, 0xda, 0x9a, 0xd6, 0x82, 0x16, 0x05, 0x09, 0x6e, 0xac, 0x0f, 0x74,
    0xe1, 0x42, 0xf1, 0x89, 0x08, 0x96, 0xfe, 0x09, 0xe2, 0xa2, 0x5b, 0xc1,
    0x45, 0x41, 0xdc, 0xea, 0xd2, 0x85, 0x8f, 0x45, 0x51, 0x17, 0x52, 0xa8,
    0x85, 0x22, 0xee, 0xc4, 0x27, 0x62, 0xac, 0xe8, 0xa2, 0xd2, 0x52, 0x13,
    0xac, 0xa6, 0x36, 0xbd, 0x4d, 0xd3, 0x26, 0xf7, 0xe6, 0xce, 0x9c, 0x73,
    0xee, 0x71, 0x11, 0x1f, 0x15, 0xdc, 0x39, 0xdb, 0x8f, 0xf9, 0xe6, 0x37,
    0xdf, 0x30, 0x86, 0xd6, 0x1a, 0xff, 0x53, 0x36, 0x00, 0x1c, 0xbe, 0x53,
    0xba, 0x09, 0x20, 0xfb, 0x0f, 0x3d, 0x07, 0xe0, 0x1a, 0x00, 0x07, 0x40,
    0x4d, 0x6b, 0xbd, 0x14, 0x2a, 0xc5, 0x52, 0x4a, 0x48, 0x21, 0xf0, 0xe6,
    0x52, 0x77, 0xc3, 0x40, 0x29, 0xf5, 0x0c, 0x5a, 0x67, 0x07, 0x8f, 0xb7,
    0x65, 0xeb, 0x7e, 0x83, 0xc8, 0x71, 0x0c, 0x3c, 0x78, 0x52, 0xc4, 0xb9,
    0x23, 0x5b, 0x3a, 0xdd, 0x15, 0xde, 0x54, 0x74, 0x89, 0x0b, 0x45, 0xbf,
    0xc6, 0x0a, 0x53, 0x00, 0xe6, 0x7f, 0x4d, 0x30, 0x01, 0x40, 0x0a, 0x31,
    0x22, 0xa5, 0x7c, 0x7c, 0x77, 0xec, 0x4b, 0xce, 0xb2, 0x34, 0x56, 0x57,
    0x04, 0x88, 0x14, 0xa4, 0x94, 0x58, 0xa9, 0x08, 0xc3, 0xd1, 0xc6, 0xe6,
    0x4c, 0x3a, 0xd6, 0x79, 0xfa, 0x50, 0xba, 0x2f, 0xea, 0xe8, 0xa3, 0xd0,
    0x3a, 0xf3, 0x97, 0x81, 0x20, 0x6a, 0x83, 0x12, 0xfd, 0x67, 0x0e, 0xb6,
    0x66, 0xe7, 0xbf, 0x7a, 0x48, 0xad, 0xb7, 0x21, 0x85, 0x82, 0x60, 0xc6,
    0xa3, 0xe7, 0x5f, 0xaa, 0xaf, 0x3e, 0x2e, 0xac, 0x2b, 0x2d, 0xd6, 0x7a,
    0x16, 0x8a, 0x7e, 0xf7, 0x89, 0xfd, 0xad, 0x7b, 0x4c, 0x43, 0x9d, 0xd7,
    0x61, 0x98, 0xfa, 0x43, 0xc0, 0x7c, 0xb6, 0x77, 0x6b, 0xa2, 0xa7, 0x5c,
    0xf2, 0xb0, 0x2e, 0x69, 0xe3, 0xf6, 0xc3, 0xa9, 0x5c, 0xf3, 0xfa, 0x08,
    0x24, 0x11, 0x42, 0xa5, 0x72, 0xdf, 0x17, 0xab, 0x4f, 0x9e, 0x4e, 0x16,
    0xeb, 0xae, 0x5b, 0xcb, 0xcc, 0xcf, 0xad, 0xf6, 0x64, 0xb6, 0xc4, 0x76,
    0x4b, 0xe6, 0x03, 0xbf, 0x43, 0x64, 0xa2, 0xfe, 0x8d, 0x49, 0xa7, 0x25,
    0xf0, 0x19, 0x1f, 0x72, 0x4b, 0xb3, 0x4c, 0xf4, 0xfa, 0xc6, 0xad, 0x77,
    0x0d, 0x46, 0x22, 0x44, 0xa2, 0xd1, 0x77, 0x82, 0xb9, 0x75, 0xaa, 0xb0,
    0x94, 0xdd, 0xd9, 0x91, 0x6a, 0x4f, 0xb7, 0x34, 0x11, 0x13, 0x1d, 0x02,
    0x30, 0xde, 0x58, 0x21, 0x08, 0xb6, 0x5b, 0x86, 0x11, 0xaf, 0xfa, 0x8c,
    0x99, 0xd9, 0x52, 0x45, 0x49, 0x79, 0x51, 0x12, 0x5d, 0x97, 0x44, 0x39,
    0xc9, 0x8c, 0xc0, 0xf3, 0x20, 0x99, 0x27, 0x8a, 0xa5, 0x95, 0x88, 0x17,
    0x88, 0x76, 0xcb, 0x30, 0x32, 0x22, 0x08, 0xf6, 0xae, 0x25, 0x80, 0x47,
    0x12, 0x95, 0xba, 0x04, 0x13, 0x21, 0xf4, 0x7d, 0xd8, 0x8e, 0x33, 0x62,
    0x3b, 0xce, 0x88, 0x64, 0x06, 0x05, 0x75, 0x58, 0x96, 0x0d, 0xd3, 0xb2,
    0x12, 0x9e, 0xd2, 0x49, 0x8f, 0x24, 0x98, 0x28, 0xf1, 0x3b, 0x03, 0x0e,
    0x82, 0x99, 0x85, 0x4a, 0xe0, 0x7b, 0xa6, 0x8d, 0xe6, 0x54, 0x2c, 0x25,
    0x99, 0x07, 0xaa, 0xcb, 0xcb, 0x58, 0x76, 0x5d, 0x94, 0x4b, 0x25, 0x70,
    0x3d, 0x80, 0x64, 0x1e, 0x68, 0x4e, 0xc5, 0x52, 0x9e, 0x69, 0x63, 0xa1,
    0x12, 0xf8, 0x1c, 0x04, 0x33, 0x6b, 0xaf, 0xf0, 0x22, 0x3f, 0xe7, 0x96,
    0xab, 0x76, 0x04, 0x1d, 0x3b, 0x3a, 0xdb, 0x05, 0xf3, 0x90, 0xd6, 0x7a,
    0x40, 0x10, 0x01, 0x00, 0xb4, 0xd6, 0x03, 0x82, 0x79, 0xa8, 0x63, 0x47,
    0x67, 0x7b, 0xd5, 0x8e, 0x20, 0x3f, 0xe7, 0x96, 0x05, 0xd1, 0x8b, 0x3f,
    0x06, 0xcc, 0xa3, 0xf9, 0x4f, 0x05, 0x57, 0x25, 0x62, 0x28, 0x20, 0xde,
    0x94, 0x3d, 0xd9, 0xdf, 0xd7, 0xd6, 0x95, 0x1e, 0xd6, 0x61, 0xf8, 0x56,
    0x87, 0xe1, 0xdb, 0xb6, 0xae, 0xf4, 0x70, 0xf6, 0x64, 0x7f, 0x5f, 0x01,
    0xf1, 0x26, 0x95, 0x88, 0x21, 0xff, 0xa9, 0xe0, 0x0a, 0xe6, 0x51, 0x00,
    0x30, 0xb4, 0xd6, 0x48, 0x0e, 0xde, 0x47, 0xa8, 0xd4, 0x09, 0x2b, 0x11,
    0xbf, 0xba, 0xe1, 0xd4, 0xb1, 0x5d, 0x75, 0xa9, 0x91, 0x8c, 0x1a, 0x48,
    0x45, 0x4d, 0x00, 0x40, 0x85, 0x42, 0xac, 0x92, 0x46, 0xcc, 0x36, 0xb0,
    0x34, 0x36, 0xf1, 0x51, 0x79, 0xfe, 0x65, 0xd3, 0xb2, 0xc6, 0x57, 0x47,
    0x2e, 0x34, 0x42, 0xfc, 0x89, 0x39, 0x1e, 0x2c, 0x57, 0xf0, 0xed, 0xde,
    0xc3, 0x61, 0xa7, 0x77, 0xfb, 0xc6, 0x5a, 0x66, 0x5b, 0xcb, 0xd7, 0x96,
    0x0d, 0x71, 0x00, 0x30, 0xcb, 0x15, 0x5f, 0x7f, 0xce, 0x97, 0xcb, 0xd3,
    0x33, 0x2e, 0x98, 0xaf, 0xd8, 0x8e, 0x33, 0xfe, 0xd7, 0x33, 0xad, 0x35,
    0x09, 0x7d, 0x3f, 0x27, 0x27, 0xdf, 0x9f, 0xc5, 0xe4, 0xfb, 0x7d, 0x00,
    0x7a, 0x7f, 0x4a, 0xd3, 0x00, 0x5e, 0x1a, 0x86, 0x31, 0x6a, 0x5a, 0x56,
    0x71, 0x6d, 0x8f, 0xf1, 0xbf, 0xef, 0xfc, 0x03, 0xd4, 0x0f, 0x9b, 0xc2,
    0xea, 0xab, 0x0c, 0x49, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44,
    0xae, 0x42, 0x60, 0x82
};

static const unsigned char image3_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x01,
    0x88, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xa5, 0x90, 0xb1, 0x4b, 0x5b,
    0x51, 0x14, 0xc6, 0xbf, 0x73, 0xdf, 0xbd, 0x51, 0x08, 0x2d, 0x21, 0x4a,
    0x70, 0x93, 0x48, 0x87, 0x60, 0x56, 0x83, 0x88, 0x64, 0x32, 0x4a, 0x15,
    0x47, 0xb3, 0x76, 0x2a, 0xdd, 0xba, 0x65, 0xe9, 0x5f, 0xe0, 0x56, 0x3a,
    0x74, 0x28, 0x19, 0x8b, 0x43, 0x3b, 0x66, 0x50, 0xc8, 0x2c, 0x08, 0x82,
    0x82, 0x85, 0x0a, 0x19, 0x6c, 0x5c, 0x04, 0x15, 0x4c, 0x87, 0xa6, 0xaf,
    0x2d, 0xf7, 0x9e, 0x73, 0x5e, 0x87, 0x67, 0x4b, 0x0b, 0x9a, 0xfa, 0xec,
    0x37, 0x1d, 0x2e, 0x9c, 0xdf, 0xfd, 0x9d, 0x8f, 0x92, 0x24, 0xc1, 0xff,
    0x84, 0x9a, 0xcd, 0xe6, 0x0c, 0x80, 0x79, 0x00, 0x0f, 0x32, 0xee, 0x0e,
    0x01, 0xec, 0x5b, 0x11, 0x59, 0x68, 0xb5, 0x5a, 0x2f, 0x4a, 0xa5, 0x52,
    0x55, 0x84, 0xc1, 0x2c, 0x60, 0x0e, 0x08, 0x81, 0xc1, 0xcc, 0x50, 0x55,
    0xa4, 0x92, 0x11, 0x88, 0x2c, 0x88, 0x2c, 0xac, 0xcd, 0x61, 0x30, 0x18,
    0x1c, 0xb7, 0xdb, 0x2f, 0x37, 0xad, 0xaa, 0x3e, 0x8c, 0xe3, 0xb8, 0xda,
    0xef, 0xf7, 0xa1, 0xaa, 0x50, 0x55, 0x88, 0x08, 0x44, 0x64, 0xe4, 0xac,
    0xaa, 0xd5, 0x4e, 0xa7, 0x93, 0xb7, 0xce, 0x39, 0x6d, 0x34, 0x1a, 0xf7,
    0xba, 0xbf, 0xdb, 0xed, 0x92, 0x65, 0x66, 0x4a, 0x35, 0xb3, 0x95, 0x49,
    0x44, 0x60, 0x66, 0xb2, 0xcc, 0x6c, 0x7e, 0x69, 0x65, 0x89, 0x31, 0x06,
    0xcc, 0x6c, 0x7e, 0x03, 0x44, 0x24, 0x13, 0x20, 0x8a, 0xa2, 0x14, 0x10,
    0x42, 0x30, 0xcc, 0x69, 0xe3, 0x59, 0x92, 0x24, 0x09, 0x42, 0x08, 0xc6,
    0x7a, 0xef, 0x23, 0x11, 0xb9, 0x33, 0xe0, 0xcd, 0x07, 0xc5, 0xec, 0x04,
    0x61, 0xa9, 0x4c, 0xf0, 0xde, 0x47, 0xd6, 0x7b, 0x6f, 0x44, 0x04, 0x21,
    0x84, 0x3b, 0x01, 0x7a, 0x97, 0x01, 0xbd, 0xcb, 0xd4, 0xc0, 0x7b, 0xff,
    0x6f, 0x83, 0xd7, 0xfb, 0xdf, 0x70, 0xf2, 0xf9, 0xef, 0x7e, 0x96, 0xd7,
    0x67, 0xf1, 0x6e, 0xa7, 0x87, 0x1f, 0x33, 0x2b, 0x35, 0x1b, 0xc7, 0xb1,
    0x23, 0x22, 0x38, 0xe7, 0x6e, 0x04, 0x7c, 0x3c, 0x1b, 0xe2, 0xf1, 0xc6,
    0x1c, 0x7a, 0x5f, 0x80, 0xe1, 0xf5, 0x1f, 0x7b, 0x57, 0xc0, 0x74, 0xbd,
    0x82, 0xa3, 0xe3, 0x5a, 0x9d, 0x8a, 0xc5, 0xe2, 0x53, 0x55, 0x2d, 0xdf,
    0xa6, 0xec, 0x16, 0x9f, 0xaf, 0x99, 0xc9, 0x47, 0x53, 0x7f, 0xbe, 0x95,
    0x9f, 0x3d, 0x99, 0x3a, 0x6d, 0xbf, 0xbd, 0x48, 0xce, 0x8f, 0xde, 0x53,
    0xa1, 0x50, 0x18, 0x79, 0xbf, 0xab, 0xac, 0xc2, 0x56, 0x56, 0x01, 0x00,
    0x0a, 0x83, 0x40, 0xe3, 0x07, 0x00, 0x40, 0xc6, 0xbc, 0xca, 0x7d, 0xda,
    0xde, 0xb2, 0xb7, 0x6e, 0xde, 0x90, 0xaf, 0xdf, 0x15, 0x48, 0xe2, 0x43,
    0x00, 0xbb, 0x63, 0xf9, 0xfc, 0x16, 0x00, 0xfc, 0x04, 0xa3, 0xff, 0xea,
    0xdc, 0x8a, 0x22, 0x79, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e,
    0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image4_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x01,
    0xdc, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0x9d, 0x93, 0xcb, 0x6a, 0x53,
    0x51, 0x14, 0x86, 0xbf, 0x73, 0x7a, 0x4e, 0x4f, 0xe2, 0x0d, 0x1d, 0x6a,
    0x89, 0x25, 0x27, 0xe4, 0x42, 0xd2, 0x8a, 0x17, 0x44, 0x70, 0x9a, 0xe8,
    0xcc, 0x99, 0x3e, 0x82, 0xe0, 0x03, 0x38, 0x6e, 0xa1, 0x4f, 0xe1, 0xc8,
    0x27, 0xf0, 0x0d, 0x3a, 0x13, 0x51, 0x5a, 0xa9, 0x6d, 0x6d, 0x12, 0x42,
    0xc2, 0x49, 0x28, 0xb5, 0x64, 0x14, 0x3a, 0x11, 0x4d, 0x7a, 0xf6, 0x5e,
    0xcb, 0x41, 0xee, 0x41, 0x50, 0xb2, 0x60, 0xc3, 0xbf, 0x2f, 0x6b, 0xed,
    0x6f, 0xad, 0xbd, 0xb6, 0xf3, 0x6a, 0x7b, 0xfb, 0x05, 0x70, 0x9b, 0xe5,
    0xac, 0xeb, 0x89, 0xc8, 0x9d, 0x0f, 0x3b, 0x3b, 0xef, 0x96, 0xf1, 0x7e,
    0xb9, 0xb5, 0xf5, 0xc6, 0x13, 0x6b, 0x1d, 0x05, 0x9e, 0x1f, 0x80, 0xaa,
    0x4e, 0x86, 0x88, 0x20, 0x22, 0xa8, 0x08, 0x32, 0x3b, 0x1f, 0xed, 0xef,
    0x97, 0x6f, 0x22, 0xd6, 0x3a, 0xae, 0xb5, 0xd6, 0x15, 0x55, 0x00, 0x9e,
    0x65, 0x1c, 0x00, 0x2a, 0xe1, 0x54, 0x97, 0x43, 0x28, 0xa7, 0x75, 0xb2,
    0x3e, 0xd6, 0xa2, 0x8a, 0xb5, 0xd6, 0xf5, 0xac, 0x31, 0x8e, 0x55, 0x05,
    0x1c, 0x76, 0x23, 0x25, 0xf4, 0xfa, 0xd0, 0xfd, 0x85, 0x8a, 0x50, 0x49,
    0x0a, 0xda, 0x15, 0x1c, 0x55, 0x2a, 0x49, 0x41, 0x26, 0x5a, 0xb1, 0x7a,
    0x03, 0x6b, 0x8c, 0xe3, 0x19, 0x63, 0xe6, 0x08, 0xe4, 0xc7, 0x6f, 0xde,
    0x16, 0x6f, 0x01, 0xf0, 0xb5, 0xd9, 0xe4, 0x71, 0x2e, 0x07, 0xc0, 0xe7,
    0x5a, 0x8d, 0xa7, 0xa5, 0x12, 0x00, 0x1f, 0x8f, 0x8f, 0x11, 0xbd, 0x8b,
    0x31, 0x66, 0x96, 0x00, 0x76, 0x23, 0xa5, 0x1c, 0xc0, 0x61, 0xbb, 0x8d,
    0x88, 0x70, 0x35, 0x91, 0x60, 0xaf, 0xd1, 0x40, 0x55, 0xb9, 0x96, 0x4c,
    0xf2, 0xe9, 0xe4, 0x04, 0x1d, 0x9d, 0xb5, 0xaa, 0x53, 0x02, 0x2b, 0x32,
    0x43, 0x00, 0x1b, 0xeb, 0xeb, 0x00, 0x1c, 0x45, 0x11, 0x0f, 0xb3, 0xd9,
    0x21, 0x4d, 0xa3, 0xc1, 0x93, 0x62, 0x11, 0x80, 0x2f, 0xd5, 0x2a, 0x56,
    0x64, 0x48, 0x60, 0x8c, 0x71, 0x17, 0x09, 0xaa, 0xa7, 0xa7, 0x88, 0x08,
    0xc9, 0x20, 0xe0, 0x5b, 0xab, 0x85, 0xaa, 0x72, 0x25, 0x91, 0x60, 0xaf,
    0x5e, 0x9f, 0x23, 0x18, 0x06, 0x88, 0xe3, 0x49, 0x0a, 0x63, 0x82, 0x42,
    0x2a, 0x05, 0x40, 0xb5, 0xd3, 0xe1, 0x5e, 0x26, 0x03, 0xc0, 0x61, 0xb3,
    0xc9, 0xa3, 0x42, 0x61, 0x48, 0x53, 0xaf, 0x0f, 0x03, 0xc4, 0xf1, 0x7c,
    0x11, 0xc7, 0x04, 0x8d, 0xb3, 0x33, 0x44, 0x84, 0x60, 0x75, 0x95, 0xef,
    0x51, 0x84, 0xaa, 0x92, 0x08, 0x02, 0x0e, 0x46, 0xf5, 0x18, 0x3f, 0xa3,
    0x31, 0xc6, 0x75, 0x4d, 0x1c, 0xbb, 0x76, 0xa1, 0x0f, 0xb2, 0x6b, 0x6b,
    0xe4, 0x53, 0x29, 0x06, 0x97, 0x97, 0x94, 0xd2, 0x69, 0x36, 0xc2, 0x90,
    0xfe, 0x60, 0xc0, 0xfd, 0x5c, 0x8e, 0x07, 0xf9, 0xfc, 0x34, 0x85, 0x38,
    0x76, 0xbd, 0x41, 0xbf, 0xbf, 0xb2, 0x48, 0xd0, 0x3a, 0x3f, 0x47, 0x46,
    0x85, 0xad, 0x75, 0x3a, 0x93, 0x5b, 0x8f, 0x9a, 0xcd, 0x39, 0x82, 0x41,
    0xbf, 0xbf, 0xe2, 0x5d, 0xf4, 0x7a, 0x81, 0xef, 0xfb, 0xbc, 0xcf, 0xff,
    0x1c, 0x75, 0x78, 0xc0, 0xff, 0xfc, 0x2d, 0xdf, 0xf7, 0xb9, 0xe8, 0xf5,
    0x02, 0xe7, 0xfa, 0xe6, 0xe6, 0x6b, 0x11, 0x09, 0xff, 0xe9, 0xf1, 0x17,
    0x73, 0x5d, 0xb7, 0xed, 0x8c, 0x91, 0x96, 0xb5, 0x3f, 0x9f, 0x7d, 0x4d,
    0x04, 0xe0, 0xb6, 0xbc, 0x24, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e,
    0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image5_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x02,
    0x06, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xa5, 0x93, 0xbb, 0x6b, 0x14,
    0x51, 0x14, 0xc6, 0x7f, 0xf7, 0xee, 0xbd, 0x33, 0xb3, 0xec, 0xc6, 0x4d,
    0x56, 0x76, 0x0b, 0x15, 0x21, 0x21, 0x20, 0xd9, 0x05, 0x1b, 0x1f, 0xd1,
    0x5a, 0x2d, 0x44, 0xac, 0x24, 0xa5, 0x60, 0x21, 0x22, 0x5a, 0xd8, 0x04,
    0xc4, 0x22, 0x8d, 0x8d, 0x9d, 0x85, 0x65, 0xac, 0x44, 0xff, 0x81, 0x14,
    0x36, 0x6a, 0x63, 0x23, 0x28, 0x08, 0x22, 0x08, 0x82, 0xb0, 0x22, 0x58,
    0x88, 0xb0, 0xa2, 0x33, 0x99, 0xcd, 0xdd, 0xb9, 0x8f, 0xb1, 0x98, 0x65,
    0x82, 0x8d, 0x10, 0x72, 0xe0, 0xc0, 0x69, 0xbe, 0x07, 0xe7, 0x3b, 0x47,
    0x94, 0x65, 0xc9, 0x7e, 0x4a, 0xac, 0xad, 0xad, 0x2d, 0x01, 0xab, 0xc0,
    0xdc, 0x1e, 0xb1, 0x19, 0xf0, 0x56, 0x79, 0xef, 0xcf, 0xae, 0xaf, 0xaf,
    0xdf, 0xeb, 0xf7, 0xfb, 0x43, 0xef, 0x1d, 0xce, 0x79, 0x9c, 0xb3, 0x58,
    0xeb, 0x70, 0xce, 0x11, 0x42, 0xa0, 0x32, 0xd9, 0x40, 0x08, 0x85, 0x10,
    0x0a, 0xa5, 0x22, 0xc6, 0xe3, 0xf1, 0xa7, 0xcd, 0xcd, 0x87, 0x0f, 0x54,
    0x08, 0xe1, 0x40, 0x9e, 0xe7, 0xc3, 0xd1, 0x68, 0x44, 0x08, 0x81, 0x10,
    0x02, 0xde, 0x7b, 0xbc, 0xf7, 0xff, 0x9d, 0x43, 0x08, 0xc3, 0xad, 0xad,
    0xad, 0x96, 0xd2, 0x5a, 0x87, 0x8d, 0x8d, 0x0d, 0x7a, 0xbd, 0x1e, 0x00,
    0x65, 0x59, 0xce, 0x54, 0xcb, 0x7a, 0x0e, 0x21, 0x60, 0xad, 0xc5, 0x98,
    0x02, 0x29, 0x15, 0x4a, 0x29, 0x9c, 0xb3, 0x00, 0x28, 0xe7, 0x9c, 0xe8,
    0xf5, 0x7a, 0x0c, 0x06, 0x83, 0x5a, 0xc5, 0x39, 0xc7, 0xf4, 0xd4, 0x32,
    0xfe, 0xf5, 0x47, 0xac, 0xb5, 0xa4, 0x69, 0x46, 0x9a, 0x4e, 0xe8, 0x74,
    0xe6, 0x50, 0x2a, 0x42, 0xa9, 0x88, 0xc9, 0x24, 0xad, 0x09, 0x64, 0x59,
    0x96, 0x38, 0xe7, 0xea, 0xb6, 0xd6, 0x52, 0x1e, 0x39, 0x88, 0x31, 0x86,
    0x34, 0xdd, 0x66, 0x32, 0x29, 0xd0, 0x3a, 0x41, 0xeb, 0x0a, 0xac, 0xb5,
    0xc6, 0x5a, 0xb3, 0x4b, 0x20, 0x84, 0xa0, 0x28, 0x0a, 0xac, 0xb5, 0x75,
    0x27, 0x47, 0xfb, 0x64, 0x59, 0xce, 0x74, 0xea, 0x89, 0xe3, 0xe6, 0x0c,
    0x18, 0xcd, 0x1c, 0x68, 0xb4, 0xde, 0x06, 0x40, 0x5a, 0x6b, 0xa5, 0xf7,
    0x1e, 0x63, 0x0c, 0xee, 0xcc, 0x31, 0x8c, 0x31, 0x18, 0x53, 0xb1, 0x5b,
    0x0b, 0xed, 0xc1, 0x12, 0x87, 0x1f, 0xdd, 0x64, 0xfe, 0xd2, 0x69, 0xe2,
    0xb8, 0x49, 0x1c, 0x27, 0x44, 0x51, 0x8c, 0x52, 0xba, 0x72, 0x50, 0x14,
    0x45, 0xa3, 0x79, 0xe1, 0x24, 0x6e, 0xf5, 0x38, 0xd3, 0x2f, 0xdf, 0x69,
    0xdf, 0xbf, 0x56, 0x07, 0xdd, 0x5e, 0x59, 0x64, 0xfe, 0xd6, 0x45, 0x7e,
    0xdd, 0x7d, 0xca, 0xdc, 0x8d, 0xf3, 0xb4, 0xce, 0x5d, 0xe1, 0x50, 0x73,
    0x81, 0x13, 0x0b, 0x4b, 0x3c, 0xb9, 0x7a, 0xa7, 0x26, 0x90, 0xe2, 0xd5,
    0x7b, 0xd2, 0x0f, 0xdf, 0x08, 0x21, 0xf0, 0xfb, 0xf9, 0x1b, 0xca, 0x12,
    0x5a, 0x2b, 0xcb, 0x74, 0x6f, 0x5f, 0x26, 0xdb, 0x7c, 0x41, 0xab, 0x35,
    0x8f, 0x7f, 0xf6, 0x0e, 0x57, 0x06, 0x46, 0x02, 0x46, 0x80, 0x10, 0x62,
    0xd7, 0x41, 0x92, 0x24, 0x58, 0x6b, 0x71, 0xce, 0xe1, 0xbd, 0x27, 0x8a,
    0xda, 0x44, 0x3f, 0xa6, 0x6c, 0x3f, 0x7e, 0x49, 0xf2, 0xd3, 0xd2, 0xd0,
    0x11, 0x52, 0x36, 0xfe, 0x39, 0xc3, 0x9d, 0x9d, 0x6a, 0x07, 0x2a, 0xcf,
    0x73, 0x1d, 0x45, 0x51, 0x9d, 0x7b, 0x55, 0x9a, 0x2c, 0x1b, 0xd3, 0xf8,
    0xfc, 0x07, 0x23, 0x1b, 0x48, 0x29, 0x66, 0x8a, 0xa2, 0x26, 0x30, 0x26,
    0xa3, 0xd3, 0xe9, 0xb4, 0x45, 0xb7, 0xdb, 0xbd, 0x1e, 0x42, 0x58, 0xdc,
    0xe3, 0x1f, 0x54, 0x09, 0x48, 0xf9, 0x55, 0xec, 0xf7, 0x1b, 0xe5, 0xbe,
    0xd0, 0xc0, 0x5f, 0x88, 0xe0, 0x2d, 0x8c, 0xbc, 0xe6, 0xec, 0x4d, 0x00,
    0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};


/*
 *  Constructs a CP_main_windowUI as a child of 'parent', with the
 *  name 'name' and widget flags set to 'f'.
 */
CP_main_windowUI::CP_main_windowUI( QWidget* parent, const char* name, WFlags fl )
    : QWidget( parent, name, fl )
{
    QImage img;
    img.loadFromData( image0_data, sizeof( image0_data ), "PNG" );
    image0 = img;
    img.loadFromData( image1_data, sizeof( image1_data ), "PNG" );
    image1 = img;
    img.loadFromData( image2_data, sizeof( image2_data ), "PNG" );
    image2 = img;
    img.loadFromData( image3_data, sizeof( image3_data ), "PNG" );
    image3 = img;
    img.loadFromData( image4_data, sizeof( image4_data ), "PNG" );
    image4 = img;
    img.loadFromData( image5_data, sizeof( image5_data ), "PNG" );
    image5 = img;
    if ( !name )
	setName( "CP_main_windowUI" );
    setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)5, (QSizePolicy::SizeType)5, 254, 0, sizePolicy().hasHeightForWidth() ) );
    setMinimumSize( QSize( 260, 0 ) );
    CP_main_windowUILayout = new QVBoxLayout( this, 11, 6, "CP_main_windowUILayout"); 

    protocolControlButtonGroup = new QButtonGroup( this, "protocolControlButtonGroup" );
    QFont protocolControlButtonGroup_font(  protocolControlButtonGroup->font() );
    protocolControlButtonGroup_font.setBold( TRUE );
    protocolControlButtonGroup->setFont( protocolControlButtonGroup_font ); 
    protocolControlButtonGroup->setLineWidth( 2 );
    protocolControlButtonGroup->setMidLineWidth( 0 );
    protocolControlButtonGroup->setAlignment( int( QButtonGroup::AlignHCenter ) );
    protocolControlButtonGroup->setColumnLayout(0, Qt::Vertical );
    protocolControlButtonGroup->layout()->setSpacing( 6 );
    protocolControlButtonGroup->layout()->setMargin( 11 );
    protocolControlButtonGroupLayout = new QVBoxLayout( protocolControlButtonGroup->layout() );
    protocolControlButtonGroupLayout->setAlignment( Qt::AlignTop );

    layout1 = new QHBoxLayout( 0, 0, 6, "layout1"); 

    pauseButton = new QPushButton( protocolControlButtonGroup, "pauseButton" );
    pauseButton->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)0, (QSizePolicy::SizeType)0, 0, 0, pauseButton->sizePolicy().hasHeightForWidth() ) );
    pauseButton->setMinimumSize( QSize( 30, 30 ) );
    pauseButton->setMaximumSize( QSize( 30, 30 ) );
    QFont pauseButton_font(  pauseButton->font() );
    pauseButton->setFont( pauseButton_font ); 
    pauseButton->setPixmap( image0 );
    pauseButton->setToggleButton( TRUE );
    layout1->addWidget( pauseButton );

    runProtocolButton = new QPushButton( protocolControlButtonGroup, "runProtocolButton" );
    runProtocolButton->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)0, (QSizePolicy::SizeType)0, 0, 0, runProtocolButton->sizePolicy().hasHeightForWidth() ) );
    runProtocolButton->setMinimumSize( QSize( 30, 30 ) );
    runProtocolButton->setMaximumSize( QSize( 30, 300 ) );
    QFont runProtocolButton_font(  runProtocolButton->font() );
    runProtocolButton->setFont( runProtocolButton_font ); 
    runProtocolButton->setPixmap( image1 );
    runProtocolButton->setToggleButton( TRUE );
    runProtocolButton->setFlat( FALSE );
    layout1->addWidget( runProtocolButton );

    modifyButton = new QPushButton( protocolControlButtonGroup, "modifyButton" );
    modifyButton->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)0, (QSizePolicy::SizeType)0, 0, 0, modifyButton->sizePolicy().hasHeightForWidth() ) );
    modifyButton->setMinimumSize( QSize( 30, 30 ) );
    modifyButton->setMaximumSize( QSize( 30, 30 ) );
    QFont modifyButton_font(  modifyButton->font() );
    modifyButton->setFont( modifyButton_font ); 
    modifyButton->setPixmap( image2 );
    modifyButton->setToggleButton( FALSE );
    layout1->addWidget( modifyButton );

    loadProtocolButton = new QPushButton( protocolControlButtonGroup, "loadProtocolButton" );
    loadProtocolButton->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)0, (QSizePolicy::SizeType)0, 0, 0, loadProtocolButton->sizePolicy().hasHeightForWidth() ) );
    loadProtocolButton->setMinimumSize( QSize( 30, 30 ) );
    loadProtocolButton->setMaximumSize( QSize( 30, 30 ) );
    QFont loadProtocolButton_font(  loadProtocolButton->font() );
    loadProtocolButton->setFont( loadProtocolButton_font ); 
    loadProtocolButton->setPixmap( image3 );
    loadProtocolButton->setToggleButton( FALSE );
    loadProtocolButton->setFlat( FALSE );
    layout1->addWidget( loadProtocolButton );

    protocolEditorButton = new QPushButton( protocolControlButtonGroup, "protocolEditorButton" );
    protocolEditorButton->setEnabled( TRUE );
    protocolEditorButton->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)0, (QSizePolicy::SizeType)0, 0, 0, protocolEditorButton->sizePolicy().hasHeightForWidth() ) );
    protocolEditorButton->setMinimumSize( QSize( 30, 30 ) );
    protocolEditorButton->setMaximumSize( QSize( 30, 30 ) );
    QFont protocolEditorButton_font(  protocolEditorButton->font() );
    protocolEditorButton->setFont( protocolEditorButton_font ); 
    protocolEditorButton->setPixmap( image4 );
    protocolEditorButton->setToggleButton( FALSE );
    protocolEditorButton->setFlat( FALSE );
    layout1->addWidget( protocolEditorButton );

    plotWindowButton = new QPushButton( protocolControlButtonGroup, "plotWindowButton" );
    plotWindowButton->setEnabled( TRUE );
    plotWindowButton->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)0, (QSizePolicy::SizeType)0, 0, 0, plotWindowButton->sizePolicy().hasHeightForWidth() ) );
    plotWindowButton->setMinimumSize( QSize( 30, 30 ) );
    plotWindowButton->setMaximumSize( QSize( 30, 30 ) );
    QFont plotWindowButton_font(  plotWindowButton->font() );
    plotWindowButton->setFont( plotWindowButton_font ); 
    plotWindowButton->setPixmap( image5 );
    plotWindowButton->setToggleButton( FALSE );
    plotWindowButton->setFlat( FALSE );
    layout1->addWidget( plotWindowButton );
    protocolControlButtonGroupLayout->addLayout( layout1 );
    spacer1 = new QSpacerItem( 20, 0, QSizePolicy::Minimum, QSizePolicy::Expanding );
    protocolControlButtonGroupLayout->addItem( spacer1 );

    protocolControlLine = new QFrame( protocolControlButtonGroup, "protocolControlLine" );
    protocolControlLine->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)0, 0, 0, protocolControlLine->sizePolicy().hasHeightForWidth() ) );
    protocolControlLine->setFrameShape( QFrame::HLine );
    protocolControlLine->setFrameShadow( QFrame::Plain );
    protocolControlLine->setFrameShape( QFrame::HLine );
    protocolControlButtonGroupLayout->addWidget( protocolControlLine );
    spacer2 = new QSpacerItem( 20, 0, QSizePolicy::Minimum, QSizePolicy::Expanding );
    protocolControlButtonGroupLayout->addItem( spacer2 );

    protocolNameEdit = new QLineEdit( protocolControlButtonGroup, "protocolNameEdit" );
    protocolNameEdit->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, protocolNameEdit->sizePolicy().hasHeightForWidth() ) );
    protocolNameEdit->setMinimumSize( QSize( 0, 0 ) );
    protocolNameEdit->setMaximumSize( QSize( 32767, 32767 ) );
    QFont protocolNameEdit_font(  protocolNameEdit->font() );
    protocolNameEdit->setFont( protocolNameEdit_font ); 
    protocolNameEdit->setFrameShape( QLineEdit::LineEditPanel );
    protocolNameEdit->setFrameShadow( QLineEdit::Sunken );
    protocolNameEdit->setMargin( 0 );
    protocolNameEdit->setFrame( TRUE );
    protocolNameEdit->setAlignment( int( QLineEdit::AlignAuto ) );
    protocolNameEdit->setReadOnly( TRUE );
    protocolControlButtonGroupLayout->addWidget( protocolNameEdit );
    CP_main_windowUILayout->addWidget( protocolControlButtonGroup );

    protocolOptionGroup = new QGroupBox( this, "protocolOptionGroup" );
    protocolOptionGroup->setMaximumSize( QSize( 32767, 300 ) );
    QFont protocolOptionGroup_font(  protocolOptionGroup->font() );
    protocolOptionGroup_font.setBold( TRUE );
    protocolOptionGroup->setFont( protocolOptionGroup_font ); 
    protocolOptionGroup->setLineWidth( 2 );
    protocolOptionGroup->setAlignment( int( QGroupBox::AlignHCenter ) );
    protocolOptionGroup->setColumnLayout(0, Qt::Vertical );
    protocolOptionGroup->layout()->setSpacing( 1 );
    protocolOptionGroup->layout()->setMargin( 6 );
    protocolOptionGroupLayout = new QGridLayout( protocolOptionGroup->layout() );
    protocolOptionGroupLayout->setAlignment( Qt::AlignTop );

    trialsEdit = new QSpinBox( protocolOptionGroup, "trialsEdit" );
    trialsEdit->setMaxValue( 1000 );
    trialsEdit->setMinValue( 1 );

    protocolOptionGroupLayout->addWidget( trialsEdit, 2, 1 );
    spacer13 = new QSpacerItem( 20, 3, QSizePolicy::Minimum, QSizePolicy::Expanding );
    protocolOptionGroupLayout->addItem( spacer13, 1, 1 );

    intervalTimeLabel = new QLabel( protocolOptionGroup, "intervalTimeLabel" );
    intervalTimeLabel->setMinimumSize( QSize( 0, 22 ) );
    QFont intervalTimeLabel_font(  intervalTimeLabel->font() );
    intervalTimeLabel->setFont( intervalTimeLabel_font ); 
    intervalTimeLabel->setTextFormat( QLabel::AutoText );
    intervalTimeLabel->setAlignment( int( QLabel::AlignCenter ) );

    protocolOptionGroupLayout->addWidget( intervalTimeLabel, 0, 0 );

    intervalTimeEdit = new QSpinBox( protocolOptionGroup, "intervalTimeEdit" );
    intervalTimeEdit->setButtonSymbols( QSpinBox::UpDownArrows );
    intervalTimeEdit->setMaxValue( 999999999 );
    intervalTimeEdit->setLineStep( 10 );

    protocolOptionGroupLayout->addWidget( intervalTimeEdit, 0, 1 );
    spacer6 = new QSpacerItem( 20, 3, QSizePolicy::Minimum, QSizePolicy::Expanding );
    protocolOptionGroupLayout->addItem( spacer6, 1, 0 );

    trialsLabel = new QLabel( protocolOptionGroup, "trialsLabel" );
    trialsLabel->setMinimumSize( QSize( 0, 22 ) );
    QFont trialsLabel_font(  trialsLabel->font() );
    trialsLabel->setFont( trialsLabel_font ); 
    trialsLabel->setTextFormat( QLabel::AutoText );
    trialsLabel->setAlignment( int( QLabel::AlignCenter ) );

    protocolOptionGroupLayout->addWidget( trialsLabel, 2, 0 );

    junctionPotentialLabel = new QLabel( protocolOptionGroup, "junctionPotentialLabel" );
    junctionPotentialLabel->setMinimumSize( QSize( 0, 22 ) );
    QFont junctionPotentialLabel_font(  junctionPotentialLabel->font() );
    junctionPotentialLabel->setFont( junctionPotentialLabel_font ); 
    junctionPotentialLabel->setTextFormat( QLabel::AutoText );
    junctionPotentialLabel->setAlignment( int( QLabel::AlignCenter ) );

    protocolOptionGroupLayout->addWidget( junctionPotentialLabel, 4, 0 );

    dataRecordCheckBox = new QCheckBox( protocolOptionGroup, "dataRecordCheckBox" );
    QFont dataRecordCheckBox_font(  dataRecordCheckBox->font() );
    dataRecordCheckBox->setFont( dataRecordCheckBox_font ); 

    protocolOptionGroupLayout->addWidget( dataRecordCheckBox, 6, 0 );
    spacer12 = new QSpacerItem( 0, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    protocolOptionGroupLayout->addItem( spacer12, 6, 1 );
    spacer7 = new QSpacerItem( 20, 3, QSizePolicy::Minimum, QSizePolicy::Expanding );
    protocolOptionGroupLayout->addItem( spacer7, 3, 0 );
    spacer11 = new QSpacerItem( 20, 3, QSizePolicy::Minimum, QSizePolicy::Expanding );
    protocolOptionGroupLayout->addItem( spacer11, 3, 1 );
    spacer11_2 = new QSpacerItem( 20, 28, QSizePolicy::Minimum, QSizePolicy::Expanding );
    protocolOptionGroupLayout->addItem( spacer11_2, 5, 1 );
    spacer7_2 = new QSpacerItem( 20, 28, QSizePolicy::Minimum, QSizePolicy::Expanding );
    protocolOptionGroupLayout->addItem( spacer7_2, 5, 0 );

    junctionPotentialEdit = new QLineEdit( protocolOptionGroup, "junctionPotentialEdit" );
    junctionPotentialEdit->setMaximumSize( QSize( 32767, 32767 ) );
    junctionPotentialEdit->setAlignment( int( QLineEdit::AlignHCenter ) );

    protocolOptionGroupLayout->addWidget( junctionPotentialEdit, 4, 1 );
    CP_main_windowUILayout->addWidget( protocolOptionGroup );

    protocolStatesGroup = new QGroupBox( this, "protocolStatesGroup" );
    QFont protocolStatesGroup_font(  protocolStatesGroup->font() );
    protocolStatesGroup_font.setBold( TRUE );
    protocolStatesGroup->setFont( protocolStatesGroup_font ); 
    protocolStatesGroup->setLineWidth( 2 );
    protocolStatesGroup->setAlignment( int( QGroupBox::AlignCenter ) );
    protocolStatesGroup->setColumnLayout(0, Qt::Vertical );
    protocolStatesGroup->layout()->setSpacing( 1 );
    protocolStatesGroup->layout()->setMargin( 11 );
    protocolStatesGroupLayout = new QVBoxLayout( protocolStatesGroup->layout() );
    protocolStatesGroupLayout->setAlignment( Qt::AlignTop );

    layout2 = new QHBoxLayout( 0, 0, 6, "layout2"); 

    trialNumberLabel = new QLabel( protocolStatesGroup, "trialNumberLabel" );
    trialNumberLabel->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)0, (QSizePolicy::SizeType)5, 0, 0, trialNumberLabel->sizePolicy().hasHeightForWidth() ) );
    trialNumberLabel->setMinimumSize( QSize( 75, 0 ) );
    trialNumberLabel->setMaximumSize( QSize( 75, 32767 ) );
    QFont trialNumberLabel_font(  trialNumberLabel->font() );
    trialNumberLabel->setFont( trialNumberLabel_font ); 
    trialNumberLabel->setFrameShape( QLabel::NoFrame );
    trialNumberLabel->setAlignment( int( QLabel::AlignCenter ) );
    layout2->addWidget( trialNumberLabel );

    trialNumberEdit = new QLineEdit( protocolStatesGroup, "trialNumberEdit" );
    trialNumberEdit->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, trialNumberEdit->sizePolicy().hasHeightForWidth() ) );
    trialNumberEdit->setMaximumSize( QSize( 32767, 32767 ) );
    trialNumberEdit->setPaletteBackgroundColor( QColor( 239, 239, 239 ) );
    trialNumberEdit->setBackgroundOrigin( QLineEdit::WidgetOrigin );
    QFont trialNumberEdit_font(  trialNumberEdit->font() );
    trialNumberEdit->setFont( trialNumberEdit_font ); 
    trialNumberEdit->setFrameShape( QLineEdit::NoFrame );
    trialNumberEdit->setFrame( FALSE );
    trialNumberEdit->setAlignment( int( QLineEdit::AlignHCenter ) );
    trialNumberEdit->setReadOnly( TRUE );
    layout2->addWidget( trialNumberEdit );
    protocolStatesGroupLayout->addLayout( layout2 );
    spacer8 = new QSpacerItem( 20, 0, QSizePolicy::Minimum, QSizePolicy::Expanding );
    protocolStatesGroupLayout->addItem( spacer8 );

    layout3 = new QHBoxLayout( 0, 0, 6, "layout3"); 

    segmentLabel = new QLabel( protocolStatesGroup, "segmentLabel" );
    segmentLabel->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)0, (QSizePolicy::SizeType)5, 0, 0, segmentLabel->sizePolicy().hasHeightForWidth() ) );
    segmentLabel->setMinimumSize( QSize( 75, 0 ) );
    segmentLabel->setMaximumSize( QSize( 75, 32767 ) );
    QFont segmentLabel_font(  segmentLabel->font() );
    segmentLabel->setFont( segmentLabel_font ); 
    segmentLabel->setAlignment( int( QLabel::AlignCenter ) );
    layout3->addWidget( segmentLabel );

    segmentEdit = new QLineEdit( protocolStatesGroup, "segmentEdit" );
    segmentEdit->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, segmentEdit->sizePolicy().hasHeightForWidth() ) );
    segmentEdit->setMaximumSize( QSize( 32767, 32767 ) );
    segmentEdit->setPaletteBackgroundColor( QColor( 239, 239, 239 ) );
    segmentEdit->setBackgroundOrigin( QLineEdit::WidgetOrigin );
    QFont segmentEdit_font(  segmentEdit->font() );
    segmentEdit->setFont( segmentEdit_font ); 
    segmentEdit->setFrameShape( QLineEdit::NoFrame );
    segmentEdit->setFrame( FALSE );
    segmentEdit->setAlignment( int( QLineEdit::AlignHCenter ) );
    segmentEdit->setReadOnly( TRUE );
    layout3->addWidget( segmentEdit );
    protocolStatesGroupLayout->addLayout( layout3 );
    spacer9 = new QSpacerItem( 20, 0, QSizePolicy::Minimum, QSizePolicy::Expanding );
    protocolStatesGroupLayout->addItem( spacer9 );

    layout4 = new QHBoxLayout( 0, 0, 6, "layout4"); 

    sweepLabel = new QLabel( protocolStatesGroup, "sweepLabel" );
    sweepLabel->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)0, (QSizePolicy::SizeType)5, 0, 0, sweepLabel->sizePolicy().hasHeightForWidth() ) );
    sweepLabel->setMinimumSize( QSize( 75, 0 ) );
    sweepLabel->setMaximumSize( QSize( 75, 32767 ) );
    QFont sweepLabel_font(  sweepLabel->font() );
    sweepLabel->setFont( sweepLabel_font ); 
    sweepLabel->setAlignment( int( QLabel::AlignCenter ) );
    layout4->addWidget( sweepLabel );

    sweepEdit = new QLineEdit( protocolStatesGroup, "sweepEdit" );
    sweepEdit->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, sweepEdit->sizePolicy().hasHeightForWidth() ) );
    sweepEdit->setMaximumSize( QSize( 32767, 32767 ) );
    sweepEdit->setPaletteBackgroundColor( QColor( 239, 239, 239 ) );
    sweepEdit->setBackgroundOrigin( QLineEdit::WidgetOrigin );
    QFont sweepEdit_font(  sweepEdit->font() );
    sweepEdit->setFont( sweepEdit_font ); 
    sweepEdit->setFrameShape( QLineEdit::NoFrame );
    sweepEdit->setFrame( FALSE );
    sweepEdit->setAlignment( int( QLineEdit::AlignHCenter ) );
    sweepEdit->setReadOnly( TRUE );
    layout4->addWidget( sweepEdit );
    protocolStatesGroupLayout->addLayout( layout4 );
    spacer10 = new QSpacerItem( 20, 0, QSizePolicy::Minimum, QSizePolicy::Expanding );
    protocolStatesGroupLayout->addItem( spacer10 );

    layout5 = new QHBoxLayout( 0, 0, 6, "layout5"); 

    timeLabel = new QLabel( protocolStatesGroup, "timeLabel" );
    timeLabel->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)0, (QSizePolicy::SizeType)5, 0, 0, timeLabel->sizePolicy().hasHeightForWidth() ) );
    timeLabel->setMinimumSize( QSize( 75, 0 ) );
    timeLabel->setMaximumSize( QSize( 75, 32767 ) );
    QFont timeLabel_font(  timeLabel->font() );
    timeLabel->setFont( timeLabel_font ); 
    timeLabel->setAlignment( int( QLabel::AlignCenter ) );
    layout5->addWidget( timeLabel );

    timeEdit = new QLineEdit( protocolStatesGroup, "timeEdit" );
    timeEdit->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, timeEdit->sizePolicy().hasHeightForWidth() ) );
    timeEdit->setMaximumSize( QSize( 32767, 32767 ) );
    timeEdit->setPaletteBackgroundColor( QColor( 239, 239, 239 ) );
    timeEdit->setBackgroundOrigin( QLineEdit::WidgetOrigin );
    QFont timeEdit_font(  timeEdit->font() );
    timeEdit->setFont( timeEdit_font ); 
    timeEdit->setFrameShape( QLineEdit::NoFrame );
    timeEdit->setFrame( FALSE );
    timeEdit->setAlignment( int( QLineEdit::AlignHCenter ) );
    timeEdit->setReadOnly( TRUE );
    layout5->addWidget( timeEdit );
    protocolStatesGroupLayout->addLayout( layout5 );
    CP_main_windowUILayout->addWidget( protocolStatesGroup );
    languageChange();
    resize( QSize(260, 379).expandedTo(minimumSizeHint()) );
    clearWState( WState_Polished );
}

/*
 *  Destroys the object and frees any allocated resources
 */
CP_main_windowUI::~CP_main_windowUI()
{
    // no need to delete child widgets, Qt does it all for us
}

/*
 *  Sets the strings of the subwidgets using the current
 *  language.
 */
void CP_main_windowUI::languageChange()
{
    setCaption( tr( "Clamp Protocol" ) );
    protocolControlButtonGroup->setTitle( tr( "Control" ) );
    QToolTip::add( protocolControlButtonGroup, QString::null );
    pauseButton->setText( QString::null );
    QToolTip::add( pauseButton, tr( "Pause module" ) );
    runProtocolButton->setText( QString::null );
    QToolTip::add( runProtocolButton, tr( "Start/Stop a loaded protocol" ) );
    modifyButton->setText( QString::null );
    QToolTip::add( modifyButton, tr( "Update parameters" ) );
    loadProtocolButton->setText( QString::null );
    QToolTip::add( loadProtocolButton, tr( "Load protocol file" ) );
    protocolEditorButton->setText( QString::null );
    QToolTip::add( protocolEditorButton, tr( "Open protocol editor" ) );
    plotWindowButton->setText( QString::null );
    QToolTip::add( plotWindowButton, tr( "Open plotting window" ) );
    protocolNameEdit->setText( QString::null );
    QToolTip::add( protocolNameEdit, tr( "Current name of loaded protocol" ) );
    protocolOptionGroup->setTitle( tr( "Options" ) );
    intervalTimeLabel->setText( tr( "Interval Time (ms)" ) );
    QToolTip::add( intervalTimeLabel, tr( "Time between trials, only applicable when running multiple trials" ) );
    trialsLabel->setText( tr( "# of Trials" ) );
    QToolTip::add( trialsLabel, tr( "Number of trials that will be run after hitting run button" ) );
    junctionPotentialLabel->setText( tr( "LJP (mV)" ) );
    QToolTip::add( junctionPotentialLabel, tr( "Liquid Junction potential (mV). (Vcmd = Vm + LJP)" ) );
    dataRecordCheckBox->setText( tr( "Record Data" ) );
    QToolTip::add( dataRecordCheckBox, tr( "Check if data will be recorded by data recorder module" ) );
    QToolTip::add( junctionPotentialEdit, tr( "Junction potential (mV). (Vcmd = Vm + LJP). Hit enter to save changes." ) );
    protocolStatesGroup->setTitle( tr( "States" ) );
    trialNumberLabel->setText( tr( "Trial" ) );
    QToolTip::add( trialNumberLabel, tr( "Current trial number, applicable when running multiple trials" ) );
    trialNumberEdit->setText( QString::null );
    QToolTip::add( trialNumberEdit, tr( "Current trial number, applicable when running multiple trials" ) );
    segmentLabel->setText( tr( "Segment" ) );
    QToolTip::add( segmentLabel, tr( "Current protocol step in current protocol segment" ) );
    segmentEdit->setText( QString::null );
    QToolTip::add( segmentEdit, tr( "Current protocol step in current protocol segment" ) );
    sweepLabel->setText( tr( "Sweep" ) );
    QToolTip::add( sweepLabel, tr( "Current protocol step in current protocol segment" ) );
    sweepEdit->setText( QString::null );
    QToolTip::add( sweepEdit, tr( "Current protocol step in current protocol segment" ) );
    timeLabel->setText( tr( "Time (ms)" ) );
    QToolTip::add( timeLabel, tr( "Time elapsed during current trial" ) );
    timeEdit->setText( QString::null );
    timeEdit->setInputMask( QString::null );
    QToolTip::add( timeEdit, tr( "Time elapsed during current trial" ) );
}

